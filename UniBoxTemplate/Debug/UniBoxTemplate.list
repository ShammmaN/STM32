
UniBoxTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a4  080033a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033ac  080033ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080033b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000074  08003428  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003428  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c15  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001744  00000000  00000000  00027cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00029400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00029bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153fa  00000000  00000000  0002a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1b5  00000000  00000000  0003f6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ef4  00000000  00000000  0004986f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002228  00000000  00000000  000cf7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003234 	.word	0x08003234

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003234 	.word	0x08003234

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fda0 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f80a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8cc 	bl	800072c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000594:	f000 f86e 	bl	8000674 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000598:	f000 f89a 	bl	80006d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  menu_init();
 800059c:	f000 fd08 	bl	8000fb0 <menu_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x1c>
	...

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f9c8 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a26      	ldr	r2, [pc, #152]	; (800066c <SystemClock_Config+0xc8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xcc>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000618:	23c0      	movs	r3, #192	; 0xc0
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061c:	2304      	movs	r3, #4
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fcdf 	bl	8001fec <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f932 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2103      	movs	r1, #3
 8000654:	4618      	mov	r0, r3
 8000656:	f001 ff41 	bl	80024dc <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000660:	f000 f91c 	bl	800089c <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f001 f84f 	bl	8001754 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f8ee 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000090 	.word	0x20000090
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C3_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_I2C3_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C3_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_I2C3_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C3_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C3_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C3_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C3_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2C3_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_I2C3_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C3_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C3_Init+0x50>)
 800070e:	f001 f821 	bl	8001754 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f8c0 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000e4 	.word	0x200000e4
 8000724:	40005c00 	.word	0x40005c00
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_GPIO_Init+0x104>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a39      	ldr	r2, [pc, #228]	; (8000830 <MX_GPIO_Init+0x104>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <MX_GPIO_Init+0x104>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <MX_GPIO_Init+0x104>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a32      	ldr	r2, [pc, #200]	; (8000830 <MX_GPIO_Init+0x104>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <MX_GPIO_Init+0x104>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_GPIO_Init+0x104>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <MX_GPIO_Init+0x104>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_GPIO_Init+0x104>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_GPIO_Init+0x104>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_GPIO_Init+0x104>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <MX_GPIO_Init+0x104>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_GPIO_Init+0x104>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80007ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4813      	ldr	r0, [pc, #76]	; (8000834 <MX_GPIO_Init+0x108>)
 80007e6:	f000 fe19 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : B3_Pin B4_Pin B5_Pin B6_Pin */
  GPIO_InitStruct.Pin = B3_Pin|B4_Pin|B5_Pin|B6_Pin;
 80007ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_GPIO_Init+0x10c>)
 8000802:	f000 fe0b 	bl	800141c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2017      	movs	r0, #23
 800080c:	f000 fdcf 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000810:	2017      	movs	r0, #23
 8000812:	f000 fde8 	bl	80013e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f000 fdc7 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f000 fde0 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400
 8000838:	40020c00 	.word	0x40020c00

0800083c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]

	counterOutside++;						 //For testing only
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_GPIO_EXTI_Callback+0x50>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_GPIO_EXTI_Callback+0x50>)
 800084e:	6013      	str	r3, [r2, #0]
	currentMillis = HAL_GetTick();
 8000850:	f000 fca2 	bl	8001198 <HAL_GetTick>
 8000854:	4603      	mov	r3, r0
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_GPIO_EXTI_Callback+0x54>)
 8000858:	6013      	str	r3, [r2, #0]
	  if (currentMillis - previousMillis > 30)
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_GPIO_EXTI_Callback+0x54>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_GPIO_EXTI_Callback+0x58>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2b1e      	cmp	r3, #30
 8000866:	d90c      	bls.n	8000882 <HAL_GPIO_EXTI_Callback+0x46>
	  {
	    counterInside++;					 //For testing only
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_GPIO_EXTI_Callback+0x5c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000870:	6013      	str	r3, [r2, #0]
	    menu_set(GPIO_Pin);
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fbb3 	bl	8000fe0 <menu_set>
	    previousMillis = currentMillis;
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_GPIO_EXTI_Callback+0x54>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <HAL_GPIO_EXTI_Callback+0x58>)
 8000880:	6013      	str	r3, [r2, #0]
	  }
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000140 	.word	0x20000140
 8000890:	2000013c 	.word	0x2000013c
 8000894:	20000138 	.word	0x20000138
 8000898:	20000144 	.word	0x20000144

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e6:	2007      	movs	r0, #7
 80008e8:	f000 fd56 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <HAL_I2C_MspInit+0x128>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12d      	bne.n	8000976 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a40      	ldr	r2, [pc, #256]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LSM_SCL_Pin|LSM_SDA_Pin;
 8000936:	f44f 7310 	mov.w	r3, #576	; 0x240
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093c:	2312      	movs	r3, #18
 800093e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000948:	2304      	movs	r3, #4
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4835      	ldr	r0, [pc, #212]	; (8000a28 <HAL_I2C_MspInit+0x130>)
 8000954:	f000 fd62 	bl	800141c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000974:	e050      	b.n	8000a18 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a2c      	ldr	r2, [pc, #176]	; (8000a2c <HAL_I2C_MspInit+0x134>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d14b      	bne.n	8000a18 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6313      	str	r3, [r2, #48]	; 0x30
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SDA_Pin;
 80009b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009ca:	2304      	movs	r3, #4
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <HAL_I2C_MspInit+0x138>)
 80009d6:	f000 fd21 	bl	800141c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_SCL_Pin;
 80009da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009ec:	2304      	movs	r3, #4
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <HAL_I2C_MspInit+0x13c>)
 80009f8:	f000 fd10 	bl	800141c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_I2C_MspInit+0x12c>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40005c00 	.word	0x40005c00
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020000 	.word	0x40020000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 fb74 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000a90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a94:	f000 fe46 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8000a98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a9c:	f000 fe42 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 8000aa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000aac:	f000 fe3a 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8000ab0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ab4:	f000 fe36 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ab8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000abc:	f000 fe32 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000ac0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ac4:	f000 fe2e 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f001 fefa 	bl	80028f4 <__errno>
 8000b00:	4603      	mov	r3, r0
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <_sbrk+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20020000 	.word	0x20020000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	20000148 	.word	0x20000148
 8000b34:	20000178 	.word	0x20000178

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f001 feb9 	bl	8002900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fcf9 	bl	8000584 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ba0:	080033b4 	.word	0x080033b4
  ldr r2, =_sbss
 8000ba4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ba8:	20000174 	.word	0x20000174

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <Key_Read>:




uint16_t Key_Read(uint16_t GPIO_Pin)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bc0:	d01f      	beq.n	8000c02 <Key_Read+0x52>
 8000bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bc6:	f300 809a 	bgt.w	8000cfe <Key_Read+0x14e>
 8000bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bce:	d031      	beq.n	8000c34 <Key_Read+0x84>
 8000bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bd4:	f300 8093 	bgt.w	8000cfe <Key_Read+0x14e>
 8000bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bdc:	d040      	beq.n	8000c60 <Key_Read+0xb0>
 8000bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be2:	f300 808c 	bgt.w	8000cfe <Key_Read+0x14e>
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bea:	d049      	beq.n	8000c80 <Key_Read+0xd0>
 8000bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf0:	f300 8085 	bgt.w	8000cfe <Key_Read+0x14e>
 8000bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf8:	d068      	beq.n	8000ccc <Key_Read+0x11c>
 8000bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfe:	d055      	beq.n	8000cac <Key_Read+0xfc>
 8000c00:	e07d      	b.n	8000cfe <Key_Read+0x14e>
		{
		case B1_Pin :
				lcd_clear();
 8000c02:	f000 f8f9 	bl	8000df8 <lcd_clear>
				lcd_line_1("Lewo");
 8000c06:	4841      	ldr	r0, [pc, #260]	; (8000d0c <Key_Read+0x15c>)
 8000c08:	f000 f95f 	bl	8000eca <lcd_line_1>
				Position = Position/10;
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <Key_Read+0x160>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <Key_Read+0x164>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <Key_Read+0x160>)
 8000c1c:	801a      	strh	r2, [r3, #0]
				sprintf(text, "Pozycja = %d",Position);
 8000c1e:	4b3c      	ldr	r3, [pc, #240]	; (8000d10 <Key_Read+0x160>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	493c      	ldr	r1, [pc, #240]	; (8000d18 <Key_Read+0x168>)
 8000c26:	483d      	ldr	r0, [pc, #244]	; (8000d1c <Key_Read+0x16c>)
 8000c28:	f001 fe96 	bl	8002958 <siprintf>
				lcd_line_4(text);
 8000c2c:	483b      	ldr	r0, [pc, #236]	; (8000d1c <Key_Read+0x16c>)
 8000c2e:	f000 f976 	bl	8000f1e <lcd_line_4>
				break;
 8000c32:	e064      	b.n	8000cfe <Key_Read+0x14e>


		case B2_Pin :
				lcd_clear();
 8000c34:	f000 f8e0 	bl	8000df8 <lcd_clear>
				lcd_line_1("Gora");
 8000c38:	4839      	ldr	r0, [pc, #228]	; (8000d20 <Key_Read+0x170>)
 8000c3a:	f000 f946 	bl	8000eca <lcd_line_1>
				Position -=1;
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <Key_Read+0x160>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <Key_Read+0x160>)
 8000c48:	801a      	strh	r2, [r3, #0]
				sprintf(text, "Pozycja = %d",Position);
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <Key_Read+0x160>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4931      	ldr	r1, [pc, #196]	; (8000d18 <Key_Read+0x168>)
 8000c52:	4832      	ldr	r0, [pc, #200]	; (8000d1c <Key_Read+0x16c>)
 8000c54:	f001 fe80 	bl	8002958 <siprintf>
				lcd_line_4(text);
 8000c58:	4830      	ldr	r0, [pc, #192]	; (8000d1c <Key_Read+0x16c>)
 8000c5a:	f000 f960 	bl	8000f1e <lcd_line_4>
				break;
 8000c5e:	e04e      	b.n	8000cfe <Key_Read+0x14e>


		case B3_Pin :
				lcd_clear();
 8000c60:	f000 f8ca 	bl	8000df8 <lcd_clear>
				lcd_line_1("Plus");
 8000c64:	482f      	ldr	r0, [pc, #188]	; (8000d24 <Key_Read+0x174>)
 8000c66:	f000 f930 	bl	8000eca <lcd_line_1>
				lcd_line_4(text);
 8000c6a:	482c      	ldr	r0, [pc, #176]	; (8000d1c <Key_Read+0x16c>)
 8000c6c:	f000 f957 	bl	8000f1e <lcd_line_4>
				i++;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <Key_Read+0x178>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <Key_Read+0x178>)
 8000c7c:	801a      	strh	r2, [r3, #0]
				break;
 8000c7e:	e03e      	b.n	8000cfe <Key_Read+0x14e>

		case B4_Pin :
				lcd_clear();
 8000c80:	f000 f8ba 	bl	8000df8 <lcd_clear>
				lcd_line_1("Dol");
 8000c84:	4829      	ldr	r0, [pc, #164]	; (8000d2c <Key_Read+0x17c>)
 8000c86:	f000 f920 	bl	8000eca <lcd_line_1>
				Position +=1;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <Key_Read+0x160>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <Key_Read+0x160>)
 8000c94:	801a      	strh	r2, [r3, #0]
				sprintf(text, "Pozycja = %d",Position);
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <Key_Read+0x160>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	491e      	ldr	r1, [pc, #120]	; (8000d18 <Key_Read+0x168>)
 8000c9e:	481f      	ldr	r0, [pc, #124]	; (8000d1c <Key_Read+0x16c>)
 8000ca0:	f001 fe5a 	bl	8002958 <siprintf>
				lcd_line_4(text);
 8000ca4:	481d      	ldr	r0, [pc, #116]	; (8000d1c <Key_Read+0x16c>)
 8000ca6:	f000 f93a 	bl	8000f1e <lcd_line_4>
				break;
 8000caa:	e028      	b.n	8000cfe <Key_Read+0x14e>


		case B5_Pin :
				lcd_clear();
 8000cac:	f000 f8a4 	bl	8000df8 <lcd_clear>
				lcd_line_1("Minus");
 8000cb0:	481f      	ldr	r0, [pc, #124]	; (8000d30 <Key_Read+0x180>)
 8000cb2:	f000 f90a 	bl	8000eca <lcd_line_1>
				lcd_line_4(text);
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <Key_Read+0x16c>)
 8000cb8:	f000 f931 	bl	8000f1e <lcd_line_4>
				i--;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <Key_Read+0x178>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <Key_Read+0x178>)
 8000cc8:	801a      	strh	r2, [r3, #0]
				break;
 8000cca:	e018      	b.n	8000cfe <Key_Read+0x14e>

		case B6_Pin :
				lcd_clear();
 8000ccc:	f000 f894 	bl	8000df8 <lcd_clear>
				lcd_line_1("Prawo");
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <Key_Read+0x184>)
 8000cd2:	f000 f8fa 	bl	8000eca <lcd_line_1>
				Position =Position*10;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <Key_Read+0x160>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <Key_Read+0x160>)
 8000ce6:	801a      	strh	r2, [r3, #0]
				sprintf(text, "Pozycja = %d",Position);
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <Key_Read+0x160>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	490a      	ldr	r1, [pc, #40]	; (8000d18 <Key_Read+0x168>)
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <Key_Read+0x16c>)
 8000cf2:	f001 fe31 	bl	8002958 <siprintf>
				lcd_line_4(text);
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <Key_Read+0x16c>)
 8000cf8:	f000 f911 	bl	8000f1e <lcd_line_4>
				break;
 8000cfc:	bf00      	nop

			}


	return Position;
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <Key_Read+0x160>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	0800324c 	.word	0x0800324c
 8000d10:	20000004 	.word	0x20000004
 8000d14:	cccccccd 	.word	0xcccccccd
 8000d18:	08003254 	.word	0x08003254
 8000d1c:	2000014c 	.word	0x2000014c
 8000d20:	08003264 	.word	0x08003264
 8000d24:	0800326c 	.word	0x0800326c
 8000d28:	20000006 	.word	0x20000006
 8000d2c:	08003274 	.word	0x08003274
 8000d30:	08003278 	.word	0x08003278
 8000d34:	08003280 	.word	0x08003280

08000d38 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	f043 030c 	orr.w	r3, r3, #12
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f043 0308 	orr.w	r3, r3, #8
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	f043 030c 	orr.w	r3, r3, #12
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2304      	movs	r3, #4
 8000d82:	214e      	movs	r1, #78	; 0x4e
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <lcd_send_cmd+0x5c>)
 8000d86:	f000 fe29 	bl	80019dc <HAL_I2C_Master_Transmit>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000e4 	.word	0x200000e4

08000d98 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	f043 030d 	orr.w	r3, r3, #13
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	f043 0309 	orr.w	r3, r3, #9
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000dc4:	7bbb      	ldrb	r3, [r7, #14]
 8000dc6:	f043 030d 	orr.w	r3, r3, #13
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	f043 0309 	orr.w	r3, r3, #9
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dd8:	f107 0208 	add.w	r2, r7, #8
 8000ddc:	2364      	movs	r3, #100	; 0x64
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2304      	movs	r3, #4
 8000de2:	214e      	movs	r1, #78	; 0x4e
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <lcd_send_data+0x5c>)
 8000de6:	f000 fdf9 	bl	80019dc <HAL_I2C_Master_Transmit>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000e4 	.word	0x200000e4

08000df8 <lcd_clear>:

void lcd_clear (void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff ff9a 	bl	8000d38 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	e005      	b.n	8000e16 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000e0a:	2020      	movs	r0, #32
 8000e0c:	f7ff ffc4 	bl	8000d98 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3301      	adds	r3, #1
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b63      	cmp	r3, #99	; 0x63
 8000e1a:	ddf6      	ble.n	8000e0a <lcd_clear+0x12>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <lcd_init>:

void lcd_init (void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e2a:	2032      	movs	r0, #50	; 0x32
 8000e2c:	f000 f9c0 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e30:	2030      	movs	r0, #48	; 0x30
 8000e32:	f7ff ff81 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e36:	2005      	movs	r0, #5
 8000e38:	f000 f9ba 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e3c:	2030      	movs	r0, #48	; 0x30
 8000e3e:	f7ff ff7b 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 f9b4 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e48:	2030      	movs	r0, #48	; 0x30
 8000e4a:	f7ff ff75 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(10);
 8000e4e:	200a      	movs	r0, #10
 8000e50:	f000 f9ae 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e54:	2020      	movs	r0, #32
 8000e56:	f7ff ff6f 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(10);
 8000e5a:	200a      	movs	r0, #10
 8000e5c:	f000 f9a8 	bl	80011b0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f7ff ff69 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f9a2 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e6c:	2008      	movs	r0, #8
 8000e6e:	f7ff ff63 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 f99c 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff ff5d 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 f996 	bl	80011b0 <HAL_Delay>
	HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 f993 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f7ff ff54 	bl	8000d38 <lcd_send_cmd>
	HAL_Delay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 f98d 	bl	80011b0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e96:	200c      	movs	r0, #12
 8000e98:	f7ff ff4e 	bl	8000d38 <lcd_send_cmd>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ea8:	e006      	b.n	8000eb8 <lcd_send_string+0x18>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff70 	bl	8000d98 <lcd_send_data>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f4      	bne.n	8000eaa <lcd_send_string+0xa>
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <lcd_line_1>:

void lcd_line_1 (char *str)  // send string to the lcd
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	 lcd_send_cmd (0x80|0x00);
 8000ed2:	2080      	movs	r0, #128	; 0x80
 8000ed4:	f7ff ff30 	bl	8000d38 <lcd_send_cmd>
	 lcd_send_string(str);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ffe1 	bl	8000ea0 <lcd_send_string>

}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <lcd_line_2>:
void lcd_line_2 (char *str)  // send string to the lcd
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	 lcd_send_cmd (0x80|0x40);
 8000eee:	20c0      	movs	r0, #192	; 0xc0
 8000ef0:	f7ff ff22 	bl	8000d38 <lcd_send_cmd>
	 lcd_send_string(str);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ffd3 	bl	8000ea0 <lcd_send_string>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <lcd_line_3>:
void lcd_line_3 (char *str)  // send string to the lcd
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (0x80|0x14);
 8000f0a:	2094      	movs	r0, #148	; 0x94
 8000f0c:	f7ff ff14 	bl	8000d38 <lcd_send_cmd>
	lcd_send_string(str);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffc5 	bl	8000ea0 <lcd_send_string>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <lcd_line_4>:
void lcd_line_4 (char *str)  // send string to the lcd
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (0x80|0x54);
 8000f26:	20d4      	movs	r0, #212	; 0xd4
 8000f28:	f7ff ff06 	bl	8000d38 <lcd_send_cmd>
	   lcd_send_string(str);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ffb7 	bl	8000ea0 <lcd_send_string>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <lcd_set_cursor>:


void lcd_set_cursor(uint8_t a, uint8_t b)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
	int i=0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
	switch(b){
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d81a      	bhi.n	8000f8c <lcd_set_cursor+0x50>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <lcd_set_cursor+0x20>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f75 	.word	0x08000f75
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f85 	.word	0x08000f85
	case 0: lcd_send_cmd(0x80);break;
 8000f6c:	2080      	movs	r0, #128	; 0x80
 8000f6e:	f7ff fee3 	bl	8000d38 <lcd_send_cmd>
 8000f72:	e00b      	b.n	8000f8c <lcd_set_cursor+0x50>
	case 1: lcd_send_cmd(0xC0);break;
 8000f74:	20c0      	movs	r0, #192	; 0xc0
 8000f76:	f7ff fedf 	bl	8000d38 <lcd_send_cmd>
 8000f7a:	e007      	b.n	8000f8c <lcd_set_cursor+0x50>
	case 2: lcd_send_cmd(0x94);break;
 8000f7c:	2094      	movs	r0, #148	; 0x94
 8000f7e:	f7ff fedb 	bl	8000d38 <lcd_send_cmd>
 8000f82:	e003      	b.n	8000f8c <lcd_set_cursor+0x50>
	case 3: lcd_send_cmd(0xd4);break;
 8000f84:	20d4      	movs	r0, #212	; 0xd4
 8000f86:	f7ff fed7 	bl	8000d38 <lcd_send_cmd>
 8000f8a:	bf00      	nop
	}
	for(i=0;i<a;i++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e005      	b.n	8000f9e <lcd_set_cursor+0x62>
		lcd_send_cmd(0x14);
 8000f92:	2014      	movs	r0, #20
 8000f94:	f7ff fed0 	bl	8000d38 <lcd_send_cmd>
	for(i=0;i<a;i++)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbf5      	blt.n	8000f92 <lcd_set_cursor+0x56>
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <menu_init>:
#include "Lcd_i2c.h"
#include "Keypad.h"


void menu_init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	lcd_init();
 8000fb4:	f7ff ff37 	bl	8000e26 <lcd_init>

	lcd_line_1("   EL-TECH SERWIS");
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <menu_init+0x24>)
 8000fba:	f7ff ff86 	bl	8000eca <lcd_line_1>
	lcd_line_2("--------------------");
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <menu_init+0x28>)
 8000fc0:	f7ff ff91 	bl	8000ee6 <lcd_line_2>
	lcd_line_3("     LOADING");
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <menu_init+0x2c>)
 8000fc6:	f7ff ff9c 	bl	8000f02 <lcd_line_3>
	animation();
 8000fca:	f000 f85f 	bl	800108c <animation>

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08003288 	.word	0x08003288
 8000fd8:	0800329c 	.word	0x0800329c
 8000fdc:	080032b4 	.word	0x080032b4

08000fe0 <menu_set>:


void menu_set(uint16_t GPIO_Pin)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	menu(Key_Read(GPIO_Pin));
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fddf 	bl	8000bb0 <Key_Read>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f804 	bl	8001002 <menu>

}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <menu>:


void menu(uint16_t Position)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	80fb      	strh	r3, [r7, #6]

	switch(Position)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <menu+0x16>
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <menu+0x1c>
//	case 64: menu64(); break;
//	case 65: menu65(); break;

	}

}
 8001016:	e005      	b.n	8001024 <menu+0x22>
	case 0: menu0(); break;
 8001018:	f000 f808 	bl	800102c <menu0>
 800101c:	e002      	b.n	8001024 <menu+0x22>
	case 1: menu1(); break;
 800101e:	f000 f81d 	bl	800105c <menu1>
 8001022:	bf00      	nop
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <menu0>:



static void menu0()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	lcd_line_1("     MAIN MENU      ");
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <menu0+0x20>)
 8001032:	f7ff ff4a 	bl	8000eca <lcd_line_1>
	lcd_line_2("                    ");
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <menu0+0x24>)
 8001038:	f7ff ff55 	bl	8000ee6 <lcd_line_2>
	lcd_line_3("->   ACCELERO     <-");
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <menu0+0x28>)
 800103e:	f7ff ff60 	bl	8000f02 <lcd_line_3>
	lcd_line_4("     MAGNETO        ");
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <menu0+0x2c>)
 8001044:	f7ff ff6b 	bl	8000f1e <lcd_line_4>

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	080032c4 	.word	0x080032c4
 8001050:	080032dc 	.word	0x080032dc
 8001054:	080032f4 	.word	0x080032f4
 8001058:	0800330c 	.word	0x0800330c

0800105c <menu1>:

static void menu1()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	lcd_line_1("     MAIN MENU      ");
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <menu1+0x20>)
 8001062:	f7ff ff32 	bl	8000eca <lcd_line_1>
	lcd_line_2("                    ");
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <menu1+0x24>)
 8001068:	f7ff ff3d 	bl	8000ee6 <lcd_line_2>
	lcd_line_3("     ACCELERO       ");
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <menu1+0x28>)
 800106e:	f7ff ff48 	bl	8000f02 <lcd_line_3>
	lcd_line_4("->   MAGNETO      <-");
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <menu1+0x2c>)
 8001074:	f7ff ff53 	bl	8000f1e <lcd_line_4>

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	080032c4 	.word	0x080032c4
 8001080:	080032dc 	.word	0x080032dc
 8001084:	08003324 	.word	0x08003324
 8001088:	0800333c 	.word	0x0800333c

0800108c <animation>:


void animation(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	lcd_set_cursor(0, 3);
 8001092:	2103      	movs	r1, #3
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff51 	bl	8000f3c <lcd_set_cursor>
	for(uint8_t i =0; i<20; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e008      	b.n	80010b2 <animation+0x26>
	{
	 lcd_send_string("|");
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <animation+0x3c>)
 80010a2:	f7ff fefd 	bl	8000ea0 <lcd_send_string>
	 HAL_Delay(35);
 80010a6:	2023      	movs	r0, #35	; 0x23
 80010a8:	f000 f882 	bl	80011b0 <HAL_Delay>
	for(uint8_t i =0; i<20; i++)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3301      	adds	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b13      	cmp	r3, #19
 80010b6:	d9f3      	bls.n	80010a0 <animation+0x14>
	}
	HAL_Delay(250);
 80010b8:	20fa      	movs	r0, #250	; 0xfa
 80010ba:	f000 f879 	bl	80011b0 <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08003354 	.word	0x08003354

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f94f 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fbd2 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f967 	bl	8001402 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f000 f92f 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000008 	.word	0x20000008

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2000000c 	.word	0x2000000c
 8001194:	20000160 	.word	0x20000160

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000160 	.word	0x20000160

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000000c 	.word	0x2000000c

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e159      	b.n	80016ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8148 	bne.w	80016e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	2b02      	cmp	r3, #2
 800146c:	d130      	bne.n	80014d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a2 	beq.w	80016e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a56      	ldr	r2, [pc, #344]	; (8001704 <HAL_GPIO_Init+0x2e8>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_GPIO_Init+0x2f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x202>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1fe>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a47      	ldr	r2, [pc, #284]	; (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1fa>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_GPIO_Init+0x2fc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1f6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a45      	ldr	r2, [pc, #276]	; (800171c <HAL_GPIO_Init+0x300>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1f2>
 800160a:	2304      	movs	r3, #4
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800160e:	2307      	movs	r3, #7
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b38      	ldr	r3, [pc, #224]	; (8001720 <HAL_GPIO_Init+0x304>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a2f      	ldr	r2, [pc, #188]	; (8001720 <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x304>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_GPIO_Init+0x304>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_GPIO_Init+0x304>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f aea2 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f87a 	bl	800083c <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e12b      	b.n	80019be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff f8bc 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2224      	movs	r2, #36	; 0x24
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017b8:	f001 f888 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 80017bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a81      	ldr	r2, [pc, #516]	; (80019c8 <HAL_I2C_Init+0x274>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d807      	bhi.n	80017d8 <HAL_I2C_Init+0x84>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4a80      	ldr	r2, [pc, #512]	; (80019cc <HAL_I2C_Init+0x278>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	bf94      	ite	ls
 80017d0:	2301      	movls	r3, #1
 80017d2:	2300      	movhi	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	e006      	b.n	80017e6 <HAL_I2C_Init+0x92>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a7d      	ldr	r2, [pc, #500]	; (80019d0 <HAL_I2C_Init+0x27c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf94      	ite	ls
 80017e0:	2301      	movls	r3, #1
 80017e2:	2300      	movhi	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0e7      	b.n	80019be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4a78      	ldr	r2, [pc, #480]	; (80019d4 <HAL_I2C_Init+0x280>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	0c9b      	lsrs	r3, r3, #18
 80017f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a6a      	ldr	r2, [pc, #424]	; (80019c8 <HAL_I2C_Init+0x274>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d802      	bhi.n	8001828 <HAL_I2C_Init+0xd4>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3301      	adds	r3, #1
 8001826:	e009      	b.n	800183c <HAL_I2C_Init+0xe8>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	4a69      	ldr	r2, [pc, #420]	; (80019d8 <HAL_I2C_Init+0x284>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	099b      	lsrs	r3, r3, #6
 800183a:	3301      	adds	r3, #1
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	430b      	orrs	r3, r1
 8001842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800184e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	495c      	ldr	r1, [pc, #368]	; (80019c8 <HAL_I2C_Init+0x274>)
 8001858:	428b      	cmp	r3, r1
 800185a:	d819      	bhi.n	8001890 <HAL_I2C_Init+0x13c>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e59      	subs	r1, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fbb1 f3f3 	udiv	r3, r1, r3
 800186a:	1c59      	adds	r1, r3, #1
 800186c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001870:	400b      	ands	r3, r1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00a      	beq.n	800188c <HAL_I2C_Init+0x138>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1e59      	subs	r1, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fbb1 f3f3 	udiv	r3, r1, r3
 8001884:	3301      	adds	r3, #1
 8001886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188a:	e051      	b.n	8001930 <HAL_I2C_Init+0x1dc>
 800188c:	2304      	movs	r3, #4
 800188e:	e04f      	b.n	8001930 <HAL_I2C_Init+0x1dc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d111      	bne.n	80018bc <HAL_I2C_Init+0x168>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e58      	subs	r0, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	440b      	add	r3, r1
 80018a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e012      	b.n	80018e2 <HAL_I2C_Init+0x18e>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e58      	subs	r0, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	0099      	lsls	r1, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Init+0x196>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e022      	b.n	8001930 <HAL_I2C_Init+0x1dc>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10e      	bne.n	8001910 <HAL_I2C_Init+0x1bc>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1e58      	subs	r0, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6859      	ldr	r1, [r3, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	440b      	add	r3, r1
 8001900:	fbb0 f3f3 	udiv	r3, r0, r3
 8001904:	3301      	adds	r3, #1
 8001906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190e:	e00f      	b.n	8001930 <HAL_I2C_Init+0x1dc>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1e58      	subs	r0, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	0099      	lsls	r1, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	fbb0 f3f3 	udiv	r3, r0, r3
 8001926:	3301      	adds	r3, #1
 8001928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	6809      	ldr	r1, [r1, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800195e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6911      	ldr	r1, [r2, #16]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68d2      	ldr	r2, [r2, #12]
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	430b      	orrs	r3, r1
 8001972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	000186a0 	.word	0x000186a0
 80019cc:	001e847f 	.word	0x001e847f
 80019d0:	003d08ff 	.word	0x003d08ff
 80019d4:	431bde83 	.word	0x431bde83
 80019d8:	10624dd3 	.word	0x10624dd3

080019dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	461a      	mov	r2, r3
 80019e8:	460b      	mov	r3, r1
 80019ea:	817b      	strh	r3, [r7, #10]
 80019ec:	4613      	mov	r3, r2
 80019ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff fbd2 	bl	8001198 <HAL_GetTick>
 80019f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	f040 80e0 	bne.w	8001bc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2319      	movs	r3, #25
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4970      	ldr	r1, [pc, #448]	; (8001bd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f964 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0d3      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_I2C_Master_Transmit+0x50>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e0cc      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1ea>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d007      	beq.n	8001a52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2221      	movs	r2, #33	; 0x21
 8001a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	893a      	ldrh	r2, [r7, #8]
 8001a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a94:	8979      	ldrh	r1, [r7, #10]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f89c 	bl	8001bd8 <I2C_MasterRequestWrite>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e08d      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ac0:	e066      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f9de 	bl	8001e88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d107      	bne.n	8001aea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e06b      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d11b      	bne.n	8001b64 <HAL_I2C_Master_Transmit+0x188>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d017      	beq.n	8001b64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	6a39      	ldr	r1, [r7, #32]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f9ce 	bl	8001f0a <I2C_WaitOnBTFFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d107      	bne.n	8001b8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01a      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d194      	bne.n	8001ac2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
  }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	00100002 	.word	0x00100002
 8001bd4:	ffff0000 	.word	0xffff0000

08001bd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d006      	beq.n	8001c02 <I2C_MasterRequestWrite+0x2a>
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d003      	beq.n	8001c02 <I2C_MasterRequestWrite+0x2a>
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c00:	d108      	bne.n	8001c14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e00b      	b.n	8001c2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d107      	bne.n	8001c2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f84f 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	d103      	bne.n	8001c5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e035      	b.n	8001ccc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c68:	d108      	bne.n	8001c7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e01b      	b.n	8001cb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	11db      	asrs	r3, r3, #7
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f003 0306 	and.w	r3, r3, #6
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f063 030f 	orn	r3, r3, #15
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <I2C_MasterRequestWrite+0xfc>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f875 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e010      	b.n	8001ccc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001caa:	897b      	ldrh	r3, [r7, #10]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <I2C_MasterRequestWrite+0x100>)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f865 	bl	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	00010008 	.word	0x00010008
 8001cd8:	00010002 	.word	0x00010002

08001cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cec:	e025      	b.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf4:	d021      	beq.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7ff fa4f 	bl	8001198 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d116      	bne.n	8001d3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e023      	b.n	8001d82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10d      	bne.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	e00c      	b.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf0c      	ite	eq
 8001d72:	2301      	moveq	r3, #1
 8001d74:	2300      	movne	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d0b6      	beq.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d98:	e051      	b.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d123      	bne.n	8001df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e046      	b.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df8:	d021      	beq.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff f9cd 	bl	8001198 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d116      	bne.n	8001e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e020      	b.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10c      	bne.n	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4013      	ands	r3, r2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	e00b      	b.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d18d      	bne.n	8001d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e94:	e02d      	b.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f878 	bl	8001f8c <I2C_IsAcknowledgeFailed>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e02d      	b.n	8001f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eac:	d021      	beq.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eae:	f7ff f973 	bl	8001198 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d116      	bne.n	8001ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f043 0220 	orr.w	r2, r3, #32
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e007      	b.n	8001f02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d1ca      	bne.n	8001e96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f16:	e02d      	b.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f837 	bl	8001f8c <I2C_IsAcknowledgeFailed>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e02d      	b.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f2e:	d021      	beq.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	f7ff f932 	bl	8001198 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e007      	b.n	8001f84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d1ca      	bne.n	8001f18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	d11b      	bne.n	8001fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e267      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d075      	beq.n	80020f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200a:	4b88      	ldr	r3, [pc, #544]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d00c      	beq.n	8002030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002016:	4b85      	ldr	r3, [pc, #532]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	2b08      	cmp	r3, #8
 8002020:	d112      	bne.n	8002048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002022:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202e:	d10b      	bne.n	8002048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	4b7e      	ldr	r3, [pc, #504]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d05b      	beq.n	80020f4 <HAL_RCC_OscConfig+0x108>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d157      	bne.n	80020f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e242      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x74>
 8002052:	4b76      	ldr	r3, [pc, #472]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a75      	ldr	r2, [pc, #468]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xb0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x98>
 800206a:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6f      	ldr	r2, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6c      	ldr	r2, [pc, #432]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xb0>
 8002084:	4b69      	ldr	r3, [pc, #420]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a68      	ldr	r2, [pc, #416]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff f878 	bl	8001198 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff f874 	bl	8001198 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e207      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b5b      	ldr	r3, [pc, #364]	; (800222c <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xc0>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff f864 	bl	8001198 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff f860 	bl	8001198 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1f3      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0xe8>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211a:	4b44      	ldr	r3, [pc, #272]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x152>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1c7      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4937      	ldr	r1, [pc, #220]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <HAL_RCC_OscConfig+0x244>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff f819 	bl	8001198 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff f815 	bl	8001198 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1a8      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_RCC_OscConfig+0x240>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4925      	ldr	r1, [pc, #148]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCC_OscConfig+0x244>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fff8 	bl	8001198 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ac:	f7fe fff4 	bl	8001198 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e187      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d036      	beq.n	8002244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d016      	beq.n	800220c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_RCC_OscConfig+0x248>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe ffd8 	bl	8001198 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe ffd4 	bl	8001198 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e167      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_OscConfig+0x240>)
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x200>
 800220a:	e01b      	b.n	8002244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_OscConfig+0x248>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe ffc1 	bl	8001198 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002218:	e00e      	b.n	8002238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221a:	f7fe ffbd 	bl	8001198 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d907      	bls.n	8002238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e150      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
 800222c:	40023800 	.word	0x40023800
 8002230:	42470000 	.word	0x42470000
 8002234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x470>)
 800223a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ea      	bne.n	800221a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8097 	beq.w	8002380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002256:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b7d      	ldr	r3, [pc, #500]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a7c      	ldr	r2, [pc, #496]	; (800245c <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b7a      	ldr	r3, [pc, #488]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b77      	ldr	r3, [pc, #476]	; (8002460 <HAL_RCC_OscConfig+0x474>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b74      	ldr	r3, [pc, #464]	; (8002460 <HAL_RCC_OscConfig+0x474>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a73      	ldr	r2, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x474>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe ff7d 	bl	8001198 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe ff79 	bl	8001198 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e10c      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_OscConfig+0x474>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x2ea>
 80022c8:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a63      	ldr	r2, [pc, #396]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
 80022d4:	e01c      	b.n	8002310 <HAL_RCC_OscConfig+0x324>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x30c>
 80022de:	4b5f      	ldr	r3, [pc, #380]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	4a5e      	ldr	r2, [pc, #376]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ea:	4b5c      	ldr	r3, [pc, #368]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	4a5b      	ldr	r2, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6713      	str	r3, [r2, #112]	; 0x70
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0x324>
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	4b55      	ldr	r3, [pc, #340]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a54      	ldr	r2, [pc, #336]	; (800245c <HAL_RCC_OscConfig+0x470>)
 800230a:	f023 0304 	bic.w	r3, r3, #4
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe ff3e 	bl	8001198 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe ff3a 	bl	8001198 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0cb      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0ee      	beq.n	8002320 <HAL_RCC_OscConfig+0x334>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe ff28 	bl	8001198 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe ff24 	bl	8001198 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0b5      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ee      	bne.n	800234c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d105      	bne.n	8002380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002374:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_RCC_OscConfig+0x470>)
 800237a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a1 	beq.w	80024cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800238a:	4b34      	ldr	r3, [pc, #208]	; (800245c <HAL_RCC_OscConfig+0x470>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b08      	cmp	r3, #8
 8002394:	d05c      	beq.n	8002450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d141      	bne.n	8002422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_RCC_OscConfig+0x478>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fef8 	bl	8001198 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fef4 	bl	8001198 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e087      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	019b      	lsls	r3, r3, #6
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	3b01      	subs	r3, #1
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	491b      	ldr	r1, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x470>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_RCC_OscConfig+0x478>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fecd 	bl	8001198 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fec9 	bl	8001198 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e05c      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x416>
 8002420:	e054      	b.n	80024cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x478>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe feb6 	bl	8001198 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe feb2 	bl	8001198 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e045      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x470>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x444>
 800244e:	e03d      	b.n	80024cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e038      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000
 8002464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x4ec>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d028      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d121      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d11a      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800249e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d111      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	3b01      	subs	r3, #1
 80024b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0cc      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d90c      	bls.n	8002518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b63      	ldr	r3, [pc, #396]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b8      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	494d      	ldr	r1, [pc, #308]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d044      	beq.n	80025fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d119      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e07f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d003      	beq.n	800259a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002596:	2b03      	cmp	r3, #3
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e067      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4934      	ldr	r1, [pc, #208]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025cc:	f7fe fde4 	bl	8001198 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7fe fde0 	bl	8001198 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e04f      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d20c      	bcs.n	8002624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e032      	b.n	800268a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002662:	f000 f821 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002666:	4602      	mov	r2, r0
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	5ccb      	ldrb	r3, [r1, r3]
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fd44 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00
 8002698:	40023800 	.word	0x40023800
 800269c:	08003358 	.word	0x08003358
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000008 	.word	0x20000008

080026a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ac:	b094      	sub	sp, #80	; 0x50
 80026ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
 80026b4:	2300      	movs	r3, #0
 80026b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026b8:	2300      	movs	r3, #0
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c0:	4b79      	ldr	r3, [pc, #484]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d00d      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x40>
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	f200 80e1 	bhi.w	8002894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x34>
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026da:	e0db      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b73      	ldr	r3, [pc, #460]	; (80028ac <HAL_RCC_GetSysClockFreq+0x204>)
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026e0:	e0db      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e2:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80026e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026e6:	e0d8      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e8:	4b6f      	ldr	r3, [pc, #444]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f2:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fe:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	099b      	lsrs	r3, r3, #6
 8002704:	2200      	movs	r2, #0
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
 8002708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 8002712:	2300      	movs	r3, #0
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
 8002716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800271a:	4622      	mov	r2, r4
 800271c:	462b      	mov	r3, r5
 800271e:	f04f 0000 	mov.w	r0, #0
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	0159      	lsls	r1, r3, #5
 8002728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800272c:	0150      	lsls	r0, r2, #5
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4621      	mov	r1, r4
 8002734:	1a51      	subs	r1, r2, r1
 8002736:	6139      	str	r1, [r7, #16]
 8002738:	4629      	mov	r1, r5
 800273a:	eb63 0301 	sbc.w	r3, r3, r1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800274c:	4659      	mov	r1, fp
 800274e:	018b      	lsls	r3, r1, #6
 8002750:	4651      	mov	r1, sl
 8002752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002756:	4651      	mov	r1, sl
 8002758:	018a      	lsls	r2, r1, #6
 800275a:	4651      	mov	r1, sl
 800275c:	ebb2 0801 	subs.w	r8, r2, r1
 8002760:	4659      	mov	r1, fp
 8002762:	eb63 0901 	sbc.w	r9, r3, r1
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800277a:	4690      	mov	r8, r2
 800277c:	4699      	mov	r9, r3
 800277e:	4623      	mov	r3, r4
 8002780:	eb18 0303 	adds.w	r3, r8, r3
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	462b      	mov	r3, r5
 8002788:	eb49 0303 	adc.w	r3, r9, r3
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800279a:	4629      	mov	r1, r5
 800279c:	024b      	lsls	r3, r1, #9
 800279e:	4621      	mov	r1, r4
 80027a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027a4:	4621      	mov	r1, r4
 80027a6:	024a      	lsls	r2, r1, #9
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ae:	2200      	movs	r2, #0
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027b8:	f7fd fd62 	bl	8000280 <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4613      	mov	r3, r2
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c4:	e058      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	2200      	movs	r2, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	4611      	mov	r1, r2
 80027d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027e0:	4642      	mov	r2, r8
 80027e2:	464b      	mov	r3, r9
 80027e4:	f04f 0000 	mov.w	r0, #0
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	0159      	lsls	r1, r3, #5
 80027ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f2:	0150      	lsls	r0, r2, #5
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4641      	mov	r1, r8
 80027fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80027fe:	4649      	mov	r1, r9
 8002800:	eb63 0b01 	sbc.w	fp, r3, r1
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002818:	ebb2 040a 	subs.w	r4, r2, sl
 800281c:	eb63 050b 	sbc.w	r5, r3, fp
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	00eb      	lsls	r3, r5, #3
 800282a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800282e:	00e2      	lsls	r2, r4, #3
 8002830:	4614      	mov	r4, r2
 8002832:	461d      	mov	r5, r3
 8002834:	4643      	mov	r3, r8
 8002836:	18e3      	adds	r3, r4, r3
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	464b      	mov	r3, r9
 800283c:	eb45 0303 	adc.w	r3, r5, r3
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800284e:	4629      	mov	r1, r5
 8002850:	028b      	lsls	r3, r1, #10
 8002852:	4621      	mov	r1, r4
 8002854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002858:	4621      	mov	r1, r4
 800285a:	028a      	lsls	r2, r1, #10
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002862:	2200      	movs	r2, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	61fa      	str	r2, [r7, #28]
 8002868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286c:	f7fd fd08 	bl	8000280 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4613      	mov	r3, r2
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800289c:	4618      	mov	r0, r3
 800289e:	3750      	adds	r7, #80	; 0x50
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08003368 	.word	0x08003368

080028f4 <__errno>:
 80028f4:	4b01      	ldr	r3, [pc, #4]	; (80028fc <__errno+0x8>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000010 	.word	0x20000010

08002900 <__libc_init_array>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	4d0d      	ldr	r5, [pc, #52]	; (8002938 <__libc_init_array+0x38>)
 8002904:	4c0d      	ldr	r4, [pc, #52]	; (800293c <__libc_init_array+0x3c>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	2600      	movs	r6, #0
 800290c:	42a6      	cmp	r6, r4
 800290e:	d109      	bne.n	8002924 <__libc_init_array+0x24>
 8002910:	4d0b      	ldr	r5, [pc, #44]	; (8002940 <__libc_init_array+0x40>)
 8002912:	4c0c      	ldr	r4, [pc, #48]	; (8002944 <__libc_init_array+0x44>)
 8002914:	f000 fc8e 	bl	8003234 <_init>
 8002918:	1b64      	subs	r4, r4, r5
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	2600      	movs	r6, #0
 800291e:	42a6      	cmp	r6, r4
 8002920:	d105      	bne.n	800292e <__libc_init_array+0x2e>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	f855 3b04 	ldr.w	r3, [r5], #4
 8002928:	4798      	blx	r3
 800292a:	3601      	adds	r6, #1
 800292c:	e7ee      	b.n	800290c <__libc_init_array+0xc>
 800292e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002932:	4798      	blx	r3
 8002934:	3601      	adds	r6, #1
 8002936:	e7f2      	b.n	800291e <__libc_init_array+0x1e>
 8002938:	080033ac 	.word	0x080033ac
 800293c:	080033ac 	.word	0x080033ac
 8002940:	080033ac 	.word	0x080033ac
 8002944:	080033b0 	.word	0x080033b0

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <siprintf>:
 8002958:	b40e      	push	{r1, r2, r3}
 800295a:	b500      	push	{lr}
 800295c:	b09c      	sub	sp, #112	; 0x70
 800295e:	ab1d      	add	r3, sp, #116	; 0x74
 8002960:	9002      	str	r0, [sp, #8]
 8002962:	9006      	str	r0, [sp, #24]
 8002964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <siprintf+0x38>)
 800296a:	9107      	str	r1, [sp, #28]
 800296c:	9104      	str	r1, [sp, #16]
 800296e:	4909      	ldr	r1, [pc, #36]	; (8002994 <siprintf+0x3c>)
 8002970:	f853 2b04 	ldr.w	r2, [r3], #4
 8002974:	9105      	str	r1, [sp, #20]
 8002976:	6800      	ldr	r0, [r0, #0]
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	a902      	add	r1, sp, #8
 800297c:	f000 f868 	bl	8002a50 <_svfiprintf_r>
 8002980:	9b02      	ldr	r3, [sp, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	b01c      	add	sp, #112	; 0x70
 8002988:	f85d eb04 	ldr.w	lr, [sp], #4
 800298c:	b003      	add	sp, #12
 800298e:	4770      	bx	lr
 8002990:	20000010 	.word	0x20000010
 8002994:	ffff0208 	.word	0xffff0208

08002998 <__ssputs_r>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	688e      	ldr	r6, [r1, #8]
 800299e:	429e      	cmp	r6, r3
 80029a0:	4682      	mov	sl, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	4690      	mov	r8, r2
 80029a6:	461f      	mov	r7, r3
 80029a8:	d838      	bhi.n	8002a1c <__ssputs_r+0x84>
 80029aa:	898a      	ldrh	r2, [r1, #12]
 80029ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029b0:	d032      	beq.n	8002a18 <__ssputs_r+0x80>
 80029b2:	6825      	ldr	r5, [r4, #0]
 80029b4:	6909      	ldr	r1, [r1, #16]
 80029b6:	eba5 0901 	sub.w	r9, r5, r1
 80029ba:	6965      	ldr	r5, [r4, #20]
 80029bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029c4:	3301      	adds	r3, #1
 80029c6:	444b      	add	r3, r9
 80029c8:	106d      	asrs	r5, r5, #1
 80029ca:	429d      	cmp	r5, r3
 80029cc:	bf38      	it	cc
 80029ce:	461d      	movcc	r5, r3
 80029d0:	0553      	lsls	r3, r2, #21
 80029d2:	d531      	bpl.n	8002a38 <__ssputs_r+0xa0>
 80029d4:	4629      	mov	r1, r5
 80029d6:	f000 fb63 	bl	80030a0 <_malloc_r>
 80029da:	4606      	mov	r6, r0
 80029dc:	b950      	cbnz	r0, 80029f4 <__ssputs_r+0x5c>
 80029de:	230c      	movs	r3, #12
 80029e0:	f8ca 3000 	str.w	r3, [sl]
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f4:	6921      	ldr	r1, [r4, #16]
 80029f6:	464a      	mov	r2, r9
 80029f8:	f000 fabe 	bl	8002f78 <memcpy>
 80029fc:	89a3      	ldrh	r3, [r4, #12]
 80029fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a06:	81a3      	strh	r3, [r4, #12]
 8002a08:	6126      	str	r6, [r4, #16]
 8002a0a:	6165      	str	r5, [r4, #20]
 8002a0c:	444e      	add	r6, r9
 8002a0e:	eba5 0509 	sub.w	r5, r5, r9
 8002a12:	6026      	str	r6, [r4, #0]
 8002a14:	60a5      	str	r5, [r4, #8]
 8002a16:	463e      	mov	r6, r7
 8002a18:	42be      	cmp	r6, r7
 8002a1a:	d900      	bls.n	8002a1e <__ssputs_r+0x86>
 8002a1c:	463e      	mov	r6, r7
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	4632      	mov	r2, r6
 8002a22:	4641      	mov	r1, r8
 8002a24:	f000 fab6 	bl	8002f94 <memmove>
 8002a28:	68a3      	ldr	r3, [r4, #8]
 8002a2a:	1b9b      	subs	r3, r3, r6
 8002a2c:	60a3      	str	r3, [r4, #8]
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	4433      	add	r3, r6
 8002a32:	6023      	str	r3, [r4, #0]
 8002a34:	2000      	movs	r0, #0
 8002a36:	e7db      	b.n	80029f0 <__ssputs_r+0x58>
 8002a38:	462a      	mov	r2, r5
 8002a3a:	f000 fba5 	bl	8003188 <_realloc_r>
 8002a3e:	4606      	mov	r6, r0
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d1e1      	bne.n	8002a08 <__ssputs_r+0x70>
 8002a44:	6921      	ldr	r1, [r4, #16]
 8002a46:	4650      	mov	r0, sl
 8002a48:	f000 fabe 	bl	8002fc8 <_free_r>
 8002a4c:	e7c7      	b.n	80029de <__ssputs_r+0x46>
	...

08002a50 <_svfiprintf_r>:
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	4698      	mov	r8, r3
 8002a56:	898b      	ldrh	r3, [r1, #12]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	b09d      	sub	sp, #116	; 0x74
 8002a5c:	4607      	mov	r7, r0
 8002a5e:	460d      	mov	r5, r1
 8002a60:	4614      	mov	r4, r2
 8002a62:	d50e      	bpl.n	8002a82 <_svfiprintf_r+0x32>
 8002a64:	690b      	ldr	r3, [r1, #16]
 8002a66:	b963      	cbnz	r3, 8002a82 <_svfiprintf_r+0x32>
 8002a68:	2140      	movs	r1, #64	; 0x40
 8002a6a:	f000 fb19 	bl	80030a0 <_malloc_r>
 8002a6e:	6028      	str	r0, [r5, #0]
 8002a70:	6128      	str	r0, [r5, #16]
 8002a72:	b920      	cbnz	r0, 8002a7e <_svfiprintf_r+0x2e>
 8002a74:	230c      	movs	r3, #12
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a7c:	e0d1      	b.n	8002c22 <_svfiprintf_r+0x1d2>
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	616b      	str	r3, [r5, #20]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9309      	str	r3, [sp, #36]	; 0x24
 8002a86:	2320      	movs	r3, #32
 8002a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a90:	2330      	movs	r3, #48	; 0x30
 8002a92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c3c <_svfiprintf_r+0x1ec>
 8002a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a9a:	f04f 0901 	mov.w	r9, #1
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	469a      	mov	sl, r3
 8002aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aa6:	b10a      	cbz	r2, 8002aac <_svfiprintf_r+0x5c>
 8002aa8:	2a25      	cmp	r2, #37	; 0x25
 8002aaa:	d1f9      	bne.n	8002aa0 <_svfiprintf_r+0x50>
 8002aac:	ebba 0b04 	subs.w	fp, sl, r4
 8002ab0:	d00b      	beq.n	8002aca <_svfiprintf_r+0x7a>
 8002ab2:	465b      	mov	r3, fp
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	4638      	mov	r0, r7
 8002aba:	f7ff ff6d 	bl	8002998 <__ssputs_r>
 8002abe:	3001      	adds	r0, #1
 8002ac0:	f000 80aa 	beq.w	8002c18 <_svfiprintf_r+0x1c8>
 8002ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ac6:	445a      	add	r2, fp
 8002ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8002aca:	f89a 3000 	ldrb.w	r3, [sl]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80a2 	beq.w	8002c18 <_svfiprintf_r+0x1c8>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ade:	f10a 0a01 	add.w	sl, sl, #1
 8002ae2:	9304      	str	r3, [sp, #16]
 8002ae4:	9307      	str	r3, [sp, #28]
 8002ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aea:	931a      	str	r3, [sp, #104]	; 0x68
 8002aec:	4654      	mov	r4, sl
 8002aee:	2205      	movs	r2, #5
 8002af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002af4:	4851      	ldr	r0, [pc, #324]	; (8002c3c <_svfiprintf_r+0x1ec>)
 8002af6:	f7fd fb73 	bl	80001e0 <memchr>
 8002afa:	9a04      	ldr	r2, [sp, #16]
 8002afc:	b9d8      	cbnz	r0, 8002b36 <_svfiprintf_r+0xe6>
 8002afe:	06d0      	lsls	r0, r2, #27
 8002b00:	bf44      	itt	mi
 8002b02:	2320      	movmi	r3, #32
 8002b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b08:	0711      	lsls	r1, r2, #28
 8002b0a:	bf44      	itt	mi
 8002b0c:	232b      	movmi	r3, #43	; 0x2b
 8002b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b12:	f89a 3000 	ldrb.w	r3, [sl]
 8002b16:	2b2a      	cmp	r3, #42	; 0x2a
 8002b18:	d015      	beq.n	8002b46 <_svfiprintf_r+0xf6>
 8002b1a:	9a07      	ldr	r2, [sp, #28]
 8002b1c:	4654      	mov	r4, sl
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f04f 0c0a 	mov.w	ip, #10
 8002b24:	4621      	mov	r1, r4
 8002b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b2a:	3b30      	subs	r3, #48	; 0x30
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d94e      	bls.n	8002bce <_svfiprintf_r+0x17e>
 8002b30:	b1b0      	cbz	r0, 8002b60 <_svfiprintf_r+0x110>
 8002b32:	9207      	str	r2, [sp, #28]
 8002b34:	e014      	b.n	8002b60 <_svfiprintf_r+0x110>
 8002b36:	eba0 0308 	sub.w	r3, r0, r8
 8002b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	9304      	str	r3, [sp, #16]
 8002b42:	46a2      	mov	sl, r4
 8002b44:	e7d2      	b.n	8002aec <_svfiprintf_r+0x9c>
 8002b46:	9b03      	ldr	r3, [sp, #12]
 8002b48:	1d19      	adds	r1, r3, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	9103      	str	r1, [sp, #12]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bfbb      	ittet	lt
 8002b52:	425b      	neglt	r3, r3
 8002b54:	f042 0202 	orrlt.w	r2, r2, #2
 8002b58:	9307      	strge	r3, [sp, #28]
 8002b5a:	9307      	strlt	r3, [sp, #28]
 8002b5c:	bfb8      	it	lt
 8002b5e:	9204      	strlt	r2, [sp, #16]
 8002b60:	7823      	ldrb	r3, [r4, #0]
 8002b62:	2b2e      	cmp	r3, #46	; 0x2e
 8002b64:	d10c      	bne.n	8002b80 <_svfiprintf_r+0x130>
 8002b66:	7863      	ldrb	r3, [r4, #1]
 8002b68:	2b2a      	cmp	r3, #42	; 0x2a
 8002b6a:	d135      	bne.n	8002bd8 <_svfiprintf_r+0x188>
 8002b6c:	9b03      	ldr	r3, [sp, #12]
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	9203      	str	r2, [sp, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bfb8      	it	lt
 8002b78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b7c:	3402      	adds	r4, #2
 8002b7e:	9305      	str	r3, [sp, #20]
 8002b80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c4c <_svfiprintf_r+0x1fc>
 8002b84:	7821      	ldrb	r1, [r4, #0]
 8002b86:	2203      	movs	r2, #3
 8002b88:	4650      	mov	r0, sl
 8002b8a:	f7fd fb29 	bl	80001e0 <memchr>
 8002b8e:	b140      	cbz	r0, 8002ba2 <_svfiprintf_r+0x152>
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	eba0 000a 	sub.w	r0, r0, sl
 8002b96:	fa03 f000 	lsl.w	r0, r3, r0
 8002b9a:	9b04      	ldr	r3, [sp, #16]
 8002b9c:	4303      	orrs	r3, r0
 8002b9e:	3401      	adds	r4, #1
 8002ba0:	9304      	str	r3, [sp, #16]
 8002ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba6:	4826      	ldr	r0, [pc, #152]	; (8002c40 <_svfiprintf_r+0x1f0>)
 8002ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bac:	2206      	movs	r2, #6
 8002bae:	f7fd fb17 	bl	80001e0 <memchr>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d038      	beq.n	8002c28 <_svfiprintf_r+0x1d8>
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <_svfiprintf_r+0x1f4>)
 8002bb8:	bb1b      	cbnz	r3, 8002c02 <_svfiprintf_r+0x1b2>
 8002bba:	9b03      	ldr	r3, [sp, #12]
 8002bbc:	3307      	adds	r3, #7
 8002bbe:	f023 0307 	bic.w	r3, r3, #7
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	9303      	str	r3, [sp, #12]
 8002bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bc8:	4433      	add	r3, r6
 8002bca:	9309      	str	r3, [sp, #36]	; 0x24
 8002bcc:	e767      	b.n	8002a9e <_svfiprintf_r+0x4e>
 8002bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	e7a5      	b.n	8002b24 <_svfiprintf_r+0xd4>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	3401      	adds	r4, #1
 8002bdc:	9305      	str	r3, [sp, #20]
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0c0a 	mov.w	ip, #10
 8002be4:	4620      	mov	r0, r4
 8002be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bea:	3a30      	subs	r2, #48	; 0x30
 8002bec:	2a09      	cmp	r2, #9
 8002bee:	d903      	bls.n	8002bf8 <_svfiprintf_r+0x1a8>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0c5      	beq.n	8002b80 <_svfiprintf_r+0x130>
 8002bf4:	9105      	str	r1, [sp, #20]
 8002bf6:	e7c3      	b.n	8002b80 <_svfiprintf_r+0x130>
 8002bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e7f0      	b.n	8002be4 <_svfiprintf_r+0x194>
 8002c02:	ab03      	add	r3, sp, #12
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	462a      	mov	r2, r5
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <_svfiprintf_r+0x1f8>)
 8002c0a:	a904      	add	r1, sp, #16
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	f3af 8000 	nop.w
 8002c12:	1c42      	adds	r2, r0, #1
 8002c14:	4606      	mov	r6, r0
 8002c16:	d1d6      	bne.n	8002bc6 <_svfiprintf_r+0x176>
 8002c18:	89ab      	ldrh	r3, [r5, #12]
 8002c1a:	065b      	lsls	r3, r3, #25
 8002c1c:	f53f af2c 	bmi.w	8002a78 <_svfiprintf_r+0x28>
 8002c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c22:	b01d      	add	sp, #116	; 0x74
 8002c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c28:	ab03      	add	r3, sp, #12
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <_svfiprintf_r+0x1f8>)
 8002c30:	a904      	add	r1, sp, #16
 8002c32:	4638      	mov	r0, r7
 8002c34:	f000 f87a 	bl	8002d2c <_printf_i>
 8002c38:	e7eb      	b.n	8002c12 <_svfiprintf_r+0x1c2>
 8002c3a:	bf00      	nop
 8002c3c:	08003370 	.word	0x08003370
 8002c40:	0800337a 	.word	0x0800337a
 8002c44:	00000000 	.word	0x00000000
 8002c48:	08002999 	.word	0x08002999
 8002c4c:	08003376 	.word	0x08003376

08002c50 <_printf_common>:
 8002c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c54:	4616      	mov	r6, r2
 8002c56:	4699      	mov	r9, r3
 8002c58:	688a      	ldr	r2, [r1, #8]
 8002c5a:	690b      	ldr	r3, [r1, #16]
 8002c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bfb8      	it	lt
 8002c64:	4613      	movlt	r3, r2
 8002c66:	6033      	str	r3, [r6, #0]
 8002c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	b10a      	cbz	r2, 8002c76 <_printf_common+0x26>
 8002c72:	3301      	adds	r3, #1
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	0699      	lsls	r1, r3, #26
 8002c7a:	bf42      	ittt	mi
 8002c7c:	6833      	ldrmi	r3, [r6, #0]
 8002c7e:	3302      	addmi	r3, #2
 8002c80:	6033      	strmi	r3, [r6, #0]
 8002c82:	6825      	ldr	r5, [r4, #0]
 8002c84:	f015 0506 	ands.w	r5, r5, #6
 8002c88:	d106      	bne.n	8002c98 <_printf_common+0x48>
 8002c8a:	f104 0a19 	add.w	sl, r4, #25
 8002c8e:	68e3      	ldr	r3, [r4, #12]
 8002c90:	6832      	ldr	r2, [r6, #0]
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	42ab      	cmp	r3, r5
 8002c96:	dc26      	bgt.n	8002ce6 <_printf_common+0x96>
 8002c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c9c:	1e13      	subs	r3, r2, #0
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	bf18      	it	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	0692      	lsls	r2, r2, #26
 8002ca6:	d42b      	bmi.n	8002d00 <_printf_common+0xb0>
 8002ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cac:	4649      	mov	r1, r9
 8002cae:	4638      	mov	r0, r7
 8002cb0:	47c0      	blx	r8
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d01e      	beq.n	8002cf4 <_printf_common+0xa4>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	68e5      	ldr	r5, [r4, #12]
 8002cba:	6832      	ldr	r2, [r6, #0]
 8002cbc:	f003 0306 	and.w	r3, r3, #6
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	bf08      	it	eq
 8002cc4:	1aad      	subeq	r5, r5, r2
 8002cc6:	68a3      	ldr	r3, [r4, #8]
 8002cc8:	6922      	ldr	r2, [r4, #16]
 8002cca:	bf0c      	ite	eq
 8002ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cd0:	2500      	movne	r5, #0
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	bfc4      	itt	gt
 8002cd6:	1a9b      	subgt	r3, r3, r2
 8002cd8:	18ed      	addgt	r5, r5, r3
 8002cda:	2600      	movs	r6, #0
 8002cdc:	341a      	adds	r4, #26
 8002cde:	42b5      	cmp	r5, r6
 8002ce0:	d11a      	bne.n	8002d18 <_printf_common+0xc8>
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e008      	b.n	8002cf8 <_printf_common+0xa8>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4652      	mov	r2, sl
 8002cea:	4649      	mov	r1, r9
 8002cec:	4638      	mov	r0, r7
 8002cee:	47c0      	blx	r8
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d103      	bne.n	8002cfc <_printf_common+0xac>
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfc:	3501      	adds	r5, #1
 8002cfe:	e7c6      	b.n	8002c8e <_printf_common+0x3e>
 8002d00:	18e1      	adds	r1, r4, r3
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	2030      	movs	r0, #48	; 0x30
 8002d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d0a:	4422      	add	r2, r4
 8002d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d14:	3302      	adds	r3, #2
 8002d16:	e7c7      	b.n	8002ca8 <_printf_common+0x58>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	4638      	mov	r0, r7
 8002d20:	47c0      	blx	r8
 8002d22:	3001      	adds	r0, #1
 8002d24:	d0e6      	beq.n	8002cf4 <_printf_common+0xa4>
 8002d26:	3601      	adds	r6, #1
 8002d28:	e7d9      	b.n	8002cde <_printf_common+0x8e>
	...

08002d2c <_printf_i>:
 8002d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d30:	7e0f      	ldrb	r7, [r1, #24]
 8002d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d34:	2f78      	cmp	r7, #120	; 0x78
 8002d36:	4691      	mov	r9, r2
 8002d38:	4680      	mov	r8, r0
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	469a      	mov	sl, r3
 8002d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d42:	d807      	bhi.n	8002d54 <_printf_i+0x28>
 8002d44:	2f62      	cmp	r7, #98	; 0x62
 8002d46:	d80a      	bhi.n	8002d5e <_printf_i+0x32>
 8002d48:	2f00      	cmp	r7, #0
 8002d4a:	f000 80d8 	beq.w	8002efe <_printf_i+0x1d2>
 8002d4e:	2f58      	cmp	r7, #88	; 0x58
 8002d50:	f000 80a3 	beq.w	8002e9a <_printf_i+0x16e>
 8002d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d5c:	e03a      	b.n	8002dd4 <_printf_i+0xa8>
 8002d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d62:	2b15      	cmp	r3, #21
 8002d64:	d8f6      	bhi.n	8002d54 <_printf_i+0x28>
 8002d66:	a101      	add	r1, pc, #4	; (adr r1, 8002d6c <_printf_i+0x40>)
 8002d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d6c:	08002dc5 	.word	0x08002dc5
 8002d70:	08002dd9 	.word	0x08002dd9
 8002d74:	08002d55 	.word	0x08002d55
 8002d78:	08002d55 	.word	0x08002d55
 8002d7c:	08002d55 	.word	0x08002d55
 8002d80:	08002d55 	.word	0x08002d55
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002d55 	.word	0x08002d55
 8002d8c:	08002d55 	.word	0x08002d55
 8002d90:	08002d55 	.word	0x08002d55
 8002d94:	08002d55 	.word	0x08002d55
 8002d98:	08002ee5 	.word	0x08002ee5
 8002d9c:	08002e09 	.word	0x08002e09
 8002da0:	08002ec7 	.word	0x08002ec7
 8002da4:	08002d55 	.word	0x08002d55
 8002da8:	08002d55 	.word	0x08002d55
 8002dac:	08002f07 	.word	0x08002f07
 8002db0:	08002d55 	.word	0x08002d55
 8002db4:	08002e09 	.word	0x08002e09
 8002db8:	08002d55 	.word	0x08002d55
 8002dbc:	08002d55 	.word	0x08002d55
 8002dc0:	08002ecf 	.word	0x08002ecf
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	602a      	str	r2, [r5, #0]
 8002dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0a3      	b.n	8002f20 <_printf_i+0x1f4>
 8002dd8:	6820      	ldr	r0, [r4, #0]
 8002dda:	6829      	ldr	r1, [r5, #0]
 8002ddc:	0606      	lsls	r6, r0, #24
 8002dde:	f101 0304 	add.w	r3, r1, #4
 8002de2:	d50a      	bpl.n	8002dfa <_printf_i+0xce>
 8002de4:	680e      	ldr	r6, [r1, #0]
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	2e00      	cmp	r6, #0
 8002dea:	da03      	bge.n	8002df4 <_printf_i+0xc8>
 8002dec:	232d      	movs	r3, #45	; 0x2d
 8002dee:	4276      	negs	r6, r6
 8002df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df4:	485e      	ldr	r0, [pc, #376]	; (8002f70 <_printf_i+0x244>)
 8002df6:	230a      	movs	r3, #10
 8002df8:	e019      	b.n	8002e2e <_printf_i+0x102>
 8002dfa:	680e      	ldr	r6, [r1, #0]
 8002dfc:	602b      	str	r3, [r5, #0]
 8002dfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e02:	bf18      	it	ne
 8002e04:	b236      	sxthne	r6, r6
 8002e06:	e7ef      	b.n	8002de8 <_printf_i+0xbc>
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	1d19      	adds	r1, r3, #4
 8002e0e:	6029      	str	r1, [r5, #0]
 8002e10:	0601      	lsls	r1, r0, #24
 8002e12:	d501      	bpl.n	8002e18 <_printf_i+0xec>
 8002e14:	681e      	ldr	r6, [r3, #0]
 8002e16:	e002      	b.n	8002e1e <_printf_i+0xf2>
 8002e18:	0646      	lsls	r6, r0, #25
 8002e1a:	d5fb      	bpl.n	8002e14 <_printf_i+0xe8>
 8002e1c:	881e      	ldrh	r6, [r3, #0]
 8002e1e:	4854      	ldr	r0, [pc, #336]	; (8002f70 <_printf_i+0x244>)
 8002e20:	2f6f      	cmp	r7, #111	; 0x6f
 8002e22:	bf0c      	ite	eq
 8002e24:	2308      	moveq	r3, #8
 8002e26:	230a      	movne	r3, #10
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e2e:	6865      	ldr	r5, [r4, #4]
 8002e30:	60a5      	str	r5, [r4, #8]
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	bfa2      	ittt	ge
 8002e36:	6821      	ldrge	r1, [r4, #0]
 8002e38:	f021 0104 	bicge.w	r1, r1, #4
 8002e3c:	6021      	strge	r1, [r4, #0]
 8002e3e:	b90e      	cbnz	r6, 8002e44 <_printf_i+0x118>
 8002e40:	2d00      	cmp	r5, #0
 8002e42:	d04d      	beq.n	8002ee0 <_printf_i+0x1b4>
 8002e44:	4615      	mov	r5, r2
 8002e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8002e4e:	5dc7      	ldrb	r7, [r0, r7]
 8002e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e54:	4637      	mov	r7, r6
 8002e56:	42bb      	cmp	r3, r7
 8002e58:	460e      	mov	r6, r1
 8002e5a:	d9f4      	bls.n	8002e46 <_printf_i+0x11a>
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d10b      	bne.n	8002e78 <_printf_i+0x14c>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	07de      	lsls	r6, r3, #31
 8002e64:	d508      	bpl.n	8002e78 <_printf_i+0x14c>
 8002e66:	6923      	ldr	r3, [r4, #16]
 8002e68:	6861      	ldr	r1, [r4, #4]
 8002e6a:	4299      	cmp	r1, r3
 8002e6c:	bfde      	ittt	le
 8002e6e:	2330      	movle	r3, #48	; 0x30
 8002e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e78:	1b52      	subs	r2, r2, r5
 8002e7a:	6122      	str	r2, [r4, #16]
 8002e7c:	f8cd a000 	str.w	sl, [sp]
 8002e80:	464b      	mov	r3, r9
 8002e82:	aa03      	add	r2, sp, #12
 8002e84:	4621      	mov	r1, r4
 8002e86:	4640      	mov	r0, r8
 8002e88:	f7ff fee2 	bl	8002c50 <_printf_common>
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d14c      	bne.n	8002f2a <_printf_i+0x1fe>
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e94:	b004      	add	sp, #16
 8002e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e9a:	4835      	ldr	r0, [pc, #212]	; (8002f70 <_printf_i+0x244>)
 8002e9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002ea0:	6829      	ldr	r1, [r5, #0]
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ea8:	6029      	str	r1, [r5, #0]
 8002eaa:	061d      	lsls	r5, r3, #24
 8002eac:	d514      	bpl.n	8002ed8 <_printf_i+0x1ac>
 8002eae:	07df      	lsls	r7, r3, #31
 8002eb0:	bf44      	itt	mi
 8002eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8002eb6:	6023      	strmi	r3, [r4, #0]
 8002eb8:	b91e      	cbnz	r6, 8002ec2 <_printf_i+0x196>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	f023 0320 	bic.w	r3, r3, #32
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	e7b0      	b.n	8002e28 <_printf_i+0xfc>
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	f043 0320 	orr.w	r3, r3, #32
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	2378      	movs	r3, #120	; 0x78
 8002ed0:	4828      	ldr	r0, [pc, #160]	; (8002f74 <_printf_i+0x248>)
 8002ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ed6:	e7e3      	b.n	8002ea0 <_printf_i+0x174>
 8002ed8:	0659      	lsls	r1, r3, #25
 8002eda:	bf48      	it	mi
 8002edc:	b2b6      	uxthmi	r6, r6
 8002ede:	e7e6      	b.n	8002eae <_printf_i+0x182>
 8002ee0:	4615      	mov	r5, r2
 8002ee2:	e7bb      	b.n	8002e5c <_printf_i+0x130>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	6826      	ldr	r6, [r4, #0]
 8002ee8:	6961      	ldr	r1, [r4, #20]
 8002eea:	1d18      	adds	r0, r3, #4
 8002eec:	6028      	str	r0, [r5, #0]
 8002eee:	0635      	lsls	r5, r6, #24
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	d501      	bpl.n	8002ef8 <_printf_i+0x1cc>
 8002ef4:	6019      	str	r1, [r3, #0]
 8002ef6:	e002      	b.n	8002efe <_printf_i+0x1d2>
 8002ef8:	0670      	lsls	r0, r6, #25
 8002efa:	d5fb      	bpl.n	8002ef4 <_printf_i+0x1c8>
 8002efc:	8019      	strh	r1, [r3, #0]
 8002efe:	2300      	movs	r3, #0
 8002f00:	6123      	str	r3, [r4, #16]
 8002f02:	4615      	mov	r5, r2
 8002f04:	e7ba      	b.n	8002e7c <_printf_i+0x150>
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	1d1a      	adds	r2, r3, #4
 8002f0a:	602a      	str	r2, [r5, #0]
 8002f0c:	681d      	ldr	r5, [r3, #0]
 8002f0e:	6862      	ldr	r2, [r4, #4]
 8002f10:	2100      	movs	r1, #0
 8002f12:	4628      	mov	r0, r5
 8002f14:	f7fd f964 	bl	80001e0 <memchr>
 8002f18:	b108      	cbz	r0, 8002f1e <_printf_i+0x1f2>
 8002f1a:	1b40      	subs	r0, r0, r5
 8002f1c:	6060      	str	r0, [r4, #4]
 8002f1e:	6863      	ldr	r3, [r4, #4]
 8002f20:	6123      	str	r3, [r4, #16]
 8002f22:	2300      	movs	r3, #0
 8002f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f28:	e7a8      	b.n	8002e7c <_printf_i+0x150>
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	462a      	mov	r2, r5
 8002f2e:	4649      	mov	r1, r9
 8002f30:	4640      	mov	r0, r8
 8002f32:	47d0      	blx	sl
 8002f34:	3001      	adds	r0, #1
 8002f36:	d0ab      	beq.n	8002e90 <_printf_i+0x164>
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	079b      	lsls	r3, r3, #30
 8002f3c:	d413      	bmi.n	8002f66 <_printf_i+0x23a>
 8002f3e:	68e0      	ldr	r0, [r4, #12]
 8002f40:	9b03      	ldr	r3, [sp, #12]
 8002f42:	4298      	cmp	r0, r3
 8002f44:	bfb8      	it	lt
 8002f46:	4618      	movlt	r0, r3
 8002f48:	e7a4      	b.n	8002e94 <_printf_i+0x168>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4632      	mov	r2, r6
 8002f4e:	4649      	mov	r1, r9
 8002f50:	4640      	mov	r0, r8
 8002f52:	47d0      	blx	sl
 8002f54:	3001      	adds	r0, #1
 8002f56:	d09b      	beq.n	8002e90 <_printf_i+0x164>
 8002f58:	3501      	adds	r5, #1
 8002f5a:	68e3      	ldr	r3, [r4, #12]
 8002f5c:	9903      	ldr	r1, [sp, #12]
 8002f5e:	1a5b      	subs	r3, r3, r1
 8002f60:	42ab      	cmp	r3, r5
 8002f62:	dcf2      	bgt.n	8002f4a <_printf_i+0x21e>
 8002f64:	e7eb      	b.n	8002f3e <_printf_i+0x212>
 8002f66:	2500      	movs	r5, #0
 8002f68:	f104 0619 	add.w	r6, r4, #25
 8002f6c:	e7f5      	b.n	8002f5a <_printf_i+0x22e>
 8002f6e:	bf00      	nop
 8002f70:	08003381 	.word	0x08003381
 8002f74:	08003392 	.word	0x08003392

08002f78 <memcpy>:
 8002f78:	440a      	add	r2, r1
 8002f7a:	4291      	cmp	r1, r2
 8002f7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002f80:	d100      	bne.n	8002f84 <memcpy+0xc>
 8002f82:	4770      	bx	lr
 8002f84:	b510      	push	{r4, lr}
 8002f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f8e:	4291      	cmp	r1, r2
 8002f90:	d1f9      	bne.n	8002f86 <memcpy+0xe>
 8002f92:	bd10      	pop	{r4, pc}

08002f94 <memmove>:
 8002f94:	4288      	cmp	r0, r1
 8002f96:	b510      	push	{r4, lr}
 8002f98:	eb01 0402 	add.w	r4, r1, r2
 8002f9c:	d902      	bls.n	8002fa4 <memmove+0x10>
 8002f9e:	4284      	cmp	r4, r0
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	d807      	bhi.n	8002fb4 <memmove+0x20>
 8002fa4:	1e43      	subs	r3, r0, #1
 8002fa6:	42a1      	cmp	r1, r4
 8002fa8:	d008      	beq.n	8002fbc <memmove+0x28>
 8002faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fb2:	e7f8      	b.n	8002fa6 <memmove+0x12>
 8002fb4:	4402      	add	r2, r0
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	428a      	cmp	r2, r1
 8002fba:	d100      	bne.n	8002fbe <memmove+0x2a>
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fc6:	e7f7      	b.n	8002fb8 <memmove+0x24>

08002fc8 <_free_r>:
 8002fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fca:	2900      	cmp	r1, #0
 8002fcc:	d044      	beq.n	8003058 <_free_r+0x90>
 8002fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd2:	9001      	str	r0, [sp, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fda:	bfb8      	it	lt
 8002fdc:	18e4      	addlt	r4, r4, r3
 8002fde:	f000 f913 	bl	8003208 <__malloc_lock>
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <_free_r+0x94>)
 8002fe4:	9801      	ldr	r0, [sp, #4]
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	b933      	cbnz	r3, 8002ff8 <_free_r+0x30>
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	6014      	str	r4, [r2, #0]
 8002fee:	b003      	add	sp, #12
 8002ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ff4:	f000 b90e 	b.w	8003214 <__malloc_unlock>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d908      	bls.n	800300e <_free_r+0x46>
 8002ffc:	6825      	ldr	r5, [r4, #0]
 8002ffe:	1961      	adds	r1, r4, r5
 8003000:	428b      	cmp	r3, r1
 8003002:	bf01      	itttt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	1949      	addeq	r1, r1, r5
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	e7ed      	b.n	8002fea <_free_r+0x22>
 800300e:	461a      	mov	r2, r3
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b10b      	cbz	r3, 8003018 <_free_r+0x50>
 8003014:	42a3      	cmp	r3, r4
 8003016:	d9fa      	bls.n	800300e <_free_r+0x46>
 8003018:	6811      	ldr	r1, [r2, #0]
 800301a:	1855      	adds	r5, r2, r1
 800301c:	42a5      	cmp	r5, r4
 800301e:	d10b      	bne.n	8003038 <_free_r+0x70>
 8003020:	6824      	ldr	r4, [r4, #0]
 8003022:	4421      	add	r1, r4
 8003024:	1854      	adds	r4, r2, r1
 8003026:	42a3      	cmp	r3, r4
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	d1e0      	bne.n	8002fee <_free_r+0x26>
 800302c:	681c      	ldr	r4, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	6053      	str	r3, [r2, #4]
 8003032:	4421      	add	r1, r4
 8003034:	6011      	str	r1, [r2, #0]
 8003036:	e7da      	b.n	8002fee <_free_r+0x26>
 8003038:	d902      	bls.n	8003040 <_free_r+0x78>
 800303a:	230c      	movs	r3, #12
 800303c:	6003      	str	r3, [r0, #0]
 800303e:	e7d6      	b.n	8002fee <_free_r+0x26>
 8003040:	6825      	ldr	r5, [r4, #0]
 8003042:	1961      	adds	r1, r4, r5
 8003044:	428b      	cmp	r3, r1
 8003046:	bf04      	itt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	6063      	str	r3, [r4, #4]
 800304e:	bf04      	itt	eq
 8003050:	1949      	addeq	r1, r1, r5
 8003052:	6021      	streq	r1, [r4, #0]
 8003054:	6054      	str	r4, [r2, #4]
 8003056:	e7ca      	b.n	8002fee <_free_r+0x26>
 8003058:	b003      	add	sp, #12
 800305a:	bd30      	pop	{r4, r5, pc}
 800305c:	20000164 	.word	0x20000164

08003060 <sbrk_aligned>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	4e0e      	ldr	r6, [pc, #56]	; (800309c <sbrk_aligned+0x3c>)
 8003064:	460c      	mov	r4, r1
 8003066:	6831      	ldr	r1, [r6, #0]
 8003068:	4605      	mov	r5, r0
 800306a:	b911      	cbnz	r1, 8003072 <sbrk_aligned+0x12>
 800306c:	f000 f8bc 	bl	80031e8 <_sbrk_r>
 8003070:	6030      	str	r0, [r6, #0]
 8003072:	4621      	mov	r1, r4
 8003074:	4628      	mov	r0, r5
 8003076:	f000 f8b7 	bl	80031e8 <_sbrk_r>
 800307a:	1c43      	adds	r3, r0, #1
 800307c:	d00a      	beq.n	8003094 <sbrk_aligned+0x34>
 800307e:	1cc4      	adds	r4, r0, #3
 8003080:	f024 0403 	bic.w	r4, r4, #3
 8003084:	42a0      	cmp	r0, r4
 8003086:	d007      	beq.n	8003098 <sbrk_aligned+0x38>
 8003088:	1a21      	subs	r1, r4, r0
 800308a:	4628      	mov	r0, r5
 800308c:	f000 f8ac 	bl	80031e8 <_sbrk_r>
 8003090:	3001      	adds	r0, #1
 8003092:	d101      	bne.n	8003098 <sbrk_aligned+0x38>
 8003094:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003098:	4620      	mov	r0, r4
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	20000168 	.word	0x20000168

080030a0 <_malloc_r>:
 80030a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a4:	1ccd      	adds	r5, r1, #3
 80030a6:	f025 0503 	bic.w	r5, r5, #3
 80030aa:	3508      	adds	r5, #8
 80030ac:	2d0c      	cmp	r5, #12
 80030ae:	bf38      	it	cc
 80030b0:	250c      	movcc	r5, #12
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	4607      	mov	r7, r0
 80030b6:	db01      	blt.n	80030bc <_malloc_r+0x1c>
 80030b8:	42a9      	cmp	r1, r5
 80030ba:	d905      	bls.n	80030c8 <_malloc_r+0x28>
 80030bc:	230c      	movs	r3, #12
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	2600      	movs	r6, #0
 80030c2:	4630      	mov	r0, r6
 80030c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c8:	4e2e      	ldr	r6, [pc, #184]	; (8003184 <_malloc_r+0xe4>)
 80030ca:	f000 f89d 	bl	8003208 <__malloc_lock>
 80030ce:	6833      	ldr	r3, [r6, #0]
 80030d0:	461c      	mov	r4, r3
 80030d2:	bb34      	cbnz	r4, 8003122 <_malloc_r+0x82>
 80030d4:	4629      	mov	r1, r5
 80030d6:	4638      	mov	r0, r7
 80030d8:	f7ff ffc2 	bl	8003060 <sbrk_aligned>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	4604      	mov	r4, r0
 80030e0:	d14d      	bne.n	800317e <_malloc_r+0xde>
 80030e2:	6834      	ldr	r4, [r6, #0]
 80030e4:	4626      	mov	r6, r4
 80030e6:	2e00      	cmp	r6, #0
 80030e8:	d140      	bne.n	800316c <_malloc_r+0xcc>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	4631      	mov	r1, r6
 80030ee:	4638      	mov	r0, r7
 80030f0:	eb04 0803 	add.w	r8, r4, r3
 80030f4:	f000 f878 	bl	80031e8 <_sbrk_r>
 80030f8:	4580      	cmp	r8, r0
 80030fa:	d13a      	bne.n	8003172 <_malloc_r+0xd2>
 80030fc:	6821      	ldr	r1, [r4, #0]
 80030fe:	3503      	adds	r5, #3
 8003100:	1a6d      	subs	r5, r5, r1
 8003102:	f025 0503 	bic.w	r5, r5, #3
 8003106:	3508      	adds	r5, #8
 8003108:	2d0c      	cmp	r5, #12
 800310a:	bf38      	it	cc
 800310c:	250c      	movcc	r5, #12
 800310e:	4629      	mov	r1, r5
 8003110:	4638      	mov	r0, r7
 8003112:	f7ff ffa5 	bl	8003060 <sbrk_aligned>
 8003116:	3001      	adds	r0, #1
 8003118:	d02b      	beq.n	8003172 <_malloc_r+0xd2>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	442b      	add	r3, r5
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	e00e      	b.n	8003140 <_malloc_r+0xa0>
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	1b52      	subs	r2, r2, r5
 8003126:	d41e      	bmi.n	8003166 <_malloc_r+0xc6>
 8003128:	2a0b      	cmp	r2, #11
 800312a:	d916      	bls.n	800315a <_malloc_r+0xba>
 800312c:	1961      	adds	r1, r4, r5
 800312e:	42a3      	cmp	r3, r4
 8003130:	6025      	str	r5, [r4, #0]
 8003132:	bf18      	it	ne
 8003134:	6059      	strne	r1, [r3, #4]
 8003136:	6863      	ldr	r3, [r4, #4]
 8003138:	bf08      	it	eq
 800313a:	6031      	streq	r1, [r6, #0]
 800313c:	5162      	str	r2, [r4, r5]
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	4638      	mov	r0, r7
 8003142:	f104 060b 	add.w	r6, r4, #11
 8003146:	f000 f865 	bl	8003214 <__malloc_unlock>
 800314a:	f026 0607 	bic.w	r6, r6, #7
 800314e:	1d23      	adds	r3, r4, #4
 8003150:	1af2      	subs	r2, r6, r3
 8003152:	d0b6      	beq.n	80030c2 <_malloc_r+0x22>
 8003154:	1b9b      	subs	r3, r3, r6
 8003156:	50a3      	str	r3, [r4, r2]
 8003158:	e7b3      	b.n	80030c2 <_malloc_r+0x22>
 800315a:	6862      	ldr	r2, [r4, #4]
 800315c:	42a3      	cmp	r3, r4
 800315e:	bf0c      	ite	eq
 8003160:	6032      	streq	r2, [r6, #0]
 8003162:	605a      	strne	r2, [r3, #4]
 8003164:	e7ec      	b.n	8003140 <_malloc_r+0xa0>
 8003166:	4623      	mov	r3, r4
 8003168:	6864      	ldr	r4, [r4, #4]
 800316a:	e7b2      	b.n	80030d2 <_malloc_r+0x32>
 800316c:	4634      	mov	r4, r6
 800316e:	6876      	ldr	r6, [r6, #4]
 8003170:	e7b9      	b.n	80030e6 <_malloc_r+0x46>
 8003172:	230c      	movs	r3, #12
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4638      	mov	r0, r7
 8003178:	f000 f84c 	bl	8003214 <__malloc_unlock>
 800317c:	e7a1      	b.n	80030c2 <_malloc_r+0x22>
 800317e:	6025      	str	r5, [r4, #0]
 8003180:	e7de      	b.n	8003140 <_malloc_r+0xa0>
 8003182:	bf00      	nop
 8003184:	20000164 	.word	0x20000164

08003188 <_realloc_r>:
 8003188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318c:	4680      	mov	r8, r0
 800318e:	4614      	mov	r4, r2
 8003190:	460e      	mov	r6, r1
 8003192:	b921      	cbnz	r1, 800319e <_realloc_r+0x16>
 8003194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003198:	4611      	mov	r1, r2
 800319a:	f7ff bf81 	b.w	80030a0 <_malloc_r>
 800319e:	b92a      	cbnz	r2, 80031ac <_realloc_r+0x24>
 80031a0:	f7ff ff12 	bl	8002fc8 <_free_r>
 80031a4:	4625      	mov	r5, r4
 80031a6:	4628      	mov	r0, r5
 80031a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031ac:	f000 f838 	bl	8003220 <_malloc_usable_size_r>
 80031b0:	4284      	cmp	r4, r0
 80031b2:	4607      	mov	r7, r0
 80031b4:	d802      	bhi.n	80031bc <_realloc_r+0x34>
 80031b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031ba:	d812      	bhi.n	80031e2 <_realloc_r+0x5a>
 80031bc:	4621      	mov	r1, r4
 80031be:	4640      	mov	r0, r8
 80031c0:	f7ff ff6e 	bl	80030a0 <_malloc_r>
 80031c4:	4605      	mov	r5, r0
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d0ed      	beq.n	80031a6 <_realloc_r+0x1e>
 80031ca:	42bc      	cmp	r4, r7
 80031cc:	4622      	mov	r2, r4
 80031ce:	4631      	mov	r1, r6
 80031d0:	bf28      	it	cs
 80031d2:	463a      	movcs	r2, r7
 80031d4:	f7ff fed0 	bl	8002f78 <memcpy>
 80031d8:	4631      	mov	r1, r6
 80031da:	4640      	mov	r0, r8
 80031dc:	f7ff fef4 	bl	8002fc8 <_free_r>
 80031e0:	e7e1      	b.n	80031a6 <_realloc_r+0x1e>
 80031e2:	4635      	mov	r5, r6
 80031e4:	e7df      	b.n	80031a6 <_realloc_r+0x1e>
	...

080031e8 <_sbrk_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	4d06      	ldr	r5, [pc, #24]	; (8003204 <_sbrk_r+0x1c>)
 80031ec:	2300      	movs	r3, #0
 80031ee:	4604      	mov	r4, r0
 80031f0:	4608      	mov	r0, r1
 80031f2:	602b      	str	r3, [r5, #0]
 80031f4:	f7fd fc6a 	bl	8000acc <_sbrk>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_sbrk_r+0x1a>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_sbrk_r+0x1a>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	2000016c 	.word	0x2000016c

08003208 <__malloc_lock>:
 8003208:	4801      	ldr	r0, [pc, #4]	; (8003210 <__malloc_lock+0x8>)
 800320a:	f000 b811 	b.w	8003230 <__retarget_lock_acquire_recursive>
 800320e:	bf00      	nop
 8003210:	20000170 	.word	0x20000170

08003214 <__malloc_unlock>:
 8003214:	4801      	ldr	r0, [pc, #4]	; (800321c <__malloc_unlock+0x8>)
 8003216:	f000 b80c 	b.w	8003232 <__retarget_lock_release_recursive>
 800321a:	bf00      	nop
 800321c:	20000170 	.word	0x20000170

08003220 <_malloc_usable_size_r>:
 8003220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003224:	1f18      	subs	r0, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfbc      	itt	lt
 800322a:	580b      	ldrlt	r3, [r1, r0]
 800322c:	18c0      	addlt	r0, r0, r3
 800322e:	4770      	bx	lr

08003230 <__retarget_lock_acquire_recursive>:
 8003230:	4770      	bx	lr

08003232 <__retarget_lock_release_recursive>:
 8003232:	4770      	bx	lr

08003234 <_init>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	bf00      	nop
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

08003240 <_fini>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr
