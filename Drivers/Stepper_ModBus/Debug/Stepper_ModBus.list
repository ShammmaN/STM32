
Stepper_ModBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e8  080034e8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034f0  080034f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080034f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000014  0800350c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  0800350c  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011930  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002941  00000000  00000000  00031974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  000342b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00035050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce3  00000000  00000000  00035ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013869  00000000  00000000  0004c9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088055  00000000  00000000  00060234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e0  00000000  00000000  000e82dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080034b8 	.word	0x080034b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080034b8 	.word	0x080034b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	6039      	str	r1, [r7, #0]
 80004da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	db0a      	blt.n	80004fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	490c      	ldr	r1, [pc, #48]	; (800051c <__NVIC_SetPriority+0x4c>)
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	0112      	lsls	r2, r2, #4
 80004f0:	b2d2      	uxtb	r2, r2
 80004f2:	440b      	add	r3, r1
 80004f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004f8:	e00a      	b.n	8000510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4908      	ldr	r1, [pc, #32]	; (8000520 <__NVIC_SetPriority+0x50>)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	f003 030f 	and.w	r3, r3, #15
 8000506:	3b04      	subs	r3, #4
 8000508:	0112      	lsls	r2, r2, #4
 800050a:	b2d2      	uxtb	r2, r2
 800050c:	440b      	add	r3, r1
 800050e:	761a      	strb	r2, [r3, #24]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	e000e100 	.word	0xe000e100
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3b01      	subs	r3, #1
 8000530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000534:	d301      	bcc.n	800053a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000536:	2301      	movs	r3, #1
 8000538:	e00f      	b.n	800055a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <SysTick_Config+0x40>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3b01      	subs	r3, #1
 8000540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000542:	210f      	movs	r1, #15
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f7ff ffc2 	bl	80004d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SysTick_Config+0x40>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <SysTick_Config+0x40>)
 8000554:	2207      	movs	r2, #7
 8000556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	e000e010 	.word	0xe000e010

08000568 <Delay_Init>:


#include "Delay.h"


void Delay_Init(uint32_t divider){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
if (SysTick_Config(SystemCoreClock / divider))
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <Delay_Init+0x28>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffd2 	bl	8000524 <SysTick_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d000      	beq.n	8000588 <Delay_Init+0x20>
	{
		while (1); //W przypadku błędu program zawiesi się w pętli nieskończonej
 8000586:	e7fe      	b.n	8000586 <Delay_Init+0x1e>
	}
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000008 	.word	0x20000008

08000594 <TimingDelay_Decrement>:

  while(TimingDelay != 0);
}

void TimingDelay_Decrement(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <TimingDelay_Decrement+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d004      	beq.n	80005aa <TimingDelay_Decrement+0x16>
  {
    TimingDelay--;
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <TimingDelay_Decrement+0x20>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <TimingDelay_Decrement+0x20>)
 80005a8:	6013      	str	r3, [r2, #0]
  }
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	20000030 	.word	0x20000030

080005b8 <ModBus>:
 *
 *
 *
 */

void ModBus(ModBUS_Struct *ModBus, uint8_t* ModBusData){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]

	if(ModBusData[0] == Device_Address){
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d140      	bne.n	800064c <ModBus+0x94>
		ModBus->Slave_Addr = Device_Address;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
		ModBus->Command = ModBusData[1];
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	785a      	ldrb	r2, [r3, #1]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	705a      	strb	r2, [r3, #1]
		ModBus->Control = ModBusData[2];
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	789a      	ldrb	r2, [r3, #2]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	70da      	strb	r2, [r3, #3]
		ModBus->Data = ModBusData[3];
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	78da      	ldrb	r2, [r3, #3]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	709a      	strb	r2, [r3, #2]
		ModBus->LF = ModBusData[4];
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	791a      	ldrb	r2, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	715a      	strb	r2, [r3, #5]
		ModBus->CR = ModBusData[5];
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	795a      	ldrb	r2, [r3, #5]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	711a      	strb	r2, [r3, #4]


		switch(ModBus->Command){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	2b10      	cmp	r3, #16
 8000600:	d827      	bhi.n	8000652 <ModBus+0x9a>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <ModBus+0x50>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000651 	.word	0x08000651
 800060c:	08000651 	.word	0x08000651
 8000610:	08000651 	.word	0x08000651
 8000614:	08000651 	.word	0x08000651
 8000618:	08000653 	.word	0x08000653
 800061c:	08000653 	.word	0x08000653
 8000620:	08000653 	.word	0x08000653
 8000624:	08000653 	.word	0x08000653
 8000628:	08000653 	.word	0x08000653
 800062c:	08000653 	.word	0x08000653
 8000630:	08000653 	.word	0x08000653
 8000634:	08000653 	.word	0x08000653
 8000638:	08000653 	.word	0x08000653
 800063c:	08000653 	.word	0x08000653
 8000640:	08000653 	.word	0x08000653
 8000644:	08000651 	.word	0x08000651
 8000648:	08000651 	.word	0x08000651
		case 0x11:
			break;

		}

	}
 800064c:	bf00      	nop
 800064e:	e000      	b.n	8000652 <ModBus+0x9a>
			break;
 8000650:	bf00      	nop





}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
 800067a:	4b61      	ldr	r3, [pc, #388]	; (8000800 <MX_GPIO_Init+0x1a0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a60      	ldr	r2, [pc, #384]	; (8000800 <MX_GPIO_Init+0x1a0>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b5e      	ldr	r3, [pc, #376]	; (8000800 <MX_GPIO_Init+0x1a0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x1a0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x1a0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b53      	ldr	r3, [pc, #332]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a52      	ldr	r2, [pc, #328]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b50      	ldr	r3, [pc, #320]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b4c      	ldr	r3, [pc, #304]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a4b      	ldr	r2, [pc, #300]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b49      	ldr	r3, [pc, #292]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b45      	ldr	r3, [pc, #276]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a44      	ldr	r2, [pc, #272]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <MX_GPIO_Init+0x1a0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_GPIO_Init+0x1a0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <MX_GPIO_Init+0x1a0>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_GPIO_Init+0x1a0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2108      	movs	r1, #8
 8000722:	4838      	ldr	r0, [pc, #224]	; (8000804 <MX_GPIO_Init+0x1a4>)
 8000724:	f000 ff2c 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2101      	movs	r1, #1
 800072c:	4836      	ldr	r0, [pc, #216]	; (8000808 <MX_GPIO_Init+0x1a8>)
 800072e:	f000 ff27 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000732:	2200      	movs	r2, #0
 8000734:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000738:	4834      	ldr	r0, [pc, #208]	; (800080c <MX_GPIO_Init+0x1ac>)
 800073a:	f000 ff21 	bl	8001580 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800073e:	2304      	movs	r3, #4
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <MX_GPIO_Init+0x1a4>)
 8000752:	f000 fd91 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4825      	ldr	r0, [pc, #148]	; (8000804 <MX_GPIO_Init+0x1a4>)
 800076e:	f000 fd83 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000776:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	481f      	ldr	r0, [pc, #124]	; (8000804 <MX_GPIO_Init+0x1a4>)
 8000788:	f000 fd76 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4819      	ldr	r0, [pc, #100]	; (8000808 <MX_GPIO_Init+0x1a8>)
 80007a4:	f000 fd68 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_GPIO_Init+0x1b0>)
 80007be:	f000 fd5b 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007c6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0x1ac>)
 80007dc:	f000 fd4c 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_GPIO_Init+0x1ac>)
 80007f4:	f000 fd40 	bl	8001278 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3730      	adds	r7, #48	; 0x30
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40021000 	.word	0x40021000
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40020000 	.word	0x40020000

08000814 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C1_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_I2C1_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C1_Init+0x50>)
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_I2C1_Init+0x58>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_I2C1_Init+0x50>)
 8000832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_I2C1_Init+0x50>)
 8000852:	f000 feaf 	bl	80015b4 <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 fa2e 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000034 	.word	0x20000034
 8000868:	40005400 	.word	0x40005400
 800086c:	000186a0 	.word	0x000186a0

08000870 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <HAL_I2C_MspInit+0x84>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12c      	bne.n	80008ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_I2C_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_I2C_MspInit+0x88>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_I2C_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b4:	2312      	movs	r3, #18
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008c0:	2304      	movs	r3, #4
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <HAL_I2C_MspInit+0x8c>)
 80008cc:	f000 fcd4 	bl	8001278 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_I2C_MspInit+0x88>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_I2C_MspInit+0x88>)
 80008da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_I2C_MspInit+0x88>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40005400 	.word	0x40005400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400

08000900 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2S2_Init+0x50>)
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <MX_I2S2_Init+0x54>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2S2_Init+0x50>)
 800090c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000910:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2S2_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_I2S2_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_I2S2_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_I2S2_Init+0x50>)
 8000926:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <MX_I2S2_Init+0x58>)
 8000928:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2S2_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_I2S2_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2S2_Init+0x50>)
 8000938:	2201      	movs	r2, #1
 800093a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_I2S2_Init+0x50>)
 800093e:	f000 ff7d 	bl	800183c <HAL_I2S_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000948:	f000 f9b8 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000088 	.word	0x20000088
 8000954:	40003800 	.word	0x40003800
 8000958:	00017700 	.word	0x00017700

0800095c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <MX_I2S3_Init+0x58>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_I2S3_Init+0x54>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000984:	4a0c      	ldr	r2, [pc, #48]	; (80009b8 <MX_I2S3_Init+0x5c>)
 8000986:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_I2S3_Init+0x54>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_I2S3_Init+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2S3_Init+0x54>)
 800099c:	f000 ff4e 	bl	800183c <HAL_I2S_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009a6:	f000 f989 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000d0 	.word	0x200000d0
 80009b4:	40003c00 	.word	0x40003c00
 80009b8:	00017700 	.word	0x00017700

080009bc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a59      	ldr	r2, [pc, #356]	; (8000b40 <HAL_I2S_MspInit+0x184>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d15b      	bne.n	8000a96 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
 80009e2:	4b58      	ldr	r3, [pc, #352]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a57      	ldr	r2, [pc, #348]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b55      	ldr	r3, [pc, #340]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	623b      	str	r3, [r7, #32]
 80009f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a32:	2304      	movs	r3, #4
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a42:	2306      	movs	r3, #6
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	483e      	ldr	r0, [pc, #248]	; (8000b48 <HAL_I2S_MspInit+0x18c>)
 8000a4e:	f000 fc13 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a62:	2305      	movs	r3, #5
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4836      	ldr	r0, [pc, #216]	; (8000b48 <HAL_I2S_MspInit+0x18c>)
 8000a6e:	f000 fc03 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a84:	2305      	movs	r3, #5
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	482f      	ldr	r0, [pc, #188]	; (8000b4c <HAL_I2S_MspInit+0x190>)
 8000a90:	f000 fbf2 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a94:	e04f      	b.n	8000b36 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_I2S_MspInit+0x194>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d14a      	bne.n	8000b36 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_I2S_MspInit+0x188>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000af4:	2310      	movs	r3, #16
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b04:	2306      	movs	r3, #6
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <HAL_I2S_MspInit+0x198>)
 8000b10:	f000 fbb2 	bl	8001278 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b26:	2306      	movs	r3, #6
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_I2S_MspInit+0x18c>)
 8000b32:	f000 fba1 	bl	8001278 <HAL_GPIO_Init>
}
 8000b36:	bf00      	nop
 8000b38:	3738      	adds	r7, #56	; 0x38
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40003800 	.word	0x40003800
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40003c00 	.word	0x40003c00
 8000b54:	40020000 	.word	0x40020000

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f000 fa34 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f824 	bl	8000bac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f88a 	bl	8000c7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f7ff fd7a 	bl	8000660 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b6c:	f7ff fe52 	bl	8000814 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000b70:	f7ff fec6 	bl	8000900 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000b74:	f7ff fef2 	bl	800095c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b78:	f000 f8a6 	bl	8000cc8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b7c:	f000 f988 	bl	8000e90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Delay_Init(1000);
 8000b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b84:	f7ff fcf0 	bl	8000568 <Delay_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart2, ModBusData, 6, 50);
 8000b88:	2332      	movs	r3, #50	; 0x32
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	4904      	ldr	r1, [pc, #16]	; (8000ba0 <main+0x48>)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <main+0x4c>)
 8000b90:	f002 f98e 	bl	8002eb0 <HAL_UART_Receive>
	  ModBus(&MyModBus,  ModBusData);
 8000b94:	4902      	ldr	r1, [pc, #8]	; (8000ba0 <main+0x48>)
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <main+0x50>)
 8000b98:	f7ff fd0e 	bl	80005b8 <ModBus>
	  HAL_UART_Receive(&huart2, ModBusData, 6, 50);
 8000b9c:	e7f4      	b.n	8000b88 <main+0x30>
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	200001c8 	.word	0x200001c8
 8000ba8:	20000118 	.word	0x20000118

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	; 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fc74 	bl	80034a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <SystemClock_Config+0xc8>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <SystemClock_Config+0xc8>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <SystemClock_Config+0xc8>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <SystemClock_Config+0xcc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <SystemClock_Config+0xcc>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <SystemClock_Config+0xcc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2302      	movs	r3, #2
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c20:	2348      	movs	r3, #72	; 0x48
 8000c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 faa3 	bl	800217c <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c3c:	f000 f83e 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c40:	230f      	movs	r3, #15
 8000c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	2302      	movs	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fd05 	bl	800266c <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c68:	f000 f828 	bl	8000cbc <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3750      	adds	r7, #80	; 0x50
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c92:	2301      	movs	r3, #1
 8000c94:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000c96:	23c8      	movs	r3, #200	; 0xc8
 8000c98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fedd 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000cb0:	f000 f804 	bl	8000cbc <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <MX_SPI1_Init+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d14:	220a      	movs	r2, #10
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_SPI1_Init+0x64>)
 8000d1a:	f001 fff3 	bl	8002d04 <HAL_SPI_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d24:	f7ff ffca 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000170 	.word	0x20000170
 8000d30:	40013000 	.word	0x40013000

08000d34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 fa65 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e02:	2007      	movs	r0, #7
 8000e04:	f000 fa04 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f904 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  TimingDelay_Decrement();
 8000e64:	f7ff fb96 	bl	8000594 <TimingDelay_Decrement>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec8:	f001 ffa5 	bl	8002e16 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f7ff fef3 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001c8 	.word	0x200001c8
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0x8c>)
 8000f5a:	f000 f98d 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f90:	4c0b      	ldr	r4, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f9e:	f7ff ff65 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f002 fa5d 	bl	8003460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fdd7 	bl	8000b58 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fb8:	080034f8 	.word	0x080034f8
  ldr r2, =_sbss
 8000fbc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fc0:	20000210 	.word	0x20000210

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f90d 	bl	8001210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fee2 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f917 	bl	800125e <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f8ed 	bl	8001226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000008 	.word	0x20000008
 8001064:	20000010 	.word	0x20000010
 8001068:	2000000c 	.word	0x2000000c

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000010 	.word	0x20000010
 8001090:	2000020c 	.word	0x2000020c

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000020c 	.word	0x2000020c

080010ac <__NVIC_SetPriorityGrouping>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_SetPriority>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <SysTick_Config>:
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011dc:	d301      	bcc.n	80011e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011de:	2301      	movs	r3, #1
 80011e0:	e00f      	b.n	8001202 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <SysTick_Config+0x40>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ea:	210f      	movs	r1, #15
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f7ff ff8e 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x40>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff47 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff5c 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff8e 	bl	8001164 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffb0 	bl	80011cc <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e159      	b.n	8001548 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 8148 	bne.w	8001542 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d005      	beq.n	80012ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d017      	beq.n	8001368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d123      	bne.n	80013bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	69b9      	ldr	r1, [r7, #24]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a2 	beq.w	8001542 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b57      	ldr	r3, [pc, #348]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141a:	4a52      	ldr	r2, [pc, #328]	; (8001564 <HAL_GPIO_Init+0x2ec>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a49      	ldr	r2, [pc, #292]	; (8001568 <HAL_GPIO_Init+0x2f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_GPIO_Init+0x202>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a48      	ldr	r2, [pc, #288]	; (800156c <HAL_GPIO_Init+0x2f4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x1fe>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a47      	ldr	r2, [pc, #284]	; (8001570 <HAL_GPIO_Init+0x2f8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x1fa>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a46      	ldr	r2, [pc, #280]	; (8001574 <HAL_GPIO_Init+0x2fc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x1f6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a45      	ldr	r2, [pc, #276]	; (8001578 <HAL_GPIO_Init+0x300>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x1f2>
 8001466:	2304      	movs	r3, #4
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x204>
 800146a:	2307      	movs	r3, #7
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x204>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x204>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x204>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x204>
 800147a:	2300      	movs	r3, #0
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148c:	4935      	ldr	r1, [pc, #212]	; (8001564 <HAL_GPIO_Init+0x2ec>)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_GPIO_Init+0x304>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014be:	4a2f      	ldr	r2, [pc, #188]	; (800157c <HAL_GPIO_Init+0x304>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_GPIO_Init+0x304>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e8:	4a24      	ldr	r2, [pc, #144]	; (800157c <HAL_GPIO_Init+0x304>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_GPIO_Init+0x304>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a1a      	ldr	r2, [pc, #104]	; (800157c <HAL_GPIO_Init+0x304>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_GPIO_Init+0x304>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_GPIO_Init+0x304>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	f67f aea2 	bls.w	8001294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e12b      	b.n	800181e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff f948 	bl	8000870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	; 0x24
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001618:	f001 f9fc 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a81      	ldr	r2, [pc, #516]	; (8001828 <HAL_I2C_Init+0x274>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d807      	bhi.n	8001638 <HAL_I2C_Init+0x84>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a80      	ldr	r2, [pc, #512]	; (800182c <HAL_I2C_Init+0x278>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e006      	b.n	8001646 <HAL_I2C_Init+0x92>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a7d      	ldr	r2, [pc, #500]	; (8001830 <HAL_I2C_Init+0x27c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0e7      	b.n	800181e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a78      	ldr	r2, [pc, #480]	; (8001834 <HAL_I2C_Init+0x280>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_I2C_Init+0x274>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d802      	bhi.n	8001688 <HAL_I2C_Init+0xd4>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	e009      	b.n	800169c <HAL_I2C_Init+0xe8>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a69      	ldr	r2, [pc, #420]	; (8001838 <HAL_I2C_Init+0x284>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	3301      	adds	r3, #1
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	495c      	ldr	r1, [pc, #368]	; (8001828 <HAL_I2C_Init+0x274>)
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d819      	bhi.n	80016f0 <HAL_I2C_Init+0x13c>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e59      	subs	r1, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016d0:	400b      	ands	r3, r1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00a      	beq.n	80016ec <HAL_I2C_Init+0x138>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e59      	subs	r1, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ea:	e051      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 80016ec:	2304      	movs	r3, #4
 80016ee:	e04f      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d111      	bne.n	800171c <HAL_I2C_Init+0x168>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e58      	subs	r0, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	e012      	b.n	8001742 <HAL_I2C_Init+0x18e>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Init+0x196>
 8001746:	2301      	movs	r3, #1
 8001748:	e022      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10e      	bne.n	8001770 <HAL_I2C_Init+0x1bc>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1e58      	subs	r0, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	fbb0 f3f3 	udiv	r3, r0, r3
 8001764:	3301      	adds	r3, #1
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176e:	e00f      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e58      	subs	r0, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	0099      	lsls	r1, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	fbb0 f3f3 	udiv	r3, r0, r3
 8001786:	3301      	adds	r3, #1
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	6809      	ldr	r1, [r1, #0]
 8001794:	4313      	orrs	r3, r2
 8001796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6911      	ldr	r1, [r2, #16]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	000186a0 	.word	0x000186a0
 800182c:	001e847f 	.word	0x001e847f
 8001830:	003d08ff 	.word	0x003d08ff
 8001834:	431bde83 	.word	0x431bde83
 8001838:	10624dd3 	.word	0x10624dd3

0800183c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e128      	b.n	8001aa0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <HAL_I2S_Init+0x26c>)
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff f8a7 	bl	80009bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001884:	f023 030f 	bic.w	r3, r3, #15
 8001888:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2202      	movs	r2, #2
 8001890:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d060      	beq.n	800195c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018a2:	2310      	movs	r3, #16
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e001      	b.n	80018ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018a8:	2320      	movs	r3, #32
 80018aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b20      	cmp	r3, #32
 80018b2:	d802      	bhi.n	80018ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f001 f9c2 	bl	8002c44 <HAL_RCCEx_GetPeriphCLKFreq>
 80018c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ca:	d125      	bne.n	8001918 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d010      	beq.n	80018f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	fbb2 f2f3 	udiv	r2, r2, r3
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	3305      	adds	r3, #5
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e01f      	b.n	8001936 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	3305      	adds	r3, #5
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	e00e      	b.n	8001936 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	3305      	adds	r3, #5
 8001934:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_I2S_Init+0x270>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	e003      	b.n	8001964 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800195c:	2302      	movs	r3, #2
 800195e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d902      	bls.n	8001970 <HAL_I2S_Init+0x134>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2bff      	cmp	r3, #255	; 0xff
 800196e:	d907      	bls.n	8001980 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e08f      	b.n	8001aa0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	ea42 0103 	orr.w	r1, r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	430a      	orrs	r2, r1
 8001992:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800199e:	f023 030f 	bic.w	r3, r3, #15
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6851      	ldr	r1, [r2, #4]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6892      	ldr	r2, [r2, #8]
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68d2      	ldr	r2, [r2, #12]
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6992      	ldr	r2, [r2, #24]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d161      	bne.n	8001a90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_I2S_Init+0x274>)
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a37      	ldr	r2, [pc, #220]	; (8001ab4 <HAL_I2S_Init+0x278>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_I2S_Init+0x1a4>
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_I2S_Init+0x27c>)
 80019de:	e001      	b.n	80019e4 <HAL_I2S_Init+0x1a8>
 80019e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4932      	ldr	r1, [pc, #200]	; (8001ab4 <HAL_I2S_Init+0x278>)
 80019ec:	428a      	cmp	r2, r1
 80019ee:	d101      	bne.n	80019f4 <HAL_I2S_Init+0x1b8>
 80019f0:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <HAL_I2S_Init+0x27c>)
 80019f2:	e001      	b.n	80019f8 <HAL_I2S_Init+0x1bc>
 80019f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80019f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019fc:	f023 030f 	bic.w	r3, r3, #15
 8001a00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <HAL_I2S_Init+0x278>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2S_Init+0x1d4>
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_I2S_Init+0x27c>)
 8001a0e:	e001      	b.n	8001a14 <HAL_I2S_Init+0x1d8>
 8001a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a14:	2202      	movs	r2, #2
 8001a16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_I2S_Init+0x278>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_I2S_Init+0x1ea>
 8001a22:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_I2S_Init+0x27c>)
 8001a24:	e001      	b.n	8001a2a <HAL_I2S_Init+0x1ee>
 8001a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a36:	d003      	beq.n	8001a40 <HAL_I2S_Init+0x204>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	e001      	b.n	8001a4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_I2S_Init+0x278>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_I2S_Init+0x24c>
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_I2S_Init+0x27c>)
 8001a86:	e001      	b.n	8001a8c <HAL_I2S_Init+0x250>
 8001a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a8c:	897a      	ldrh	r2, [r7, #10]
 8001a8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08001bb3 	.word	0x08001bb3
 8001aac:	cccccccd 	.word	0xcccccccd
 8001ab0:	08001cc9 	.word	0x08001cc9
 8001ab4:	40003800 	.word	0x40003800
 8001ab8:	40003400 	.word	0x40003400

08001abc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	881a      	ldrh	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	1c9a      	adds	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10e      	bne.n	8001b4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffb8 	bl	8001abc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	b292      	uxth	r2, r2
 8001b68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	1c9a      	adds	r2, r3, #2
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10e      	bne.n	8001baa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff93 	bl	8001ad0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d13a      	bne.n	8001c44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d109      	bne.n	8001bec <I2S_IRQHandler+0x3a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d102      	bne.n	8001bec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffb4 	bl	8001b54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d126      	bne.n	8001c44 <I2S_IRQHandler+0x92>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d11f      	bne.n	8001c44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff50 	bl	8001ae4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d136      	bne.n	8001cbe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d109      	bne.n	8001c6e <I2S_IRQHandler+0xbc>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	2b80      	cmp	r3, #128	; 0x80
 8001c66:	d102      	bne.n	8001c6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff45 	bl	8001af8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d122      	bne.n	8001cbe <I2S_IRQHandler+0x10c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d11b      	bne.n	8001cbe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff13 	bl	8001ae4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4aa2      	ldr	r2, [pc, #648]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ce2:	4ba2      	ldr	r3, [pc, #648]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ce4:	e001      	b.n	8001cea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a9b      	ldr	r2, [pc, #620]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d00:	4b9a      	ldr	r3, [pc, #616]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d02:	e001      	b.n	8001d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d14:	d004      	beq.n	8001d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8099 	bne.w	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d107      	bne.n	8001d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f925 	bl	8001f84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f9c8 	bl	80020e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	2b40      	cmp	r3, #64	; 0x40
 8001d5c:	d13a      	bne.n	8001dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d035      	beq.n	8001dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a7e      	ldr	r2, [pc, #504]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001d72:	4b7e      	ldr	r3, [pc, #504]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d74:	e001      	b.n	8001d7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4979      	ldr	r1, [pc, #484]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d82:	428b      	cmp	r3, r1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d86:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d88:	e001      	b.n	8001d8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001da2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f043 0202 	orr.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff fe88 	bl	8001ae4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	f040 80be 	bne.w	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80b8 	beq.w	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dfa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a59      	ldr	r2, [pc, #356]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e06:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e08:	e001      	b.n	8001e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4954      	ldr	r1, [pc, #336]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e16:	428b      	cmp	r3, r1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e1c:	e001      	b.n	8001e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fe4a 	bl	8001ae4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e50:	e084      	b.n	8001f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d107      	bne.n	8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8be 	bl	8001fe8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d107      	bne.n	8001e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8fd 	bl	8002080 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d12f      	bne.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d02a      	beq.n	8001ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ea8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eb6:	e001      	b.n	8001ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4929      	ldr	r1, [pc, #164]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001eca:	e001      	b.n	8001ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ed4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f043 0202 	orr.w	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fdfa 	bl	8001ae4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d131      	bne.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02c      	beq.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f10:	e001      	b.n	8001f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4912      	ldr	r1, [pc, #72]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f1e:	428b      	cmp	r3, r1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f24:	e001      	b.n	8001f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f3e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f043 0204 	orr.w	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdc5 	bl	8001ae4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f5a:	e000      	b.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f5c:	bf00      	nop
}
 8001f5e:	bf00      	nop
 8001f60:	3720      	adds	r7, #32
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40003800 	.word	0x40003800
 8001f6c:	40003400 	.word	0x40003400

08001f70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	1c99      	adds	r1, r3, #2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6251      	str	r1, [r2, #36]	; 0x24
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d113      	bne.n	8001fde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d106      	bne.n	8001fde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffc9 	bl	8001f70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c99      	adds	r1, r3, #2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6251      	str	r1, [r2, #36]	; 0x24
 8001ffa:	8819      	ldrh	r1, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <I2SEx_TxISR_I2SExt+0x90>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <I2SEx_TxISR_I2SExt+0x22>
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <I2SEx_TxISR_I2SExt+0x94>)
 8002008:	e001      	b.n	800200e <I2SEx_TxISR_I2SExt+0x26>
 800200a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800200e:	460a      	mov	r2, r1
 8002010:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <I2SEx_TxISR_I2SExt+0x90>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <I2SEx_TxISR_I2SExt+0x50>
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <I2SEx_TxISR_I2SExt+0x94>)
 8002036:	e001      	b.n	800203c <I2SEx_TxISR_I2SExt+0x54>
 8002038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	490d      	ldr	r1, [pc, #52]	; (8002078 <I2SEx_TxISR_I2SExt+0x90>)
 8002044:	428b      	cmp	r3, r1
 8002046:	d101      	bne.n	800204c <I2SEx_TxISR_I2SExt+0x64>
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <I2SEx_TxISR_I2SExt+0x94>)
 800204a:	e001      	b.n	8002050 <I2SEx_TxISR_I2SExt+0x68>
 800204c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002050:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002054:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff81 	bl	8001f70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40003800 	.word	0x40003800
 800207c:	40003400 	.word	0x40003400

08002080 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d8      	ldr	r0, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	1c99      	adds	r1, r3, #2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002098:	b282      	uxth	r2, r0
 800209a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d113      	bne.n	80020dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff4a 	bl	8001f70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a20      	ldr	r2, [pc, #128]	; (8002174 <I2SEx_RxISR_I2SExt+0x90>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <I2SEx_RxISR_I2SExt+0x16>
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <I2SEx_RxISR_I2SExt+0x94>)
 80020f8:	e001      	b.n	80020fe <I2SEx_RxISR_I2SExt+0x1a>
 80020fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020fe:	68d8      	ldr	r0, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	1c99      	adds	r1, r3, #2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	62d1      	str	r1, [r2, #44]	; 0x2c
 800210a:	b282      	uxth	r2, r0
 800210c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d121      	bne.n	800216a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <I2SEx_RxISR_I2SExt+0x90>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <I2SEx_RxISR_I2SExt+0x50>
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <I2SEx_RxISR_I2SExt+0x94>)
 8002132:	e001      	b.n	8002138 <I2SEx_RxISR_I2SExt+0x54>
 8002134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	490d      	ldr	r1, [pc, #52]	; (8002174 <I2SEx_RxISR_I2SExt+0x90>)
 8002140:	428b      	cmp	r3, r1
 8002142:	d101      	bne.n	8002148 <I2SEx_RxISR_I2SExt+0x64>
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <I2SEx_RxISR_I2SExt+0x94>)
 8002146:	e001      	b.n	800214c <I2SEx_RxISR_I2SExt+0x68>
 8002148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002150:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff03 	bl	8001f70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40003800 	.word	0x40003800
 8002178:	40003400 	.word	0x40003400

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e264      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219a:	4ba3      	ldr	r3, [pc, #652]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b9d      	ldr	r3, [pc, #628]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b99      	ldr	r3, [pc, #612]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e23f      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b91      	ldr	r3, [pc, #580]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a90      	ldr	r2, [pc, #576]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a8a      	ldr	r2, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a87      	ldr	r2, [pc, #540]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b84      	ldr	r3, [pc, #528]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a83      	ldr	r2, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a80      	ldr	r2, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe ff2e 	bl	8001094 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe ff2a 	bl	8001094 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e204      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7fe ff1a 	bl	8001094 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe ff16 	bl	8001094 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1f0      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b62      	ldr	r3, [pc, #392]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c4      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b56      	ldr	r3, [pc, #344]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4952      	ldr	r1, [pc, #328]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCC_OscConfig+0x2b0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fecf 	bl	8001094 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7fe fecb 	bl	8001094 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a5      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4940      	ldr	r1, [pc, #256]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x2b0>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe feae 	bl	8001094 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe feaa 	bl	8001094 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e184      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_OscConfig+0x2b4>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe fe8e 	bl	8001094 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe fe8a 	bl	8001094 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e164      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
 800239a:	e015      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x2b4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fe77 	bl	8001094 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe fe73 	bl	8001094 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e14d      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a0 	beq.w	8002516 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d121      	bne.n	8002456 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe fe39 	bl	8001094 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e011      	b.n	800244a <HAL_RCC_OscConfig+0x2ce>
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
 8002434:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7fe fe2c 	bl	8001094 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e106      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b85      	ldr	r3, [pc, #532]	; (8002660 <HAL_RCC_OscConfig+0x4e4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x2f0>
 800245e:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a80      	ldr	r2, [pc, #512]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	e01c      	b.n	80024a6 <HAL_RCC_OscConfig+0x32a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002474:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a77      	ldr	r2, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x32a>
 800248e:	4b75      	ldr	r3, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a74      	ldr	r2, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	4b72      	ldr	r3, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a71      	ldr	r2, [pc, #452]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7fe fdf1 	bl	8001094 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fded 	bl	8001094 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0c5      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCC_OscConfig+0x33a>
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7fe fddb 	bl	8001094 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe fdd7 	bl	8001094 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0af      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	4b5a      	ldr	r3, [pc, #360]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 809b 	beq.w	8002656 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d05c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d141      	bne.n	80025b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe fdab 	bl	8001094 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fda7 	bl	8001094 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e081      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	019b      	lsls	r3, r3, #6
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	4937      	ldr	r1, [pc, #220]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fd80 	bl	8001094 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fd7c 	bl	8001094 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e056      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x41c>
 80025b6:	e04e      	b.n	8002656 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fd69 	bl	8001094 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fd65 	bl	8001094 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e03f      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x44a>
 80025e4:	e037      	b.n	8002656 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e032      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_RCC_OscConfig+0x4e8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d028      	beq.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d121      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d11a      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002628:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800262a:	4293      	cmp	r3, r2
 800262c:	d111      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d107      	bne.n	8002652 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40007000 	.word	0x40007000
 8002664:	40023800 	.word	0x40023800
 8002668:	42470060 	.word	0x42470060

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0cc      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d90c      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d044      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e067      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4934      	ldr	r1, [pc, #208]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7fe fc9a 	bl	8001094 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe fc96 	bl	8001094 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fbfa 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023800 	.word	0x40023800
 800282c:	080034d0 	.word	0x080034d0
 8002830:	20000008 	.word	0x20000008
 8002834:	2000000c 	.word	0x2000000c

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	2300      	movs	r3, #0
 800284a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002850:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d00d      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x40>
 800285c:	2b08      	cmp	r3, #8
 800285e:	f200 80bd 	bhi.w	80029dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x34>
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x3a>
 800286a:	e0b7      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800286e:	60bb      	str	r3, [r7, #8]
       break;
 8002870:	e0b7      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002874:	60bb      	str	r3, [r7, #8]
      break;
 8002876:	e0b4      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002878:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002880:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04d      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	461a      	mov	r2, r3
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	ea02 0800 	and.w	r8, r2, r0
 80028a6:	ea03 0901 	and.w	r9, r3, r1
 80028aa:	4640      	mov	r0, r8
 80028ac:	4649      	mov	r1, r9
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	014b      	lsls	r3, r1, #5
 80028b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028bc:	0142      	lsls	r2, r0, #5
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	ebb0 0008 	subs.w	r0, r0, r8
 80028c6:	eb61 0109 	sbc.w	r1, r1, r9
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	018b      	lsls	r3, r1, #6
 80028d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028d8:	0182      	lsls	r2, r0, #6
 80028da:	1a12      	subs	r2, r2, r0
 80028dc:	eb63 0301 	sbc.w	r3, r3, r1
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	00d9      	lsls	r1, r3, #3
 80028ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ee:	00d0      	lsls	r0, r2, #3
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	eb12 0208 	adds.w	r2, r2, r8
 80028f8:	eb43 0309 	adc.w	r3, r3, r9
 80028fc:	f04f 0000 	mov.w	r0, #0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	0259      	lsls	r1, r3, #9
 8002906:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800290a:	0250      	lsls	r0, r2, #9
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	461a      	mov	r2, r3
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f7fd fc5c 	bl	80001d8 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e04a      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	099b      	lsrs	r3, r3, #6
 8002930:	461a      	mov	r2, r3
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	ea02 0400 	and.w	r4, r2, r0
 8002942:	ea03 0501 	and.w	r5, r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	014b      	lsls	r3, r1, #5
 8002954:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002958:	0142      	lsls	r2, r0, #5
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	1b00      	subs	r0, r0, r4
 8002960:	eb61 0105 	sbc.w	r1, r1, r5
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	018b      	lsls	r3, r1, #6
 800296e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002972:	0182      	lsls	r2, r0, #6
 8002974:	1a12      	subs	r2, r2, r0
 8002976:	eb63 0301 	sbc.w	r3, r3, r1
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	00d9      	lsls	r1, r3, #3
 8002984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002988:	00d0      	lsls	r0, r2, #3
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	1912      	adds	r2, r2, r4
 8002990:	eb45 0303 	adc.w	r3, r5, r3
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0299      	lsls	r1, r3, #10
 800299e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029a2:	0290      	lsls	r0, r2, #10
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f7fd fc10 	bl	80001d8 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	60bb      	str	r3, [r7, #8]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029de:	60bb      	str	r3, [r7, #8]
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	68bb      	ldr	r3, [r7, #8]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200

080029fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008

08002a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a18:	f7ff fff0 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0a9b      	lsrs	r3, r3, #10
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	080034e0 	.word	0x080034e0

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a40:	f7ff ffdc 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0b5b      	lsrs	r3, r3, #13
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4903      	ldr	r1, [pc, #12]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	080034e0 	.word	0x080034e0

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d038      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a92:	f7fe faff 	bl	8001094 <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a9a:	f7fe fafb 	bl	8001094 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0bd      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aac:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f0      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	071b      	lsls	r3, r3, #28
 8002aca:	495a      	ldr	r1, [pc, #360]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fadc 	bl	8001094 <HAL_GetTick>
 8002adc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ae0:	f7fe fad8 	bl	8001094 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e09a      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002af2:	4b50      	ldr	r3, [pc, #320]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8083 	beq.w	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4a47      	ldr	r2, [pc, #284]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1c:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe faae 	bl	8001094 <HAL_GetTick>
 8002b38:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b3c:	f7fe faaa 	bl	8001094 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e06c      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b4e:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b5a:	4b36      	ldr	r3, [pc, #216]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02f      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d028      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b78:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b88:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b8e:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d114      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fa78 	bl	8001094 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fa74 	bl	8001094 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e034      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bec:	4911      	ldr	r1, [pc, #68]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bfe:	6093      	str	r3, [r2, #8]
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0c:	4909      	ldr	r1, [pc, #36]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7d1a      	ldrb	r2, [r3, #20]
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c24:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	42470068 	.word	0x42470068
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	42470e40 	.word	0x42470e40
 8002c40:	424711e0 	.word	0x424711e0

08002c44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d140      	bne.n	8002ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d131      	bne.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002c7a:	617b      	str	r3, [r7, #20]
          break;
 8002c7c:	e031      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c8a:	d109      	bne.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c96:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ccc:	0f1b      	lsrs	r3, r3, #28
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
          break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
          break;
 8002ce0:	bf00      	nop
        }
      }
      break;
 8002ce2:	bf00      	nop
    }
  }
  return frequency;
 8002ce4:	697b      	ldr	r3, [r7, #20]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00bb8000 	.word	0x00bb8000
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	00f42400 	.word	0x00f42400

08002d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e07b      	b.n	8002e0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d26:	d009      	beq.n	8002d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
 8002d2e:	e005      	b.n	8002d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd ffec 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	ea42 0103 	orr.w	r1, r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0104 	and.w	r1, r3, #4
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f003 0210 	and.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e03f      	b.n	8002ea8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe f851 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	; 0x24
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f938 	bl	80030d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	f040 808c 	bne.w	8002fea <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_UART_Receive+0x2e>
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e084      	b.n	8002fec <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Receive+0x40>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e07d      	b.n	8002fec <HAL_UART_Receive+0x13c>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2222      	movs	r2, #34	; 0x22
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0c:	f7fe f8c2 	bl	8001094 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	88fa      	ldrh	r2, [r7, #6]
 8002f1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	d108      	bne.n	8002f3a <HAL_UART_Receive+0x8a>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e003      	b.n	8002f42 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f4a:	e043      	b.n	8002fd4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	2120      	movs	r1, #32
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f84c 	bl	8002ff4 <UART_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e042      	b.n	8002fec <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10c      	bne.n	8002f86 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3302      	adds	r3, #2
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e01f      	b.n	8002fc6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8e:	d007      	beq.n	8002fa0 <HAL_UART_Receive+0xf0>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_UART_Receive+0xfe>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e008      	b.n	8002fc0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1b6      	bne.n	8002f4c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e000      	b.n	8002fec <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b090      	sub	sp, #64	; 0x40
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003004:	e050      	b.n	80030a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d04c      	beq.n	80030a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800300e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x30>
 8003014:	f7fe f83e 	bl	8001094 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003020:	429a      	cmp	r2, r3
 8003022:	d241      	bcs.n	80030a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003044:	637a      	str	r2, [r7, #52]	; 0x34
 8003046:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	613b      	str	r3, [r7, #16]
   return(result);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3314      	adds	r3, #20
 8003076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003078:	623a      	str	r2, [r7, #32]
 800307a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	69f9      	ldr	r1, [r7, #28]
 800307e:	6a3a      	ldr	r2, [r7, #32]
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	61bb      	str	r3, [r7, #24]
   return(result);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e00f      	b.n	80030c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d09f      	beq.n	8003006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3740      	adds	r7, #64	; 0x40
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	b09f      	sub	sp, #124	; 0x7c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	68d9      	ldr	r1, [r3, #12]
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	ea40 0301 	orr.w	r3, r0, r1
 80030f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	431a      	orrs	r2, r3
 8003102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4313      	orrs	r3, r2
 8003108:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003114:	f021 010c 	bic.w	r1, r1, #12
 8003118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800311e:	430b      	orrs	r3, r1
 8003120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800312c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312e:	6999      	ldr	r1, [r3, #24]
 8003130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	ea40 0301 	orr.w	r3, r0, r1
 8003138:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800313a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4bc5      	ldr	r3, [pc, #788]	; (8003454 <UART_SetConfig+0x384>)
 8003140:	429a      	cmp	r2, r3
 8003142:	d004      	beq.n	800314e <UART_SetConfig+0x7e>
 8003144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4bc3      	ldr	r3, [pc, #780]	; (8003458 <UART_SetConfig+0x388>)
 800314a:	429a      	cmp	r2, r3
 800314c:	d103      	bne.n	8003156 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800314e:	f7ff fc75 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003152:	6778      	str	r0, [r7, #116]	; 0x74
 8003154:	e002      	b.n	800315c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003156:	f7ff fc5d 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 800315a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003164:	f040 80b6 	bne.w	80032d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800316a:	461c      	mov	r4, r3
 800316c:	f04f 0500 	mov.w	r5, #0
 8003170:	4622      	mov	r2, r4
 8003172:	462b      	mov	r3, r5
 8003174:	1891      	adds	r1, r2, r2
 8003176:	6439      	str	r1, [r7, #64]	; 0x40
 8003178:	415b      	adcs	r3, r3
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
 800317c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003180:	1912      	adds	r2, r2, r4
 8003182:	eb45 0303 	adc.w	r3, r5, r3
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	00d9      	lsls	r1, r3, #3
 8003190:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003194:	00d0      	lsls	r0, r2, #3
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	1911      	adds	r1, r2, r4
 800319c:	6639      	str	r1, [r7, #96]	; 0x60
 800319e:	416b      	adcs	r3, r5
 80031a0:	667b      	str	r3, [r7, #100]	; 0x64
 80031a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	1891      	adds	r1, r2, r2
 80031ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80031b0:	415b      	adcs	r3, r3
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80031bc:	f7fd f80c 	bl	80001d8 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4ba5      	ldr	r3, [pc, #660]	; (800345c <UART_SetConfig+0x38c>)
 80031c6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	011e      	lsls	r6, r3, #4
 80031ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d0:	461c      	mov	r4, r3
 80031d2:	f04f 0500 	mov.w	r5, #0
 80031d6:	4622      	mov	r2, r4
 80031d8:	462b      	mov	r3, r5
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	6339      	str	r1, [r7, #48]	; 0x30
 80031de:	415b      	adcs	r3, r3
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
 80031e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031e6:	1912      	adds	r2, r2, r4
 80031e8:	eb45 0303 	adc.w	r3, r5, r3
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	00d9      	lsls	r1, r3, #3
 80031f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031fa:	00d0      	lsls	r0, r2, #3
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	1911      	adds	r1, r2, r4
 8003202:	65b9      	str	r1, [r7, #88]	; 0x58
 8003204:	416b      	adcs	r3, r5
 8003206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	461a      	mov	r2, r3
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	1891      	adds	r1, r2, r2
 8003214:	62b9      	str	r1, [r7, #40]	; 0x28
 8003216:	415b      	adcs	r3, r3
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800321e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003222:	f7fc ffd9 	bl	80001d8 <__aeabi_uldivmod>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4b8c      	ldr	r3, [pc, #560]	; (800345c <UART_SetConfig+0x38c>)
 800322c:	fba3 1302 	umull	r1, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	2164      	movs	r1, #100	; 0x64
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	3332      	adds	r3, #50	; 0x32
 800323e:	4a87      	ldr	r2, [pc, #540]	; (800345c <UART_SetConfig+0x38c>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800324c:	441e      	add	r6, r3
 800324e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003250:	4618      	mov	r0, r3
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	1894      	adds	r4, r2, r2
 800325c:	623c      	str	r4, [r7, #32]
 800325e:	415b      	adcs	r3, r3
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003266:	1812      	adds	r2, r2, r0
 8003268:	eb41 0303 	adc.w	r3, r1, r3
 800326c:	f04f 0400 	mov.w	r4, #0
 8003270:	f04f 0500 	mov.w	r5, #0
 8003274:	00dd      	lsls	r5, r3, #3
 8003276:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800327a:	00d4      	lsls	r4, r2, #3
 800327c:	4622      	mov	r2, r4
 800327e:	462b      	mov	r3, r5
 8003280:	1814      	adds	r4, r2, r0
 8003282:	653c      	str	r4, [r7, #80]	; 0x50
 8003284:	414b      	adcs	r3, r1
 8003286:	657b      	str	r3, [r7, #84]	; 0x54
 8003288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	461a      	mov	r2, r3
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	1891      	adds	r1, r2, r2
 8003294:	61b9      	str	r1, [r7, #24]
 8003296:	415b      	adcs	r3, r3
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80032a2:	f7fc ff99 	bl	80001d8 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4b6c      	ldr	r3, [pc, #432]	; (800345c <UART_SetConfig+0x38c>)
 80032ac:	fba3 1302 	umull	r1, r3, r3, r2
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	2164      	movs	r1, #100	; 0x64
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	3332      	adds	r3, #50	; 0x32
 80032be:	4a67      	ldr	r2, [pc, #412]	; (800345c <UART_SetConfig+0x38c>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	f003 0207 	and.w	r2, r3, #7
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4432      	add	r2, r6
 80032d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032d2:	e0b9      	b.n	8003448 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d6:	461c      	mov	r4, r3
 80032d8:	f04f 0500 	mov.w	r5, #0
 80032dc:	4622      	mov	r2, r4
 80032de:	462b      	mov	r3, r5
 80032e0:	1891      	adds	r1, r2, r2
 80032e2:	6139      	str	r1, [r7, #16]
 80032e4:	415b      	adcs	r3, r3
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032ec:	1912      	adds	r2, r2, r4
 80032ee:	eb45 0303 	adc.w	r3, r5, r3
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f04f 0100 	mov.w	r1, #0
 80032fa:	00d9      	lsls	r1, r3, #3
 80032fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003300:	00d0      	lsls	r0, r2, #3
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	eb12 0804 	adds.w	r8, r2, r4
 800330a:	eb43 0905 	adc.w	r9, r3, r5
 800330e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4618      	mov	r0, r3
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	008b      	lsls	r3, r1, #2
 8003322:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003326:	0082      	lsls	r2, r0, #2
 8003328:	4640      	mov	r0, r8
 800332a:	4649      	mov	r1, r9
 800332c:	f7fc ff54 	bl	80001d8 <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4b49      	ldr	r3, [pc, #292]	; (800345c <UART_SetConfig+0x38c>)
 8003336:	fba3 2302 	umull	r2, r3, r3, r2
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	011e      	lsls	r6, r3, #4
 800333e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003340:	4618      	mov	r0, r3
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	1894      	adds	r4, r2, r2
 800334c:	60bc      	str	r4, [r7, #8]
 800334e:	415b      	adcs	r3, r3
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003356:	1812      	adds	r2, r2, r0
 8003358:	eb41 0303 	adc.w	r3, r1, r3
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	f04f 0500 	mov.w	r5, #0
 8003364:	00dd      	lsls	r5, r3, #3
 8003366:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800336a:	00d4      	lsls	r4, r2, #3
 800336c:	4622      	mov	r2, r4
 800336e:	462b      	mov	r3, r5
 8003370:	1814      	adds	r4, r2, r0
 8003372:	64bc      	str	r4, [r7, #72]	; 0x48
 8003374:	414b      	adcs	r3, r1
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	008b      	lsls	r3, r1, #2
 800338c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003390:	0082      	lsls	r2, r0, #2
 8003392:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003396:	f7fc ff1f 	bl	80001d8 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b2f      	ldr	r3, [pc, #188]	; (800345c <UART_SetConfig+0x38c>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	3332      	adds	r3, #50	; 0x32
 80033b2:	4a2a      	ldr	r2, [pc, #168]	; (800345c <UART_SetConfig+0x38c>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033be:	441e      	add	r6, r3
 80033c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c2:	4618      	mov	r0, r3
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	1894      	adds	r4, r2, r2
 80033ce:	603c      	str	r4, [r7, #0]
 80033d0:	415b      	adcs	r3, r3
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d8:	1812      	adds	r2, r2, r0
 80033da:	eb41 0303 	adc.w	r3, r1, r3
 80033de:	f04f 0400 	mov.w	r4, #0
 80033e2:	f04f 0500 	mov.w	r5, #0
 80033e6:	00dd      	lsls	r5, r3, #3
 80033e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033ec:	00d4      	lsls	r4, r2, #3
 80033ee:	4622      	mov	r2, r4
 80033f0:	462b      	mov	r3, r5
 80033f2:	eb12 0a00 	adds.w	sl, r2, r0
 80033f6:	eb43 0b01 	adc.w	fp, r3, r1
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4618      	mov	r0, r3
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	008b      	lsls	r3, r1, #2
 800340e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003412:	0082      	lsls	r2, r0, #2
 8003414:	4650      	mov	r0, sl
 8003416:	4659      	mov	r1, fp
 8003418:	f7fc fede 	bl	80001d8 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <UART_SetConfig+0x38c>)
 8003422:	fba3 1302 	umull	r1, r3, r3, r2
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2164      	movs	r1, #100	; 0x64
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	3332      	adds	r3, #50	; 0x32
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <UART_SetConfig+0x38c>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	f003 020f 	and.w	r2, r3, #15
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4432      	add	r2, r6
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	bf00      	nop
 800344a:	377c      	adds	r7, #124	; 0x7c
 800344c:	46bd      	mov	sp, r7
 800344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003452:	bf00      	nop
 8003454:	40011000 	.word	0x40011000
 8003458:	40011400 	.word	0x40011400
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	4d0d      	ldr	r5, [pc, #52]	; (8003498 <__libc_init_array+0x38>)
 8003464:	4c0d      	ldr	r4, [pc, #52]	; (800349c <__libc_init_array+0x3c>)
 8003466:	1b64      	subs	r4, r4, r5
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	2600      	movs	r6, #0
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	4d0b      	ldr	r5, [pc, #44]	; (80034a0 <__libc_init_array+0x40>)
 8003472:	4c0c      	ldr	r4, [pc, #48]	; (80034a4 <__libc_init_array+0x44>)
 8003474:	f000 f820 	bl	80034b8 <_init>
 8003478:	1b64      	subs	r4, r4, r5
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	2600      	movs	r6, #0
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	f855 3b04 	ldr.w	r3, [r5], #4
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	080034f0 	.word	0x080034f0
 800349c:	080034f0 	.word	0x080034f0
 80034a0:	080034f0 	.word	0x080034f0
 80034a4:	080034f4 	.word	0x080034f4

080034a8 <memset>:
 80034a8:	4402      	add	r2, r0
 80034aa:	4603      	mov	r3, r0
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <memset+0xa>
 80034b0:	4770      	bx	lr
 80034b2:	f803 1b01 	strb.w	r1, [r3], #1
 80034b6:	e7f9      	b.n	80034ac <memset+0x4>

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
