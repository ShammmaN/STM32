
UD_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001560  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017a0  080017a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080017a0  080017a0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017a0  080017a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080017a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08001810  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001810  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002758  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a82  00000000  00000000  000227f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00023278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00023590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026ce  00000000  00000000  00023820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c36  00000000  00000000  00025eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ed0  00000000  00000000  00029b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ad9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011d8  00000000  00000000  000ada44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016e8 	.word	0x080016e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080016e8 	.word	0x080016e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <uart2_TX_init>:
#include "MyUART.h"



void uart2_TX_init()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	/*****************Configure uart gpio pin ******************/
	/*Enable clock access to gpioa*/
	//Enable GPIOA Port
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b35      	ldr	r3, [pc, #212]	; (800035c <uart2_TX_init+0xdc>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a34      	ldr	r2, [pc, #208]	; (800035c <uart2_TX_init+0xdc>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2 mode to alternate function mode*/

	//Set alternate function for PA2
	GPIOA->MODER &=~(1U<<4);
 8000290:	4b33      	ldr	r3, [pc, #204]	; (8000360 <uart2_TX_init+0xe0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a32      	ldr	r2, [pc, #200]	; (8000360 <uart2_TX_init+0xe0>)
 8000296:	f023 0310 	bic.w	r3, r3, #16
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 800029c:	4b30      	ldr	r3, [pc, #192]	; (8000360 <uart2_TX_init+0xe0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2f      	ldr	r2, [pc, #188]	; (8000360 <uart2_TX_init+0xe0>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6013      	str	r3, [r2, #0]

	//Set alternate function for PA3
	GPIOA->MODER &=~(1U<<4);
 80002a8:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <uart2_TX_init+0xe0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2c      	ldr	r2, [pc, #176]	; (8000360 <uart2_TX_init+0xe0>)
 80002ae:	f023 0310 	bic.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80002b4:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <uart2_TX_init+0xe0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a29      	ldr	r2, [pc, #164]	; (8000360 <uart2_TX_init+0xe0>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6013      	str	r3, [r2, #0]


	//Set alternate function register AF7 (0111) for PA2
	GPIOA->AFR[0] |= (1U<<8);
 80002c0:	4b27      	ldr	r3, [pc, #156]	; (8000360 <uart2_TX_init+0xe0>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a26      	ldr	r2, [pc, #152]	; (8000360 <uart2_TX_init+0xe0>)
 80002c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <uart2_TX_init+0xe0>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a23      	ldr	r2, [pc, #140]	; (8000360 <uart2_TX_init+0xe0>)
 80002d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <uart2_TX_init+0xe0>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a20      	ldr	r2, [pc, #128]	; (8000360 <uart2_TX_init+0xe0>)
 80002de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <uart2_TX_init+0xe0>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <uart2_TX_init+0xe0>)
 80002ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002ee:	6213      	str	r3, [r2, #32]

	//Set alternate function register AF7 (0111) for PA3
	GPIOA->AFR[0] |= (1U<<12);
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <uart2_TX_init+0xe0>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <uart2_TX_init+0xe0>)
 80002f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <uart2_TX_init+0xe0>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <uart2_TX_init+0xe0>)
 8000302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000306:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <uart2_TX_init+0xe0>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <uart2_TX_init+0xe0>)
 800030e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <uart2_TX_init+0xe0>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <uart2_TX_init+0xe0>)
 800031a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800031e:	6213      	str	r3, [r2, #32]



	/*****************Configure uart module*********************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <uart2_TX_init+0xdc>)
 8000322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <uart2_TX_init+0xdc>)
 8000326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800032a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800032c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000330:	490c      	ldr	r1, [pc, #48]	; (8000364 <uart2_TX_init+0xe4>)
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <uart2_TX_init+0xe8>)
 8000334:	f000 f83e 	bl	80003b4 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE;	//Transmitter enable & clearing
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <uart2_TX_init+0xe8>)
 800033a:	2208      	movs	r2, #8
 800033c:	60da      	str	r2, [r3, #12]
	//USART2->CR1 |=CR1_RE;	//Receiver enable

	/*Enable uart module*/
	USART2->CR1 |=CR1_UE;
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <uart2_TX_init+0xe8>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <uart2_TX_init+0xe8>)
 8000344:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000348:	60d3      	str	r3, [r2, #12]

	/*Enabnle USART Word Length*/
	USART2->CR1 &= ~(1U<<12);
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <uart2_TX_init+0xe8>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <uart2_TX_init+0xe8>)
 8000350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000354:	60d3      	str	r3, [r2, #12]


}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000
 8000364:	00f42400 	.word	0x00f42400
 8000368:	40004400 	.word	0x40004400

0800036c <__io_putchar>:

  int __io_putchar(int ch)
	{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
		uart_write(ch);
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f805 	bl	8000384 <uart_write>
		return ch;
 800037a:	687b      	ldr	r3, [r7, #4]
	}
 800037c:	4618      	mov	r0, r3
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <uart_write>:


void uart_write(int ch)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]

	//Make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE)){};
 800038c:	bf00      	nop
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <uart_write+0x2c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <uart_write+0xa>
	//Write transmit data register
	USART2->DR = (ch & 0xFFU);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <uart_write+0x2c>)
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	6053      	str	r3, [r2, #4]

}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40004400 	.word	0x40004400

080003b4 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t Baudrate)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_br(PeriphClock,Baudrate);
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	68b8      	ldr	r0, [r7, #8]
 80003c4:	f000 f808 	bl	80003d8 <compute_uart_br>
 80003c8:	4603      	mov	r3, r0
 80003ca:	461a      	mov	r2, r3
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	609a      	str	r2, [r3, #8]
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <compute_uart_br>:

static uint16_t compute_uart_br(uint32_t PeriphClock, uint32_t Baudrate)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
	return ((PeriphClock+ (Baudrate/2U))/Baudrate);
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	085a      	lsrs	r2, r3, #1
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	441a      	add	r2, r3
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f0:	b29b      	uxth	r3, r3
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <MyGPIOInit>:


#include "Myconfig.h"

void MyGPIOInit()
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

	//Enable OTGUFEN PORT
	RCC->AHB2ENR |= (1U<<7);
 8000404:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <MyGPIOInit+0xd0>)
 8000406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000408:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <MyGPIOInit+0xd0>)
 800040a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040e:	6353      	str	r3, [r2, #52]	; 0x34

	//Enable GPIOD Port
	RCC->AHB1ENR |= GPIODEN;
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <MyGPIOInit+0xd0>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a2e      	ldr	r2, [pc, #184]	; (80004d0 <MyGPIOInit+0xd0>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6313      	str	r3, [r2, #48]	; 0x30



	//Enable pin PD12 output mode
	GPIOD->MODER |=(1U<<24);
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MyGPIOInit+0xd4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <MyGPIOInit+0xd4>)
 8000422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000426:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MyGPIOInit+0xd4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <MyGPIOInit+0xd4>)
 800042e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000432:	6013      	str	r3, [r2, #0]

	//Enable pin PD13 output mode
	GPIOD->MODER |=(1U<<26);
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MyGPIOInit+0xd4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <MyGPIOInit+0xd4>)
 800043a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800043e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MyGPIOInit+0xd4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a23      	ldr	r2, [pc, #140]	; (80004d4 <MyGPIOInit+0xd4>)
 8000446:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800044a:	6013      	str	r3, [r2, #0]

	//Enable pin PD14 output mode
	GPIOD->MODER |=(1U<<28);
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MyGPIOInit+0xd4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a20      	ldr	r2, [pc, #128]	; (80004d4 <MyGPIOInit+0xd4>)
 8000452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000456:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<29);
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MyGPIOInit+0xd4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <MyGPIOInit+0xd4>)
 800045e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000462:	6013      	str	r3, [r2, #0]

	//Enable pin PD15 output mode
	GPIOD->MODER |=(1U<<30);
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MyGPIOInit+0xd4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <MyGPIOInit+0xd4>)
 800046a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800046e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<31);
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MyGPIOInit+0xd4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <MyGPIOInit+0xd4>)
 8000476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800047a:	6013      	str	r3, [r2, #0]

	//Enable PA0 Input mode
	GPIOA->MODER &=~(1U<<0);
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MyGPIOInit+0xd8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a15      	ldr	r2, [pc, #84]	; (80004d8 <MyGPIOInit+0xd8>)
 8000482:	f023 0301 	bic.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MyGPIOInit+0xd8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <MyGPIOInit+0xd8>)
 800048e:	f023 0302 	bic.w	r3, r3, #2
 8000492:	6013      	str	r3, [r2, #0]

	//Enable PA11 Alternate function
    GPIOA->MODER |= (1U<<23);
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MyGPIOInit+0xd8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <MyGPIOInit+0xd8>)
 800049a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800049e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<22);
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MyGPIOInit+0xd8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <MyGPIOInit+0xd8>)
 80004a6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80004aa:	6013      	str	r3, [r2, #0]

	//Enable PA12 Alternate function
	GPIOA->MODER |= (1U<<25);
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MyGPIOInit+0xd8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <MyGPIOInit+0xd8>)
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<24);
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MyGPIOInit+0xd8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <MyGPIOInit+0xd8>)
 80004be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004c2:	6013      	str	r3, [r2, #0]

}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40020c00 	.word	0x40020c00
 80004d8:	40020000 	.word	0x40020000

080004dc <GPIO_PIN_TOOGLE>:

}


void GPIO_PIN_TOOGLE(GPIO_TypeDef *PORT,uint16_t GPIO_PIN)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]

	PORT->ODR ^=GPIO_PIN;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	887b      	ldrh	r3, [r7, #2]
 80004ee:	405a      	eors	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	615a      	str	r2, [r3, #20]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <main>:
//		return ch;
//	}


int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
//	int i=0;
//  HAL_Init();
//  SystemClock_Config();

  MyGPIOInit();
 8000506:	f7ff ff7b 	bl	8000400 <MyGPIOInit>
  uart2_TX_init();
 800050a:	f7ff feb9 	bl	8000280 <uart2_TX_init>
  uint32_t result;
  while (1)
  {
//	  Temp_Start();
//	 result=Temp_Read();
	 printf("%ld\n",result);
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <main+0x24>)
 8000512:	f000 f95b 	bl	80007cc <iprintf>


	  GPIO_PIN_TOOGLE(GPIOD, LED_1);
 8000516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <main+0x28>)
 800051c:	f7ff ffde 	bl	80004dc <GPIO_PIN_TOOGLE>
	 printf("%ld\n",result);
 8000520:	e7f5      	b.n	800050e <main+0xe>
 8000522:	bf00      	nop
 8000524:	08001700 	.word	0x08001700
 8000528:	40020c00 	.word	0x40020c00

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler+0x4>

08000532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>

0800053e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <UsageFault_Handler+0x4>

0800054a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f8e2 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	e00a      	b.n	80005a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000592:	f3af 8000 	nop.w
 8000596:	4601      	mov	r1, r0
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	b2ca      	uxtb	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf0      	blt.n	8000592 <_read+0x12>
	}

return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fec9 	bl	800036c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x12>
	}
	return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_close>:

int _close(int file)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800061a:	605a      	str	r2, [r3, #4]
	return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_isatty>:

int _isatty(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return 1;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f000 f86c 	bl	8000768 <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20020000 	.word	0x20020000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	20000084 	.word	0x20000084
 80006c4:	200000a0 	.word	0x200000a0

080006c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <SystemInit+0x20>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <SystemInit+0x20>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006f2:	490e      	ldr	r1, [pc, #56]	; (800072c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006f4:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000708:	4c0b      	ldr	r4, [pc, #44]	; (8000738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000716:	f7ff ffd7 	bl	80006c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f000 f82b 	bl	8000774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800071e:	f7ff feef 	bl	8000500 <main>
  bx  lr    
 8000722:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000730:	080017a8 	.word	0x080017a8
  ldr r2, =_sbss
 8000734:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000738:	2000009c 	.word	0x2000009c

0800073c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC_IRQHandler>
	...

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	20000088 	.word	0x20000088

08000768 <__errno>:
 8000768:	4b01      	ldr	r3, [pc, #4]	; (8000770 <__errno+0x8>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000004 	.word	0x20000004

08000774 <__libc_init_array>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4d0d      	ldr	r5, [pc, #52]	; (80007ac <__libc_init_array+0x38>)
 8000778:	4c0d      	ldr	r4, [pc, #52]	; (80007b0 <__libc_init_array+0x3c>)
 800077a:	1b64      	subs	r4, r4, r5
 800077c:	10a4      	asrs	r4, r4, #2
 800077e:	2600      	movs	r6, #0
 8000780:	42a6      	cmp	r6, r4
 8000782:	d109      	bne.n	8000798 <__libc_init_array+0x24>
 8000784:	4d0b      	ldr	r5, [pc, #44]	; (80007b4 <__libc_init_array+0x40>)
 8000786:	4c0c      	ldr	r4, [pc, #48]	; (80007b8 <__libc_init_array+0x44>)
 8000788:	f000 ffae 	bl	80016e8 <_init>
 800078c:	1b64      	subs	r4, r4, r5
 800078e:	10a4      	asrs	r4, r4, #2
 8000790:	2600      	movs	r6, #0
 8000792:	42a6      	cmp	r6, r4
 8000794:	d105      	bne.n	80007a2 <__libc_init_array+0x2e>
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f855 3b04 	ldr.w	r3, [r5], #4
 800079c:	4798      	blx	r3
 800079e:	3601      	adds	r6, #1
 80007a0:	e7ee      	b.n	8000780 <__libc_init_array+0xc>
 80007a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a6:	4798      	blx	r3
 80007a8:	3601      	adds	r6, #1
 80007aa:	e7f2      	b.n	8000792 <__libc_init_array+0x1e>
 80007ac:	080017a0 	.word	0x080017a0
 80007b0:	080017a0 	.word	0x080017a0
 80007b4:	080017a0 	.word	0x080017a0
 80007b8:	080017a4 	.word	0x080017a4

080007bc <memset>:
 80007bc:	4402      	add	r2, r0
 80007be:	4603      	mov	r3, r0
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d100      	bne.n	80007c6 <memset+0xa>
 80007c4:	4770      	bx	lr
 80007c6:	f803 1b01 	strb.w	r1, [r3], #1
 80007ca:	e7f9      	b.n	80007c0 <memset+0x4>

080007cc <iprintf>:
 80007cc:	b40f      	push	{r0, r1, r2, r3}
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <iprintf+0x2c>)
 80007d0:	b513      	push	{r0, r1, r4, lr}
 80007d2:	681c      	ldr	r4, [r3, #0]
 80007d4:	b124      	cbz	r4, 80007e0 <iprintf+0x14>
 80007d6:	69a3      	ldr	r3, [r4, #24]
 80007d8:	b913      	cbnz	r3, 80007e0 <iprintf+0x14>
 80007da:	4620      	mov	r0, r4
 80007dc:	f000 f866 	bl	80008ac <__sinit>
 80007e0:	ab05      	add	r3, sp, #20
 80007e2:	9a04      	ldr	r2, [sp, #16]
 80007e4:	68a1      	ldr	r1, [r4, #8]
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	4620      	mov	r0, r4
 80007ea:	f000 f9bd 	bl	8000b68 <_vfiprintf_r>
 80007ee:	b002      	add	sp, #8
 80007f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr
 80007f8:	20000004 	.word	0x20000004

080007fc <std>:
 80007fc:	2300      	movs	r3, #0
 80007fe:	b510      	push	{r4, lr}
 8000800:	4604      	mov	r4, r0
 8000802:	e9c0 3300 	strd	r3, r3, [r0]
 8000806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800080a:	6083      	str	r3, [r0, #8]
 800080c:	8181      	strh	r1, [r0, #12]
 800080e:	6643      	str	r3, [r0, #100]	; 0x64
 8000810:	81c2      	strh	r2, [r0, #14]
 8000812:	6183      	str	r3, [r0, #24]
 8000814:	4619      	mov	r1, r3
 8000816:	2208      	movs	r2, #8
 8000818:	305c      	adds	r0, #92	; 0x5c
 800081a:	f7ff ffcf 	bl	80007bc <memset>
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <std+0x38>)
 8000820:	6263      	str	r3, [r4, #36]	; 0x24
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <std+0x3c>)
 8000824:	62a3      	str	r3, [r4, #40]	; 0x28
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <std+0x40>)
 8000828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <std+0x44>)
 800082c:	6224      	str	r4, [r4, #32]
 800082e:	6323      	str	r3, [r4, #48]	; 0x30
 8000830:	bd10      	pop	{r4, pc}
 8000832:	bf00      	nop
 8000834:	08001111 	.word	0x08001111
 8000838:	08001133 	.word	0x08001133
 800083c:	0800116b 	.word	0x0800116b
 8000840:	0800118f 	.word	0x0800118f

08000844 <_cleanup_r>:
 8000844:	4901      	ldr	r1, [pc, #4]	; (800084c <_cleanup_r+0x8>)
 8000846:	f000 b8af 	b.w	80009a8 <_fwalk_reent>
 800084a:	bf00      	nop
 800084c:	08001469 	.word	0x08001469

08000850 <__sfmoreglue>:
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	2268      	movs	r2, #104	; 0x68
 8000854:	1e4d      	subs	r5, r1, #1
 8000856:	4355      	muls	r5, r2
 8000858:	460e      	mov	r6, r1
 800085a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800085e:	f000 f8e5 	bl	8000a2c <_malloc_r>
 8000862:	4604      	mov	r4, r0
 8000864:	b140      	cbz	r0, 8000878 <__sfmoreglue+0x28>
 8000866:	2100      	movs	r1, #0
 8000868:	e9c0 1600 	strd	r1, r6, [r0]
 800086c:	300c      	adds	r0, #12
 800086e:	60a0      	str	r0, [r4, #8]
 8000870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000874:	f7ff ffa2 	bl	80007bc <memset>
 8000878:	4620      	mov	r0, r4
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__sfp_lock_acquire>:
 800087c:	4801      	ldr	r0, [pc, #4]	; (8000884 <__sfp_lock_acquire+0x8>)
 800087e:	f000 b8b3 	b.w	80009e8 <__retarget_lock_acquire_recursive>
 8000882:	bf00      	nop
 8000884:	2000008d 	.word	0x2000008d

08000888 <__sfp_lock_release>:
 8000888:	4801      	ldr	r0, [pc, #4]	; (8000890 <__sfp_lock_release+0x8>)
 800088a:	f000 b8ae 	b.w	80009ea <__retarget_lock_release_recursive>
 800088e:	bf00      	nop
 8000890:	2000008d 	.word	0x2000008d

08000894 <__sinit_lock_acquire>:
 8000894:	4801      	ldr	r0, [pc, #4]	; (800089c <__sinit_lock_acquire+0x8>)
 8000896:	f000 b8a7 	b.w	80009e8 <__retarget_lock_acquire_recursive>
 800089a:	bf00      	nop
 800089c:	2000008e 	.word	0x2000008e

080008a0 <__sinit_lock_release>:
 80008a0:	4801      	ldr	r0, [pc, #4]	; (80008a8 <__sinit_lock_release+0x8>)
 80008a2:	f000 b8a2 	b.w	80009ea <__retarget_lock_release_recursive>
 80008a6:	bf00      	nop
 80008a8:	2000008e 	.word	0x2000008e

080008ac <__sinit>:
 80008ac:	b510      	push	{r4, lr}
 80008ae:	4604      	mov	r4, r0
 80008b0:	f7ff fff0 	bl	8000894 <__sinit_lock_acquire>
 80008b4:	69a3      	ldr	r3, [r4, #24]
 80008b6:	b11b      	cbz	r3, 80008c0 <__sinit+0x14>
 80008b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008bc:	f7ff bff0 	b.w	80008a0 <__sinit_lock_release>
 80008c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008c4:	6523      	str	r3, [r4, #80]	; 0x50
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <__sinit+0x68>)
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <__sinit+0x6c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80008ce:	42a3      	cmp	r3, r4
 80008d0:	bf04      	itt	eq
 80008d2:	2301      	moveq	r3, #1
 80008d4:	61a3      	streq	r3, [r4, #24]
 80008d6:	4620      	mov	r0, r4
 80008d8:	f000 f820 	bl	800091c <__sfp>
 80008dc:	6060      	str	r0, [r4, #4]
 80008de:	4620      	mov	r0, r4
 80008e0:	f000 f81c 	bl	800091c <__sfp>
 80008e4:	60a0      	str	r0, [r4, #8]
 80008e6:	4620      	mov	r0, r4
 80008e8:	f000 f818 	bl	800091c <__sfp>
 80008ec:	2200      	movs	r2, #0
 80008ee:	60e0      	str	r0, [r4, #12]
 80008f0:	2104      	movs	r1, #4
 80008f2:	6860      	ldr	r0, [r4, #4]
 80008f4:	f7ff ff82 	bl	80007fc <std>
 80008f8:	68a0      	ldr	r0, [r4, #8]
 80008fa:	2201      	movs	r2, #1
 80008fc:	2109      	movs	r1, #9
 80008fe:	f7ff ff7d 	bl	80007fc <std>
 8000902:	68e0      	ldr	r0, [r4, #12]
 8000904:	2202      	movs	r2, #2
 8000906:	2112      	movs	r1, #18
 8000908:	f7ff ff78 	bl	80007fc <std>
 800090c:	2301      	movs	r3, #1
 800090e:	61a3      	str	r3, [r4, #24]
 8000910:	e7d2      	b.n	80008b8 <__sinit+0xc>
 8000912:	bf00      	nop
 8000914:	08001708 	.word	0x08001708
 8000918:	08000845 	.word	0x08000845

0800091c <__sfp>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	4607      	mov	r7, r0
 8000920:	f7ff ffac 	bl	800087c <__sfp_lock_acquire>
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <__sfp+0x84>)
 8000926:	681e      	ldr	r6, [r3, #0]
 8000928:	69b3      	ldr	r3, [r6, #24]
 800092a:	b913      	cbnz	r3, 8000932 <__sfp+0x16>
 800092c:	4630      	mov	r0, r6
 800092e:	f7ff ffbd 	bl	80008ac <__sinit>
 8000932:	3648      	adds	r6, #72	; 0x48
 8000934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000938:	3b01      	subs	r3, #1
 800093a:	d503      	bpl.n	8000944 <__sfp+0x28>
 800093c:	6833      	ldr	r3, [r6, #0]
 800093e:	b30b      	cbz	r3, 8000984 <__sfp+0x68>
 8000940:	6836      	ldr	r6, [r6, #0]
 8000942:	e7f7      	b.n	8000934 <__sfp+0x18>
 8000944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000948:	b9d5      	cbnz	r5, 8000980 <__sfp+0x64>
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <__sfp+0x88>)
 800094c:	60e3      	str	r3, [r4, #12]
 800094e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000952:	6665      	str	r5, [r4, #100]	; 0x64
 8000954:	f000 f847 	bl	80009e6 <__retarget_lock_init_recursive>
 8000958:	f7ff ff96 	bl	8000888 <__sfp_lock_release>
 800095c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000964:	6025      	str	r5, [r4, #0]
 8000966:	61a5      	str	r5, [r4, #24]
 8000968:	2208      	movs	r2, #8
 800096a:	4629      	mov	r1, r5
 800096c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000970:	f7ff ff24 	bl	80007bc <memset>
 8000974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800097c:	4620      	mov	r0, r4
 800097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000980:	3468      	adds	r4, #104	; 0x68
 8000982:	e7d9      	b.n	8000938 <__sfp+0x1c>
 8000984:	2104      	movs	r1, #4
 8000986:	4638      	mov	r0, r7
 8000988:	f7ff ff62 	bl	8000850 <__sfmoreglue>
 800098c:	4604      	mov	r4, r0
 800098e:	6030      	str	r0, [r6, #0]
 8000990:	2800      	cmp	r0, #0
 8000992:	d1d5      	bne.n	8000940 <__sfp+0x24>
 8000994:	f7ff ff78 	bl	8000888 <__sfp_lock_release>
 8000998:	230c      	movs	r3, #12
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	e7ee      	b.n	800097c <__sfp+0x60>
 800099e:	bf00      	nop
 80009a0:	08001708 	.word	0x08001708
 80009a4:	ffff0001 	.word	0xffff0001

080009a8 <_fwalk_reent>:
 80009a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009ac:	4606      	mov	r6, r0
 80009ae:	4688      	mov	r8, r1
 80009b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009b4:	2700      	movs	r7, #0
 80009b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009ba:	f1b9 0901 	subs.w	r9, r9, #1
 80009be:	d505      	bpl.n	80009cc <_fwalk_reent+0x24>
 80009c0:	6824      	ldr	r4, [r4, #0]
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d1f7      	bne.n	80009b6 <_fwalk_reent+0xe>
 80009c6:	4638      	mov	r0, r7
 80009c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009cc:	89ab      	ldrh	r3, [r5, #12]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d907      	bls.n	80009e2 <_fwalk_reent+0x3a>
 80009d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009d6:	3301      	adds	r3, #1
 80009d8:	d003      	beq.n	80009e2 <_fwalk_reent+0x3a>
 80009da:	4629      	mov	r1, r5
 80009dc:	4630      	mov	r0, r6
 80009de:	47c0      	blx	r8
 80009e0:	4307      	orrs	r7, r0
 80009e2:	3568      	adds	r5, #104	; 0x68
 80009e4:	e7e9      	b.n	80009ba <_fwalk_reent+0x12>

080009e6 <__retarget_lock_init_recursive>:
 80009e6:	4770      	bx	lr

080009e8 <__retarget_lock_acquire_recursive>:
 80009e8:	4770      	bx	lr

080009ea <__retarget_lock_release_recursive>:
 80009ea:	4770      	bx	lr

080009ec <sbrk_aligned>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	4e0e      	ldr	r6, [pc, #56]	; (8000a28 <sbrk_aligned+0x3c>)
 80009f0:	460c      	mov	r4, r1
 80009f2:	6831      	ldr	r1, [r6, #0]
 80009f4:	4605      	mov	r5, r0
 80009f6:	b911      	cbnz	r1, 80009fe <sbrk_aligned+0x12>
 80009f8:	f000 fb7a 	bl	80010f0 <_sbrk_r>
 80009fc:	6030      	str	r0, [r6, #0]
 80009fe:	4621      	mov	r1, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 fb75 	bl	80010f0 <_sbrk_r>
 8000a06:	1c43      	adds	r3, r0, #1
 8000a08:	d00a      	beq.n	8000a20 <sbrk_aligned+0x34>
 8000a0a:	1cc4      	adds	r4, r0, #3
 8000a0c:	f024 0403 	bic.w	r4, r4, #3
 8000a10:	42a0      	cmp	r0, r4
 8000a12:	d007      	beq.n	8000a24 <sbrk_aligned+0x38>
 8000a14:	1a21      	subs	r1, r4, r0
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 fb6a 	bl	80010f0 <_sbrk_r>
 8000a1c:	3001      	adds	r0, #1
 8000a1e:	d101      	bne.n	8000a24 <sbrk_aligned+0x38>
 8000a20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	20000094 	.word	0x20000094

08000a2c <_malloc_r>:
 8000a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a30:	1ccd      	adds	r5, r1, #3
 8000a32:	f025 0503 	bic.w	r5, r5, #3
 8000a36:	3508      	adds	r5, #8
 8000a38:	2d0c      	cmp	r5, #12
 8000a3a:	bf38      	it	cc
 8000a3c:	250c      	movcc	r5, #12
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	4607      	mov	r7, r0
 8000a42:	db01      	blt.n	8000a48 <_malloc_r+0x1c>
 8000a44:	42a9      	cmp	r1, r5
 8000a46:	d905      	bls.n	8000a54 <_malloc_r+0x28>
 8000a48:	230c      	movs	r3, #12
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a54:	4e2e      	ldr	r6, [pc, #184]	; (8000b10 <_malloc_r+0xe4>)
 8000a56:	f000 fdbb 	bl	80015d0 <__malloc_lock>
 8000a5a:	6833      	ldr	r3, [r6, #0]
 8000a5c:	461c      	mov	r4, r3
 8000a5e:	bb34      	cbnz	r4, 8000aae <_malloc_r+0x82>
 8000a60:	4629      	mov	r1, r5
 8000a62:	4638      	mov	r0, r7
 8000a64:	f7ff ffc2 	bl	80009ec <sbrk_aligned>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	d14d      	bne.n	8000b0a <_malloc_r+0xde>
 8000a6e:	6834      	ldr	r4, [r6, #0]
 8000a70:	4626      	mov	r6, r4
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	d140      	bne.n	8000af8 <_malloc_r+0xcc>
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	4638      	mov	r0, r7
 8000a7c:	eb04 0803 	add.w	r8, r4, r3
 8000a80:	f000 fb36 	bl	80010f0 <_sbrk_r>
 8000a84:	4580      	cmp	r8, r0
 8000a86:	d13a      	bne.n	8000afe <_malloc_r+0xd2>
 8000a88:	6821      	ldr	r1, [r4, #0]
 8000a8a:	3503      	adds	r5, #3
 8000a8c:	1a6d      	subs	r5, r5, r1
 8000a8e:	f025 0503 	bic.w	r5, r5, #3
 8000a92:	3508      	adds	r5, #8
 8000a94:	2d0c      	cmp	r5, #12
 8000a96:	bf38      	it	cc
 8000a98:	250c      	movcc	r5, #12
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	f7ff ffa5 	bl	80009ec <sbrk_aligned>
 8000aa2:	3001      	adds	r0, #1
 8000aa4:	d02b      	beq.n	8000afe <_malloc_r+0xd2>
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	442b      	add	r3, r5
 8000aaa:	6023      	str	r3, [r4, #0]
 8000aac:	e00e      	b.n	8000acc <_malloc_r+0xa0>
 8000aae:	6822      	ldr	r2, [r4, #0]
 8000ab0:	1b52      	subs	r2, r2, r5
 8000ab2:	d41e      	bmi.n	8000af2 <_malloc_r+0xc6>
 8000ab4:	2a0b      	cmp	r2, #11
 8000ab6:	d916      	bls.n	8000ae6 <_malloc_r+0xba>
 8000ab8:	1961      	adds	r1, r4, r5
 8000aba:	42a3      	cmp	r3, r4
 8000abc:	6025      	str	r5, [r4, #0]
 8000abe:	bf18      	it	ne
 8000ac0:	6059      	strne	r1, [r3, #4]
 8000ac2:	6863      	ldr	r3, [r4, #4]
 8000ac4:	bf08      	it	eq
 8000ac6:	6031      	streq	r1, [r6, #0]
 8000ac8:	5162      	str	r2, [r4, r5]
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	4638      	mov	r0, r7
 8000ace:	f104 060b 	add.w	r6, r4, #11
 8000ad2:	f000 fd83 	bl	80015dc <__malloc_unlock>
 8000ad6:	f026 0607 	bic.w	r6, r6, #7
 8000ada:	1d23      	adds	r3, r4, #4
 8000adc:	1af2      	subs	r2, r6, r3
 8000ade:	d0b6      	beq.n	8000a4e <_malloc_r+0x22>
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	50a3      	str	r3, [r4, r2]
 8000ae4:	e7b3      	b.n	8000a4e <_malloc_r+0x22>
 8000ae6:	6862      	ldr	r2, [r4, #4]
 8000ae8:	42a3      	cmp	r3, r4
 8000aea:	bf0c      	ite	eq
 8000aec:	6032      	streq	r2, [r6, #0]
 8000aee:	605a      	strne	r2, [r3, #4]
 8000af0:	e7ec      	b.n	8000acc <_malloc_r+0xa0>
 8000af2:	4623      	mov	r3, r4
 8000af4:	6864      	ldr	r4, [r4, #4]
 8000af6:	e7b2      	b.n	8000a5e <_malloc_r+0x32>
 8000af8:	4634      	mov	r4, r6
 8000afa:	6876      	ldr	r6, [r6, #4]
 8000afc:	e7b9      	b.n	8000a72 <_malloc_r+0x46>
 8000afe:	230c      	movs	r3, #12
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4638      	mov	r0, r7
 8000b04:	f000 fd6a 	bl	80015dc <__malloc_unlock>
 8000b08:	e7a1      	b.n	8000a4e <_malloc_r+0x22>
 8000b0a:	6025      	str	r5, [r4, #0]
 8000b0c:	e7de      	b.n	8000acc <_malloc_r+0xa0>
 8000b0e:	bf00      	nop
 8000b10:	20000090 	.word	0x20000090

08000b14 <__sfputc_r>:
 8000b14:	6893      	ldr	r3, [r2, #8]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	b410      	push	{r4}
 8000b1c:	6093      	str	r3, [r2, #8]
 8000b1e:	da08      	bge.n	8000b32 <__sfputc_r+0x1e>
 8000b20:	6994      	ldr	r4, [r2, #24]
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	db01      	blt.n	8000b2a <__sfputc_r+0x16>
 8000b26:	290a      	cmp	r1, #10
 8000b28:	d103      	bne.n	8000b32 <__sfputc_r+0x1e>
 8000b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2e:	f000 bb33 	b.w	8001198 <__swbuf_r>
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	1c58      	adds	r0, r3, #1
 8000b36:	6010      	str	r0, [r2, #0]
 8000b38:	7019      	strb	r1, [r3, #0]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <__sfputs_r>:
 8000b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b44:	4606      	mov	r6, r0
 8000b46:	460f      	mov	r7, r1
 8000b48:	4614      	mov	r4, r2
 8000b4a:	18d5      	adds	r5, r2, r3
 8000b4c:	42ac      	cmp	r4, r5
 8000b4e:	d101      	bne.n	8000b54 <__sfputs_r+0x12>
 8000b50:	2000      	movs	r0, #0
 8000b52:	e007      	b.n	8000b64 <__sfputs_r+0x22>
 8000b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b58:	463a      	mov	r2, r7
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f7ff ffda 	bl	8000b14 <__sfputc_r>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	d1f3      	bne.n	8000b4c <__sfputs_r+0xa>
 8000b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b68 <_vfiprintf_r>:
 8000b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b6c:	460d      	mov	r5, r1
 8000b6e:	b09d      	sub	sp, #116	; 0x74
 8000b70:	4614      	mov	r4, r2
 8000b72:	4698      	mov	r8, r3
 8000b74:	4606      	mov	r6, r0
 8000b76:	b118      	cbz	r0, 8000b80 <_vfiprintf_r+0x18>
 8000b78:	6983      	ldr	r3, [r0, #24]
 8000b7a:	b90b      	cbnz	r3, 8000b80 <_vfiprintf_r+0x18>
 8000b7c:	f7ff fe96 	bl	80008ac <__sinit>
 8000b80:	4b89      	ldr	r3, [pc, #548]	; (8000da8 <_vfiprintf_r+0x240>)
 8000b82:	429d      	cmp	r5, r3
 8000b84:	d11b      	bne.n	8000bbe <_vfiprintf_r+0x56>
 8000b86:	6875      	ldr	r5, [r6, #4]
 8000b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b8a:	07d9      	lsls	r1, r3, #31
 8000b8c:	d405      	bmi.n	8000b9a <_vfiprintf_r+0x32>
 8000b8e:	89ab      	ldrh	r3, [r5, #12]
 8000b90:	059a      	lsls	r2, r3, #22
 8000b92:	d402      	bmi.n	8000b9a <_vfiprintf_r+0x32>
 8000b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b96:	f7ff ff27 	bl	80009e8 <__retarget_lock_acquire_recursive>
 8000b9a:	89ab      	ldrh	r3, [r5, #12]
 8000b9c:	071b      	lsls	r3, r3, #28
 8000b9e:	d501      	bpl.n	8000ba4 <_vfiprintf_r+0x3c>
 8000ba0:	692b      	ldr	r3, [r5, #16]
 8000ba2:	b9eb      	cbnz	r3, 8000be0 <_vfiprintf_r+0x78>
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f000 fb5a 	bl	8001260 <__swsetup_r>
 8000bac:	b1c0      	cbz	r0, 8000be0 <_vfiprintf_r+0x78>
 8000bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bb0:	07dc      	lsls	r4, r3, #31
 8000bb2:	d50e      	bpl.n	8000bd2 <_vfiprintf_r+0x6a>
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb8:	b01d      	add	sp, #116	; 0x74
 8000bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bbe:	4b7b      	ldr	r3, [pc, #492]	; (8000dac <_vfiprintf_r+0x244>)
 8000bc0:	429d      	cmp	r5, r3
 8000bc2:	d101      	bne.n	8000bc8 <_vfiprintf_r+0x60>
 8000bc4:	68b5      	ldr	r5, [r6, #8]
 8000bc6:	e7df      	b.n	8000b88 <_vfiprintf_r+0x20>
 8000bc8:	4b79      	ldr	r3, [pc, #484]	; (8000db0 <_vfiprintf_r+0x248>)
 8000bca:	429d      	cmp	r5, r3
 8000bcc:	bf08      	it	eq
 8000bce:	68f5      	ldreq	r5, [r6, #12]
 8000bd0:	e7da      	b.n	8000b88 <_vfiprintf_r+0x20>
 8000bd2:	89ab      	ldrh	r3, [r5, #12]
 8000bd4:	0598      	lsls	r0, r3, #22
 8000bd6:	d4ed      	bmi.n	8000bb4 <_vfiprintf_r+0x4c>
 8000bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bda:	f7ff ff06 	bl	80009ea <__retarget_lock_release_recursive>
 8000bde:	e7e9      	b.n	8000bb4 <_vfiprintf_r+0x4c>
 8000be0:	2300      	movs	r3, #0
 8000be2:	9309      	str	r3, [sp, #36]	; 0x24
 8000be4:	2320      	movs	r3, #32
 8000be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bee:	2330      	movs	r3, #48	; 0x30
 8000bf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000db4 <_vfiprintf_r+0x24c>
 8000bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bf8:	f04f 0901 	mov.w	r9, #1
 8000bfc:	4623      	mov	r3, r4
 8000bfe:	469a      	mov	sl, r3
 8000c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c04:	b10a      	cbz	r2, 8000c0a <_vfiprintf_r+0xa2>
 8000c06:	2a25      	cmp	r2, #37	; 0x25
 8000c08:	d1f9      	bne.n	8000bfe <_vfiprintf_r+0x96>
 8000c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8000c0e:	d00b      	beq.n	8000c28 <_vfiprintf_r+0xc0>
 8000c10:	465b      	mov	r3, fp
 8000c12:	4622      	mov	r2, r4
 8000c14:	4629      	mov	r1, r5
 8000c16:	4630      	mov	r0, r6
 8000c18:	f7ff ff93 	bl	8000b42 <__sfputs_r>
 8000c1c:	3001      	adds	r0, #1
 8000c1e:	f000 80aa 	beq.w	8000d76 <_vfiprintf_r+0x20e>
 8000c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c24:	445a      	add	r2, fp
 8000c26:	9209      	str	r2, [sp, #36]	; 0x24
 8000c28:	f89a 3000 	ldrb.w	r3, [sl]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 80a2 	beq.w	8000d76 <_vfiprintf_r+0x20e>
 8000c32:	2300      	movs	r3, #0
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c3c:	f10a 0a01 	add.w	sl, sl, #1
 8000c40:	9304      	str	r3, [sp, #16]
 8000c42:	9307      	str	r3, [sp, #28]
 8000c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c48:	931a      	str	r3, [sp, #104]	; 0x68
 8000c4a:	4654      	mov	r4, sl
 8000c4c:	2205      	movs	r2, #5
 8000c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c52:	4858      	ldr	r0, [pc, #352]	; (8000db4 <_vfiprintf_r+0x24c>)
 8000c54:	f7ff fac4 	bl	80001e0 <memchr>
 8000c58:	9a04      	ldr	r2, [sp, #16]
 8000c5a:	b9d8      	cbnz	r0, 8000c94 <_vfiprintf_r+0x12c>
 8000c5c:	06d1      	lsls	r1, r2, #27
 8000c5e:	bf44      	itt	mi
 8000c60:	2320      	movmi	r3, #32
 8000c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c66:	0713      	lsls	r3, r2, #28
 8000c68:	bf44      	itt	mi
 8000c6a:	232b      	movmi	r3, #43	; 0x2b
 8000c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c70:	f89a 3000 	ldrb.w	r3, [sl]
 8000c74:	2b2a      	cmp	r3, #42	; 0x2a
 8000c76:	d015      	beq.n	8000ca4 <_vfiprintf_r+0x13c>
 8000c78:	9a07      	ldr	r2, [sp, #28]
 8000c7a:	4654      	mov	r4, sl
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f04f 0c0a 	mov.w	ip, #10
 8000c82:	4621      	mov	r1, r4
 8000c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c88:	3b30      	subs	r3, #48	; 0x30
 8000c8a:	2b09      	cmp	r3, #9
 8000c8c:	d94e      	bls.n	8000d2c <_vfiprintf_r+0x1c4>
 8000c8e:	b1b0      	cbz	r0, 8000cbe <_vfiprintf_r+0x156>
 8000c90:	9207      	str	r2, [sp, #28]
 8000c92:	e014      	b.n	8000cbe <_vfiprintf_r+0x156>
 8000c94:	eba0 0308 	sub.w	r3, r0, r8
 8000c98:	fa09 f303 	lsl.w	r3, r9, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	9304      	str	r3, [sp, #16]
 8000ca0:	46a2      	mov	sl, r4
 8000ca2:	e7d2      	b.n	8000c4a <_vfiprintf_r+0xe2>
 8000ca4:	9b03      	ldr	r3, [sp, #12]
 8000ca6:	1d19      	adds	r1, r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	9103      	str	r1, [sp, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bfbb      	ittet	lt
 8000cb0:	425b      	neglt	r3, r3
 8000cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8000cb6:	9307      	strge	r3, [sp, #28]
 8000cb8:	9307      	strlt	r3, [sp, #28]
 8000cba:	bfb8      	it	lt
 8000cbc:	9204      	strlt	r2, [sp, #16]
 8000cbe:	7823      	ldrb	r3, [r4, #0]
 8000cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc2:	d10c      	bne.n	8000cde <_vfiprintf_r+0x176>
 8000cc4:	7863      	ldrb	r3, [r4, #1]
 8000cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8000cc8:	d135      	bne.n	8000d36 <_vfiprintf_r+0x1ce>
 8000cca:	9b03      	ldr	r3, [sp, #12]
 8000ccc:	1d1a      	adds	r2, r3, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	9203      	str	r2, [sp, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bfb8      	it	lt
 8000cd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cda:	3402      	adds	r4, #2
 8000cdc:	9305      	str	r3, [sp, #20]
 8000cde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000dc4 <_vfiprintf_r+0x25c>
 8000ce2:	7821      	ldrb	r1, [r4, #0]
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4650      	mov	r0, sl
 8000ce8:	f7ff fa7a 	bl	80001e0 <memchr>
 8000cec:	b140      	cbz	r0, 8000d00 <_vfiprintf_r+0x198>
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	eba0 000a 	sub.w	r0, r0, sl
 8000cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8000cf8:	9b04      	ldr	r3, [sp, #16]
 8000cfa:	4303      	orrs	r3, r0
 8000cfc:	3401      	adds	r4, #1
 8000cfe:	9304      	str	r3, [sp, #16]
 8000d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d04:	482c      	ldr	r0, [pc, #176]	; (8000db8 <_vfiprintf_r+0x250>)
 8000d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d0a:	2206      	movs	r2, #6
 8000d0c:	f7ff fa68 	bl	80001e0 <memchr>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d03f      	beq.n	8000d94 <_vfiprintf_r+0x22c>
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <_vfiprintf_r+0x254>)
 8000d16:	bb1b      	cbnz	r3, 8000d60 <_vfiprintf_r+0x1f8>
 8000d18:	9b03      	ldr	r3, [sp, #12]
 8000d1a:	3307      	adds	r3, #7
 8000d1c:	f023 0307 	bic.w	r3, r3, #7
 8000d20:	3308      	adds	r3, #8
 8000d22:	9303      	str	r3, [sp, #12]
 8000d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d26:	443b      	add	r3, r7
 8000d28:	9309      	str	r3, [sp, #36]	; 0x24
 8000d2a:	e767      	b.n	8000bfc <_vfiprintf_r+0x94>
 8000d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d30:	460c      	mov	r4, r1
 8000d32:	2001      	movs	r0, #1
 8000d34:	e7a5      	b.n	8000c82 <_vfiprintf_r+0x11a>
 8000d36:	2300      	movs	r3, #0
 8000d38:	3401      	adds	r4, #1
 8000d3a:	9305      	str	r3, [sp, #20]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 0c0a 	mov.w	ip, #10
 8000d42:	4620      	mov	r0, r4
 8000d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d48:	3a30      	subs	r2, #48	; 0x30
 8000d4a:	2a09      	cmp	r2, #9
 8000d4c:	d903      	bls.n	8000d56 <_vfiprintf_r+0x1ee>
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0c5      	beq.n	8000cde <_vfiprintf_r+0x176>
 8000d52:	9105      	str	r1, [sp, #20]
 8000d54:	e7c3      	b.n	8000cde <_vfiprintf_r+0x176>
 8000d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e7f0      	b.n	8000d42 <_vfiprintf_r+0x1da>
 8000d60:	ab03      	add	r3, sp, #12
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	462a      	mov	r2, r5
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <_vfiprintf_r+0x258>)
 8000d68:	a904      	add	r1, sp, #16
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f3af 8000 	nop.w
 8000d70:	4607      	mov	r7, r0
 8000d72:	1c78      	adds	r0, r7, #1
 8000d74:	d1d6      	bne.n	8000d24 <_vfiprintf_r+0x1bc>
 8000d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d78:	07d9      	lsls	r1, r3, #31
 8000d7a:	d405      	bmi.n	8000d88 <_vfiprintf_r+0x220>
 8000d7c:	89ab      	ldrh	r3, [r5, #12]
 8000d7e:	059a      	lsls	r2, r3, #22
 8000d80:	d402      	bmi.n	8000d88 <_vfiprintf_r+0x220>
 8000d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d84:	f7ff fe31 	bl	80009ea <__retarget_lock_release_recursive>
 8000d88:	89ab      	ldrh	r3, [r5, #12]
 8000d8a:	065b      	lsls	r3, r3, #25
 8000d8c:	f53f af12 	bmi.w	8000bb4 <_vfiprintf_r+0x4c>
 8000d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d92:	e711      	b.n	8000bb8 <_vfiprintf_r+0x50>
 8000d94:	ab03      	add	r3, sp, #12
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	462a      	mov	r2, r5
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <_vfiprintf_r+0x258>)
 8000d9c:	a904      	add	r1, sp, #16
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f000 f880 	bl	8000ea4 <_printf_i>
 8000da4:	e7e4      	b.n	8000d70 <_vfiprintf_r+0x208>
 8000da6:	bf00      	nop
 8000da8:	0800172c 	.word	0x0800172c
 8000dac:	0800174c 	.word	0x0800174c
 8000db0:	0800170c 	.word	0x0800170c
 8000db4:	0800176c 	.word	0x0800176c
 8000db8:	08001776 	.word	0x08001776
 8000dbc:	00000000 	.word	0x00000000
 8000dc0:	08000b43 	.word	0x08000b43
 8000dc4:	08001772 	.word	0x08001772

08000dc8 <_printf_common>:
 8000dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dcc:	4616      	mov	r6, r2
 8000dce:	4699      	mov	r9, r3
 8000dd0:	688a      	ldr	r2, [r1, #8]
 8000dd2:	690b      	ldr	r3, [r1, #16]
 8000dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	bfb8      	it	lt
 8000ddc:	4613      	movlt	r3, r2
 8000dde:	6033      	str	r3, [r6, #0]
 8000de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000de4:	4607      	mov	r7, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	b10a      	cbz	r2, 8000dee <_printf_common+0x26>
 8000dea:	3301      	adds	r3, #1
 8000dec:	6033      	str	r3, [r6, #0]
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	0699      	lsls	r1, r3, #26
 8000df2:	bf42      	ittt	mi
 8000df4:	6833      	ldrmi	r3, [r6, #0]
 8000df6:	3302      	addmi	r3, #2
 8000df8:	6033      	strmi	r3, [r6, #0]
 8000dfa:	6825      	ldr	r5, [r4, #0]
 8000dfc:	f015 0506 	ands.w	r5, r5, #6
 8000e00:	d106      	bne.n	8000e10 <_printf_common+0x48>
 8000e02:	f104 0a19 	add.w	sl, r4, #25
 8000e06:	68e3      	ldr	r3, [r4, #12]
 8000e08:	6832      	ldr	r2, [r6, #0]
 8000e0a:	1a9b      	subs	r3, r3, r2
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	dc26      	bgt.n	8000e5e <_printf_common+0x96>
 8000e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e14:	1e13      	subs	r3, r2, #0
 8000e16:	6822      	ldr	r2, [r4, #0]
 8000e18:	bf18      	it	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	0692      	lsls	r2, r2, #26
 8000e1e:	d42b      	bmi.n	8000e78 <_printf_common+0xb0>
 8000e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e24:	4649      	mov	r1, r9
 8000e26:	4638      	mov	r0, r7
 8000e28:	47c0      	blx	r8
 8000e2a:	3001      	adds	r0, #1
 8000e2c:	d01e      	beq.n	8000e6c <_printf_common+0xa4>
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	68e5      	ldr	r5, [r4, #12]
 8000e32:	6832      	ldr	r2, [r6, #0]
 8000e34:	f003 0306 	and.w	r3, r3, #6
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	bf08      	it	eq
 8000e3c:	1aad      	subeq	r5, r5, r2
 8000e3e:	68a3      	ldr	r3, [r4, #8]
 8000e40:	6922      	ldr	r2, [r4, #16]
 8000e42:	bf0c      	ite	eq
 8000e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e48:	2500      	movne	r5, #0
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	bfc4      	itt	gt
 8000e4e:	1a9b      	subgt	r3, r3, r2
 8000e50:	18ed      	addgt	r5, r5, r3
 8000e52:	2600      	movs	r6, #0
 8000e54:	341a      	adds	r4, #26
 8000e56:	42b5      	cmp	r5, r6
 8000e58:	d11a      	bne.n	8000e90 <_printf_common+0xc8>
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	e008      	b.n	8000e70 <_printf_common+0xa8>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4652      	mov	r2, sl
 8000e62:	4649      	mov	r1, r9
 8000e64:	4638      	mov	r0, r7
 8000e66:	47c0      	blx	r8
 8000e68:	3001      	adds	r0, #1
 8000e6a:	d103      	bne.n	8000e74 <_printf_common+0xac>
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e74:	3501      	adds	r5, #1
 8000e76:	e7c6      	b.n	8000e06 <_printf_common+0x3e>
 8000e78:	18e1      	adds	r1, r4, r3
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	2030      	movs	r0, #48	; 0x30
 8000e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e82:	4422      	add	r2, r4
 8000e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	e7c7      	b.n	8000e20 <_printf_common+0x58>
 8000e90:	2301      	movs	r3, #1
 8000e92:	4622      	mov	r2, r4
 8000e94:	4649      	mov	r1, r9
 8000e96:	4638      	mov	r0, r7
 8000e98:	47c0      	blx	r8
 8000e9a:	3001      	adds	r0, #1
 8000e9c:	d0e6      	beq.n	8000e6c <_printf_common+0xa4>
 8000e9e:	3601      	adds	r6, #1
 8000ea0:	e7d9      	b.n	8000e56 <_printf_common+0x8e>
	...

08000ea4 <_printf_i>:
 8000ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	7e0f      	ldrb	r7, [r1, #24]
 8000eaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000eac:	2f78      	cmp	r7, #120	; 0x78
 8000eae:	4691      	mov	r9, r2
 8000eb0:	4680      	mov	r8, r0
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	469a      	mov	sl, r3
 8000eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000eba:	d807      	bhi.n	8000ecc <_printf_i+0x28>
 8000ebc:	2f62      	cmp	r7, #98	; 0x62
 8000ebe:	d80a      	bhi.n	8000ed6 <_printf_i+0x32>
 8000ec0:	2f00      	cmp	r7, #0
 8000ec2:	f000 80d8 	beq.w	8001076 <_printf_i+0x1d2>
 8000ec6:	2f58      	cmp	r7, #88	; 0x58
 8000ec8:	f000 80a3 	beq.w	8001012 <_printf_i+0x16e>
 8000ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ed4:	e03a      	b.n	8000f4c <_printf_i+0xa8>
 8000ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000eda:	2b15      	cmp	r3, #21
 8000edc:	d8f6      	bhi.n	8000ecc <_printf_i+0x28>
 8000ede:	a101      	add	r1, pc, #4	; (adr r1, 8000ee4 <_printf_i+0x40>)
 8000ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ee4:	08000f3d 	.word	0x08000f3d
 8000ee8:	08000f51 	.word	0x08000f51
 8000eec:	08000ecd 	.word	0x08000ecd
 8000ef0:	08000ecd 	.word	0x08000ecd
 8000ef4:	08000ecd 	.word	0x08000ecd
 8000ef8:	08000ecd 	.word	0x08000ecd
 8000efc:	08000f51 	.word	0x08000f51
 8000f00:	08000ecd 	.word	0x08000ecd
 8000f04:	08000ecd 	.word	0x08000ecd
 8000f08:	08000ecd 	.word	0x08000ecd
 8000f0c:	08000ecd 	.word	0x08000ecd
 8000f10:	0800105d 	.word	0x0800105d
 8000f14:	08000f81 	.word	0x08000f81
 8000f18:	0800103f 	.word	0x0800103f
 8000f1c:	08000ecd 	.word	0x08000ecd
 8000f20:	08000ecd 	.word	0x08000ecd
 8000f24:	0800107f 	.word	0x0800107f
 8000f28:	08000ecd 	.word	0x08000ecd
 8000f2c:	08000f81 	.word	0x08000f81
 8000f30:	08000ecd 	.word	0x08000ecd
 8000f34:	08000ecd 	.word	0x08000ecd
 8000f38:	08001047 	.word	0x08001047
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	1d1a      	adds	r2, r3, #4
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	602a      	str	r2, [r5, #0]
 8000f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0a3      	b.n	8001098 <_printf_i+0x1f4>
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	6829      	ldr	r1, [r5, #0]
 8000f54:	0606      	lsls	r6, r0, #24
 8000f56:	f101 0304 	add.w	r3, r1, #4
 8000f5a:	d50a      	bpl.n	8000f72 <_printf_i+0xce>
 8000f5c:	680e      	ldr	r6, [r1, #0]
 8000f5e:	602b      	str	r3, [r5, #0]
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	da03      	bge.n	8000f6c <_printf_i+0xc8>
 8000f64:	232d      	movs	r3, #45	; 0x2d
 8000f66:	4276      	negs	r6, r6
 8000f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f6c:	485e      	ldr	r0, [pc, #376]	; (80010e8 <_printf_i+0x244>)
 8000f6e:	230a      	movs	r3, #10
 8000f70:	e019      	b.n	8000fa6 <_printf_i+0x102>
 8000f72:	680e      	ldr	r6, [r1, #0]
 8000f74:	602b      	str	r3, [r5, #0]
 8000f76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f7a:	bf18      	it	ne
 8000f7c:	b236      	sxthne	r6, r6
 8000f7e:	e7ef      	b.n	8000f60 <_printf_i+0xbc>
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	6820      	ldr	r0, [r4, #0]
 8000f84:	1d19      	adds	r1, r3, #4
 8000f86:	6029      	str	r1, [r5, #0]
 8000f88:	0601      	lsls	r1, r0, #24
 8000f8a:	d501      	bpl.n	8000f90 <_printf_i+0xec>
 8000f8c:	681e      	ldr	r6, [r3, #0]
 8000f8e:	e002      	b.n	8000f96 <_printf_i+0xf2>
 8000f90:	0646      	lsls	r6, r0, #25
 8000f92:	d5fb      	bpl.n	8000f8c <_printf_i+0xe8>
 8000f94:	881e      	ldrh	r6, [r3, #0]
 8000f96:	4854      	ldr	r0, [pc, #336]	; (80010e8 <_printf_i+0x244>)
 8000f98:	2f6f      	cmp	r7, #111	; 0x6f
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2308      	moveq	r3, #8
 8000f9e:	230a      	movne	r3, #10
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fa6:	6865      	ldr	r5, [r4, #4]
 8000fa8:	60a5      	str	r5, [r4, #8]
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	bfa2      	ittt	ge
 8000fae:	6821      	ldrge	r1, [r4, #0]
 8000fb0:	f021 0104 	bicge.w	r1, r1, #4
 8000fb4:	6021      	strge	r1, [r4, #0]
 8000fb6:	b90e      	cbnz	r6, 8000fbc <_printf_i+0x118>
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d04d      	beq.n	8001058 <_printf_i+0x1b4>
 8000fbc:	4615      	mov	r5, r2
 8000fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8000fc6:	5dc7      	ldrb	r7, [r0, r7]
 8000fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fcc:	4637      	mov	r7, r6
 8000fce:	42bb      	cmp	r3, r7
 8000fd0:	460e      	mov	r6, r1
 8000fd2:	d9f4      	bls.n	8000fbe <_printf_i+0x11a>
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d10b      	bne.n	8000ff0 <_printf_i+0x14c>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	07de      	lsls	r6, r3, #31
 8000fdc:	d508      	bpl.n	8000ff0 <_printf_i+0x14c>
 8000fde:	6923      	ldr	r3, [r4, #16]
 8000fe0:	6861      	ldr	r1, [r4, #4]
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	bfde      	ittt	le
 8000fe6:	2330      	movle	r3, #48	; 0x30
 8000fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000ff0:	1b52      	subs	r2, r2, r5
 8000ff2:	6122      	str	r2, [r4, #16]
 8000ff4:	f8cd a000 	str.w	sl, [sp]
 8000ff8:	464b      	mov	r3, r9
 8000ffa:	aa03      	add	r2, sp, #12
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	4640      	mov	r0, r8
 8001000:	f7ff fee2 	bl	8000dc8 <_printf_common>
 8001004:	3001      	adds	r0, #1
 8001006:	d14c      	bne.n	80010a2 <_printf_i+0x1fe>
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	b004      	add	sp, #16
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	4835      	ldr	r0, [pc, #212]	; (80010e8 <_printf_i+0x244>)
 8001014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001018:	6829      	ldr	r1, [r5, #0]
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001020:	6029      	str	r1, [r5, #0]
 8001022:	061d      	lsls	r5, r3, #24
 8001024:	d514      	bpl.n	8001050 <_printf_i+0x1ac>
 8001026:	07df      	lsls	r7, r3, #31
 8001028:	bf44      	itt	mi
 800102a:	f043 0320 	orrmi.w	r3, r3, #32
 800102e:	6023      	strmi	r3, [r4, #0]
 8001030:	b91e      	cbnz	r6, 800103a <_printf_i+0x196>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	f023 0320 	bic.w	r3, r3, #32
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	2310      	movs	r3, #16
 800103c:	e7b0      	b.n	8000fa0 <_printf_i+0xfc>
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	f043 0320 	orr.w	r3, r3, #32
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	2378      	movs	r3, #120	; 0x78
 8001048:	4828      	ldr	r0, [pc, #160]	; (80010ec <_printf_i+0x248>)
 800104a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800104e:	e7e3      	b.n	8001018 <_printf_i+0x174>
 8001050:	0659      	lsls	r1, r3, #25
 8001052:	bf48      	it	mi
 8001054:	b2b6      	uxthmi	r6, r6
 8001056:	e7e6      	b.n	8001026 <_printf_i+0x182>
 8001058:	4615      	mov	r5, r2
 800105a:	e7bb      	b.n	8000fd4 <_printf_i+0x130>
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	6826      	ldr	r6, [r4, #0]
 8001060:	6961      	ldr	r1, [r4, #20]
 8001062:	1d18      	adds	r0, r3, #4
 8001064:	6028      	str	r0, [r5, #0]
 8001066:	0635      	lsls	r5, r6, #24
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	d501      	bpl.n	8001070 <_printf_i+0x1cc>
 800106c:	6019      	str	r1, [r3, #0]
 800106e:	e002      	b.n	8001076 <_printf_i+0x1d2>
 8001070:	0670      	lsls	r0, r6, #25
 8001072:	d5fb      	bpl.n	800106c <_printf_i+0x1c8>
 8001074:	8019      	strh	r1, [r3, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	6123      	str	r3, [r4, #16]
 800107a:	4615      	mov	r5, r2
 800107c:	e7ba      	b.n	8000ff4 <_printf_i+0x150>
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	1d1a      	adds	r2, r3, #4
 8001082:	602a      	str	r2, [r5, #0]
 8001084:	681d      	ldr	r5, [r3, #0]
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	2100      	movs	r1, #0
 800108a:	4628      	mov	r0, r5
 800108c:	f7ff f8a8 	bl	80001e0 <memchr>
 8001090:	b108      	cbz	r0, 8001096 <_printf_i+0x1f2>
 8001092:	1b40      	subs	r0, r0, r5
 8001094:	6060      	str	r0, [r4, #4]
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	6123      	str	r3, [r4, #16]
 800109a:	2300      	movs	r3, #0
 800109c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010a0:	e7a8      	b.n	8000ff4 <_printf_i+0x150>
 80010a2:	6923      	ldr	r3, [r4, #16]
 80010a4:	462a      	mov	r2, r5
 80010a6:	4649      	mov	r1, r9
 80010a8:	4640      	mov	r0, r8
 80010aa:	47d0      	blx	sl
 80010ac:	3001      	adds	r0, #1
 80010ae:	d0ab      	beq.n	8001008 <_printf_i+0x164>
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	079b      	lsls	r3, r3, #30
 80010b4:	d413      	bmi.n	80010de <_printf_i+0x23a>
 80010b6:	68e0      	ldr	r0, [r4, #12]
 80010b8:	9b03      	ldr	r3, [sp, #12]
 80010ba:	4298      	cmp	r0, r3
 80010bc:	bfb8      	it	lt
 80010be:	4618      	movlt	r0, r3
 80010c0:	e7a4      	b.n	800100c <_printf_i+0x168>
 80010c2:	2301      	movs	r3, #1
 80010c4:	4632      	mov	r2, r6
 80010c6:	4649      	mov	r1, r9
 80010c8:	4640      	mov	r0, r8
 80010ca:	47d0      	blx	sl
 80010cc:	3001      	adds	r0, #1
 80010ce:	d09b      	beq.n	8001008 <_printf_i+0x164>
 80010d0:	3501      	adds	r5, #1
 80010d2:	68e3      	ldr	r3, [r4, #12]
 80010d4:	9903      	ldr	r1, [sp, #12]
 80010d6:	1a5b      	subs	r3, r3, r1
 80010d8:	42ab      	cmp	r3, r5
 80010da:	dcf2      	bgt.n	80010c2 <_printf_i+0x21e>
 80010dc:	e7eb      	b.n	80010b6 <_printf_i+0x212>
 80010de:	2500      	movs	r5, #0
 80010e0:	f104 0619 	add.w	r6, r4, #25
 80010e4:	e7f5      	b.n	80010d2 <_printf_i+0x22e>
 80010e6:	bf00      	nop
 80010e8:	0800177d 	.word	0x0800177d
 80010ec:	0800178e 	.word	0x0800178e

080010f0 <_sbrk_r>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4d06      	ldr	r5, [pc, #24]	; (800110c <_sbrk_r+0x1c>)
 80010f4:	2300      	movs	r3, #0
 80010f6:	4604      	mov	r4, r0
 80010f8:	4608      	mov	r0, r1
 80010fa:	602b      	str	r3, [r5, #0]
 80010fc:	f7ff faae 	bl	800065c <_sbrk>
 8001100:	1c43      	adds	r3, r0, #1
 8001102:	d102      	bne.n	800110a <_sbrk_r+0x1a>
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	b103      	cbz	r3, 800110a <_sbrk_r+0x1a>
 8001108:	6023      	str	r3, [r4, #0]
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	20000098 	.word	0x20000098

08001110 <__sread>:
 8001110:	b510      	push	{r4, lr}
 8001112:	460c      	mov	r4, r1
 8001114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001118:	f000 fab2 	bl	8001680 <_read_r>
 800111c:	2800      	cmp	r0, #0
 800111e:	bfab      	itete	ge
 8001120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001122:	89a3      	ldrhlt	r3, [r4, #12]
 8001124:	181b      	addge	r3, r3, r0
 8001126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800112a:	bfac      	ite	ge
 800112c:	6563      	strge	r3, [r4, #84]	; 0x54
 800112e:	81a3      	strhlt	r3, [r4, #12]
 8001130:	bd10      	pop	{r4, pc}

08001132 <__swrite>:
 8001132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001136:	461f      	mov	r7, r3
 8001138:	898b      	ldrh	r3, [r1, #12]
 800113a:	05db      	lsls	r3, r3, #23
 800113c:	4605      	mov	r5, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4616      	mov	r6, r2
 8001142:	d505      	bpl.n	8001150 <__swrite+0x1e>
 8001144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001148:	2302      	movs	r3, #2
 800114a:	2200      	movs	r2, #0
 800114c:	f000 f9c8 	bl	80014e0 <_lseek_r>
 8001150:	89a3      	ldrh	r3, [r4, #12]
 8001152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800115a:	81a3      	strh	r3, [r4, #12]
 800115c:	4632      	mov	r2, r6
 800115e:	463b      	mov	r3, r7
 8001160:	4628      	mov	r0, r5
 8001162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001166:	f000 b869 	b.w	800123c <_write_r>

0800116a <__sseek>:
 800116a:	b510      	push	{r4, lr}
 800116c:	460c      	mov	r4, r1
 800116e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001172:	f000 f9b5 	bl	80014e0 <_lseek_r>
 8001176:	1c43      	adds	r3, r0, #1
 8001178:	89a3      	ldrh	r3, [r4, #12]
 800117a:	bf15      	itete	ne
 800117c:	6560      	strne	r0, [r4, #84]	; 0x54
 800117e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001186:	81a3      	strheq	r3, [r4, #12]
 8001188:	bf18      	it	ne
 800118a:	81a3      	strhne	r3, [r4, #12]
 800118c:	bd10      	pop	{r4, pc}

0800118e <__sclose>:
 800118e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001192:	f000 b8d3 	b.w	800133c <_close_r>
	...

08001198 <__swbuf_r>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	460e      	mov	r6, r1
 800119c:	4614      	mov	r4, r2
 800119e:	4605      	mov	r5, r0
 80011a0:	b118      	cbz	r0, 80011aa <__swbuf_r+0x12>
 80011a2:	6983      	ldr	r3, [r0, #24]
 80011a4:	b90b      	cbnz	r3, 80011aa <__swbuf_r+0x12>
 80011a6:	f7ff fb81 	bl	80008ac <__sinit>
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <__swbuf_r+0x98>)
 80011ac:	429c      	cmp	r4, r3
 80011ae:	d12b      	bne.n	8001208 <__swbuf_r+0x70>
 80011b0:	686c      	ldr	r4, [r5, #4]
 80011b2:	69a3      	ldr	r3, [r4, #24]
 80011b4:	60a3      	str	r3, [r4, #8]
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	071a      	lsls	r2, r3, #28
 80011ba:	d52f      	bpl.n	800121c <__swbuf_r+0x84>
 80011bc:	6923      	ldr	r3, [r4, #16]
 80011be:	b36b      	cbz	r3, 800121c <__swbuf_r+0x84>
 80011c0:	6923      	ldr	r3, [r4, #16]
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	1ac0      	subs	r0, r0, r3
 80011c6:	6963      	ldr	r3, [r4, #20]
 80011c8:	b2f6      	uxtb	r6, r6
 80011ca:	4283      	cmp	r3, r0
 80011cc:	4637      	mov	r7, r6
 80011ce:	dc04      	bgt.n	80011da <__swbuf_r+0x42>
 80011d0:	4621      	mov	r1, r4
 80011d2:	4628      	mov	r0, r5
 80011d4:	f000 f948 	bl	8001468 <_fflush_r>
 80011d8:	bb30      	cbnz	r0, 8001228 <__swbuf_r+0x90>
 80011da:	68a3      	ldr	r3, [r4, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60a3      	str	r3, [r4, #8]
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	6022      	str	r2, [r4, #0]
 80011e6:	701e      	strb	r6, [r3, #0]
 80011e8:	6963      	ldr	r3, [r4, #20]
 80011ea:	3001      	adds	r0, #1
 80011ec:	4283      	cmp	r3, r0
 80011ee:	d004      	beq.n	80011fa <__swbuf_r+0x62>
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	07db      	lsls	r3, r3, #31
 80011f4:	d506      	bpl.n	8001204 <__swbuf_r+0x6c>
 80011f6:	2e0a      	cmp	r6, #10
 80011f8:	d104      	bne.n	8001204 <__swbuf_r+0x6c>
 80011fa:	4621      	mov	r1, r4
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 f933 	bl	8001468 <_fflush_r>
 8001202:	b988      	cbnz	r0, 8001228 <__swbuf_r+0x90>
 8001204:	4638      	mov	r0, r7
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <__swbuf_r+0x9c>)
 800120a:	429c      	cmp	r4, r3
 800120c:	d101      	bne.n	8001212 <__swbuf_r+0x7a>
 800120e:	68ac      	ldr	r4, [r5, #8]
 8001210:	e7cf      	b.n	80011b2 <__swbuf_r+0x1a>
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <__swbuf_r+0xa0>)
 8001214:	429c      	cmp	r4, r3
 8001216:	bf08      	it	eq
 8001218:	68ec      	ldreq	r4, [r5, #12]
 800121a:	e7ca      	b.n	80011b2 <__swbuf_r+0x1a>
 800121c:	4621      	mov	r1, r4
 800121e:	4628      	mov	r0, r5
 8001220:	f000 f81e 	bl	8001260 <__swsetup_r>
 8001224:	2800      	cmp	r0, #0
 8001226:	d0cb      	beq.n	80011c0 <__swbuf_r+0x28>
 8001228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800122c:	e7ea      	b.n	8001204 <__swbuf_r+0x6c>
 800122e:	bf00      	nop
 8001230:	0800172c 	.word	0x0800172c
 8001234:	0800174c 	.word	0x0800174c
 8001238:	0800170c 	.word	0x0800170c

0800123c <_write_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	4d07      	ldr	r5, [pc, #28]	; (800125c <_write_r+0x20>)
 8001240:	4604      	mov	r4, r0
 8001242:	4608      	mov	r0, r1
 8001244:	4611      	mov	r1, r2
 8001246:	2200      	movs	r2, #0
 8001248:	602a      	str	r2, [r5, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	f7ff f9b5 	bl	80005ba <_write>
 8001250:	1c43      	adds	r3, r0, #1
 8001252:	d102      	bne.n	800125a <_write_r+0x1e>
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	b103      	cbz	r3, 800125a <_write_r+0x1e>
 8001258:	6023      	str	r3, [r4, #0]
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	20000098 	.word	0x20000098

08001260 <__swsetup_r>:
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <__swsetup_r+0xcc>)
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	681d      	ldr	r5, [r3, #0]
 8001266:	4606      	mov	r6, r0
 8001268:	460c      	mov	r4, r1
 800126a:	b125      	cbz	r5, 8001276 <__swsetup_r+0x16>
 800126c:	69ab      	ldr	r3, [r5, #24]
 800126e:	b913      	cbnz	r3, 8001276 <__swsetup_r+0x16>
 8001270:	4628      	mov	r0, r5
 8001272:	f7ff fb1b 	bl	80008ac <__sinit>
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <__swsetup_r+0xd0>)
 8001278:	429c      	cmp	r4, r3
 800127a:	d10f      	bne.n	800129c <__swsetup_r+0x3c>
 800127c:	686c      	ldr	r4, [r5, #4]
 800127e:	89a3      	ldrh	r3, [r4, #12]
 8001280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001284:	0719      	lsls	r1, r3, #28
 8001286:	d42c      	bmi.n	80012e2 <__swsetup_r+0x82>
 8001288:	06dd      	lsls	r5, r3, #27
 800128a:	d411      	bmi.n	80012b0 <__swsetup_r+0x50>
 800128c:	2309      	movs	r3, #9
 800128e:	6033      	str	r3, [r6, #0]
 8001290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001294:	81a3      	strh	r3, [r4, #12]
 8001296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129a:	e03e      	b.n	800131a <__swsetup_r+0xba>
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <__swsetup_r+0xd4>)
 800129e:	429c      	cmp	r4, r3
 80012a0:	d101      	bne.n	80012a6 <__swsetup_r+0x46>
 80012a2:	68ac      	ldr	r4, [r5, #8]
 80012a4:	e7eb      	b.n	800127e <__swsetup_r+0x1e>
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <__swsetup_r+0xd8>)
 80012a8:	429c      	cmp	r4, r3
 80012aa:	bf08      	it	eq
 80012ac:	68ec      	ldreq	r4, [r5, #12]
 80012ae:	e7e6      	b.n	800127e <__swsetup_r+0x1e>
 80012b0:	0758      	lsls	r0, r3, #29
 80012b2:	d512      	bpl.n	80012da <__swsetup_r+0x7a>
 80012b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012b6:	b141      	cbz	r1, 80012ca <__swsetup_r+0x6a>
 80012b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012bc:	4299      	cmp	r1, r3
 80012be:	d002      	beq.n	80012c6 <__swsetup_r+0x66>
 80012c0:	4630      	mov	r0, r6
 80012c2:	f000 f991 	bl	80015e8 <_free_r>
 80012c6:	2300      	movs	r3, #0
 80012c8:	6363      	str	r3, [r4, #52]	; 0x34
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012d0:	81a3      	strh	r3, [r4, #12]
 80012d2:	2300      	movs	r3, #0
 80012d4:	6063      	str	r3, [r4, #4]
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	81a3      	strh	r3, [r4, #12]
 80012e2:	6923      	ldr	r3, [r4, #16]
 80012e4:	b94b      	cbnz	r3, 80012fa <__swsetup_r+0x9a>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f0:	d003      	beq.n	80012fa <__swsetup_r+0x9a>
 80012f2:	4621      	mov	r1, r4
 80012f4:	4630      	mov	r0, r6
 80012f6:	f000 f92b 	bl	8001550 <__smakebuf_r>
 80012fa:	89a0      	ldrh	r0, [r4, #12]
 80012fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001300:	f010 0301 	ands.w	r3, r0, #1
 8001304:	d00a      	beq.n	800131c <__swsetup_r+0xbc>
 8001306:	2300      	movs	r3, #0
 8001308:	60a3      	str	r3, [r4, #8]
 800130a:	6963      	ldr	r3, [r4, #20]
 800130c:	425b      	negs	r3, r3
 800130e:	61a3      	str	r3, [r4, #24]
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	b943      	cbnz	r3, 8001326 <__swsetup_r+0xc6>
 8001314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001318:	d1ba      	bne.n	8001290 <__swsetup_r+0x30>
 800131a:	bd70      	pop	{r4, r5, r6, pc}
 800131c:	0781      	lsls	r1, r0, #30
 800131e:	bf58      	it	pl
 8001320:	6963      	ldrpl	r3, [r4, #20]
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	e7f4      	b.n	8001310 <__swsetup_r+0xb0>
 8001326:	2000      	movs	r0, #0
 8001328:	e7f7      	b.n	800131a <__swsetup_r+0xba>
 800132a:	bf00      	nop
 800132c:	20000004 	.word	0x20000004
 8001330:	0800172c 	.word	0x0800172c
 8001334:	0800174c 	.word	0x0800174c
 8001338:	0800170c 	.word	0x0800170c

0800133c <_close_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4d06      	ldr	r5, [pc, #24]	; (8001358 <_close_r+0x1c>)
 8001340:	2300      	movs	r3, #0
 8001342:	4604      	mov	r4, r0
 8001344:	4608      	mov	r0, r1
 8001346:	602b      	str	r3, [r5, #0]
 8001348:	f7ff f953 	bl	80005f2 <_close>
 800134c:	1c43      	adds	r3, r0, #1
 800134e:	d102      	bne.n	8001356 <_close_r+0x1a>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	b103      	cbz	r3, 8001356 <_close_r+0x1a>
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	bd38      	pop	{r3, r4, r5, pc}
 8001358:	20000098 	.word	0x20000098

0800135c <__sflush_r>:
 800135c:	898a      	ldrh	r2, [r1, #12]
 800135e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001362:	4605      	mov	r5, r0
 8001364:	0710      	lsls	r0, r2, #28
 8001366:	460c      	mov	r4, r1
 8001368:	d458      	bmi.n	800141c <__sflush_r+0xc0>
 800136a:	684b      	ldr	r3, [r1, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dc05      	bgt.n	800137c <__sflush_r+0x20>
 8001370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	dc02      	bgt.n	800137c <__sflush_r+0x20>
 8001376:	2000      	movs	r0, #0
 8001378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800137e:	2e00      	cmp	r6, #0
 8001380:	d0f9      	beq.n	8001376 <__sflush_r+0x1a>
 8001382:	2300      	movs	r3, #0
 8001384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001388:	682f      	ldr	r7, [r5, #0]
 800138a:	602b      	str	r3, [r5, #0]
 800138c:	d032      	beq.n	80013f4 <__sflush_r+0x98>
 800138e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	075a      	lsls	r2, r3, #29
 8001394:	d505      	bpl.n	80013a2 <__sflush_r+0x46>
 8001396:	6863      	ldr	r3, [r4, #4]
 8001398:	1ac0      	subs	r0, r0, r3
 800139a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800139c:	b10b      	cbz	r3, 80013a2 <__sflush_r+0x46>
 800139e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a0:	1ac0      	subs	r0, r0, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	4602      	mov	r2, r0
 80013a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013a8:	6a21      	ldr	r1, [r4, #32]
 80013aa:	4628      	mov	r0, r5
 80013ac:	47b0      	blx	r6
 80013ae:	1c43      	adds	r3, r0, #1
 80013b0:	89a3      	ldrh	r3, [r4, #12]
 80013b2:	d106      	bne.n	80013c2 <__sflush_r+0x66>
 80013b4:	6829      	ldr	r1, [r5, #0]
 80013b6:	291d      	cmp	r1, #29
 80013b8:	d82c      	bhi.n	8001414 <__sflush_r+0xb8>
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <__sflush_r+0x108>)
 80013bc:	40ca      	lsrs	r2, r1
 80013be:	07d6      	lsls	r6, r2, #31
 80013c0:	d528      	bpl.n	8001414 <__sflush_r+0xb8>
 80013c2:	2200      	movs	r2, #0
 80013c4:	6062      	str	r2, [r4, #4]
 80013c6:	04d9      	lsls	r1, r3, #19
 80013c8:	6922      	ldr	r2, [r4, #16]
 80013ca:	6022      	str	r2, [r4, #0]
 80013cc:	d504      	bpl.n	80013d8 <__sflush_r+0x7c>
 80013ce:	1c42      	adds	r2, r0, #1
 80013d0:	d101      	bne.n	80013d6 <__sflush_r+0x7a>
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	b903      	cbnz	r3, 80013d8 <__sflush_r+0x7c>
 80013d6:	6560      	str	r0, [r4, #84]	; 0x54
 80013d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013da:	602f      	str	r7, [r5, #0]
 80013dc:	2900      	cmp	r1, #0
 80013de:	d0ca      	beq.n	8001376 <__sflush_r+0x1a>
 80013e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d002      	beq.n	80013ee <__sflush_r+0x92>
 80013e8:	4628      	mov	r0, r5
 80013ea:	f000 f8fd 	bl	80015e8 <_free_r>
 80013ee:	2000      	movs	r0, #0
 80013f0:	6360      	str	r0, [r4, #52]	; 0x34
 80013f2:	e7c1      	b.n	8001378 <__sflush_r+0x1c>
 80013f4:	6a21      	ldr	r1, [r4, #32]
 80013f6:	2301      	movs	r3, #1
 80013f8:	4628      	mov	r0, r5
 80013fa:	47b0      	blx	r6
 80013fc:	1c41      	adds	r1, r0, #1
 80013fe:	d1c7      	bne.n	8001390 <__sflush_r+0x34>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0c4      	beq.n	8001390 <__sflush_r+0x34>
 8001406:	2b1d      	cmp	r3, #29
 8001408:	d001      	beq.n	800140e <__sflush_r+0xb2>
 800140a:	2b16      	cmp	r3, #22
 800140c:	d101      	bne.n	8001412 <__sflush_r+0xb6>
 800140e:	602f      	str	r7, [r5, #0]
 8001410:	e7b1      	b.n	8001376 <__sflush_r+0x1a>
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001418:	81a3      	strh	r3, [r4, #12]
 800141a:	e7ad      	b.n	8001378 <__sflush_r+0x1c>
 800141c:	690f      	ldr	r7, [r1, #16]
 800141e:	2f00      	cmp	r7, #0
 8001420:	d0a9      	beq.n	8001376 <__sflush_r+0x1a>
 8001422:	0793      	lsls	r3, r2, #30
 8001424:	680e      	ldr	r6, [r1, #0]
 8001426:	bf08      	it	eq
 8001428:	694b      	ldreq	r3, [r1, #20]
 800142a:	600f      	str	r7, [r1, #0]
 800142c:	bf18      	it	ne
 800142e:	2300      	movne	r3, #0
 8001430:	eba6 0807 	sub.w	r8, r6, r7
 8001434:	608b      	str	r3, [r1, #8]
 8001436:	f1b8 0f00 	cmp.w	r8, #0
 800143a:	dd9c      	ble.n	8001376 <__sflush_r+0x1a>
 800143c:	6a21      	ldr	r1, [r4, #32]
 800143e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001440:	4643      	mov	r3, r8
 8001442:	463a      	mov	r2, r7
 8001444:	4628      	mov	r0, r5
 8001446:	47b0      	blx	r6
 8001448:	2800      	cmp	r0, #0
 800144a:	dc06      	bgt.n	800145a <__sflush_r+0xfe>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001452:	81a3      	strh	r3, [r4, #12]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001458:	e78e      	b.n	8001378 <__sflush_r+0x1c>
 800145a:	4407      	add	r7, r0
 800145c:	eba8 0800 	sub.w	r8, r8, r0
 8001460:	e7e9      	b.n	8001436 <__sflush_r+0xda>
 8001462:	bf00      	nop
 8001464:	20400001 	.word	0x20400001

08001468 <_fflush_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	690b      	ldr	r3, [r1, #16]
 800146c:	4605      	mov	r5, r0
 800146e:	460c      	mov	r4, r1
 8001470:	b913      	cbnz	r3, 8001478 <_fflush_r+0x10>
 8001472:	2500      	movs	r5, #0
 8001474:	4628      	mov	r0, r5
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	b118      	cbz	r0, 8001482 <_fflush_r+0x1a>
 800147a:	6983      	ldr	r3, [r0, #24]
 800147c:	b90b      	cbnz	r3, 8001482 <_fflush_r+0x1a>
 800147e:	f7ff fa15 	bl	80008ac <__sinit>
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <_fflush_r+0x6c>)
 8001484:	429c      	cmp	r4, r3
 8001486:	d11b      	bne.n	80014c0 <_fflush_r+0x58>
 8001488:	686c      	ldr	r4, [r5, #4]
 800148a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0ef      	beq.n	8001472 <_fflush_r+0xa>
 8001492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001494:	07d0      	lsls	r0, r2, #31
 8001496:	d404      	bmi.n	80014a2 <_fflush_r+0x3a>
 8001498:	0599      	lsls	r1, r3, #22
 800149a:	d402      	bmi.n	80014a2 <_fflush_r+0x3a>
 800149c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800149e:	f7ff faa3 	bl	80009e8 <__retarget_lock_acquire_recursive>
 80014a2:	4628      	mov	r0, r5
 80014a4:	4621      	mov	r1, r4
 80014a6:	f7ff ff59 	bl	800135c <__sflush_r>
 80014aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ac:	07da      	lsls	r2, r3, #31
 80014ae:	4605      	mov	r5, r0
 80014b0:	d4e0      	bmi.n	8001474 <_fflush_r+0xc>
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	059b      	lsls	r3, r3, #22
 80014b6:	d4dd      	bmi.n	8001474 <_fflush_r+0xc>
 80014b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ba:	f7ff fa96 	bl	80009ea <__retarget_lock_release_recursive>
 80014be:	e7d9      	b.n	8001474 <_fflush_r+0xc>
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <_fflush_r+0x70>)
 80014c2:	429c      	cmp	r4, r3
 80014c4:	d101      	bne.n	80014ca <_fflush_r+0x62>
 80014c6:	68ac      	ldr	r4, [r5, #8]
 80014c8:	e7df      	b.n	800148a <_fflush_r+0x22>
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <_fflush_r+0x74>)
 80014cc:	429c      	cmp	r4, r3
 80014ce:	bf08      	it	eq
 80014d0:	68ec      	ldreq	r4, [r5, #12]
 80014d2:	e7da      	b.n	800148a <_fflush_r+0x22>
 80014d4:	0800172c 	.word	0x0800172c
 80014d8:	0800174c 	.word	0x0800174c
 80014dc:	0800170c 	.word	0x0800170c

080014e0 <_lseek_r>:
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4d07      	ldr	r5, [pc, #28]	; (8001500 <_lseek_r+0x20>)
 80014e4:	4604      	mov	r4, r0
 80014e6:	4608      	mov	r0, r1
 80014e8:	4611      	mov	r1, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	602a      	str	r2, [r5, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f7ff f8a6 	bl	8000640 <_lseek>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_lseek_r+0x1e>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_lseek_r+0x1e>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	20000098 	.word	0x20000098

08001504 <__swhatbuf_r>:
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	460e      	mov	r6, r1
 8001508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800150c:	2900      	cmp	r1, #0
 800150e:	b096      	sub	sp, #88	; 0x58
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	da08      	bge.n	8001528 <__swhatbuf_r+0x24>
 8001516:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	602a      	str	r2, [r5, #0]
 800151e:	061a      	lsls	r2, r3, #24
 8001520:	d410      	bmi.n	8001544 <__swhatbuf_r+0x40>
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	e00e      	b.n	8001546 <__swhatbuf_r+0x42>
 8001528:	466a      	mov	r2, sp
 800152a:	f000 f8bb 	bl	80016a4 <_fstat_r>
 800152e:	2800      	cmp	r0, #0
 8001530:	dbf1      	blt.n	8001516 <__swhatbuf_r+0x12>
 8001532:	9a01      	ldr	r2, [sp, #4]
 8001534:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001538:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800153c:	425a      	negs	r2, r3
 800153e:	415a      	adcs	r2, r3
 8001540:	602a      	str	r2, [r5, #0]
 8001542:	e7ee      	b.n	8001522 <__swhatbuf_r+0x1e>
 8001544:	2340      	movs	r3, #64	; 0x40
 8001546:	2000      	movs	r0, #0
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	b016      	add	sp, #88	; 0x58
 800154c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001550 <__smakebuf_r>:
 8001550:	898b      	ldrh	r3, [r1, #12]
 8001552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001554:	079d      	lsls	r5, r3, #30
 8001556:	4606      	mov	r6, r0
 8001558:	460c      	mov	r4, r1
 800155a:	d507      	bpl.n	800156c <__smakebuf_r+0x1c>
 800155c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	6123      	str	r3, [r4, #16]
 8001564:	2301      	movs	r3, #1
 8001566:	6163      	str	r3, [r4, #20]
 8001568:	b002      	add	sp, #8
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	ab01      	add	r3, sp, #4
 800156e:	466a      	mov	r2, sp
 8001570:	f7ff ffc8 	bl	8001504 <__swhatbuf_r>
 8001574:	9900      	ldr	r1, [sp, #0]
 8001576:	4605      	mov	r5, r0
 8001578:	4630      	mov	r0, r6
 800157a:	f7ff fa57 	bl	8000a2c <_malloc_r>
 800157e:	b948      	cbnz	r0, 8001594 <__smakebuf_r+0x44>
 8001580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001584:	059a      	lsls	r2, r3, #22
 8001586:	d4ef      	bmi.n	8001568 <__smakebuf_r+0x18>
 8001588:	f023 0303 	bic.w	r3, r3, #3
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	81a3      	strh	r3, [r4, #12]
 8001592:	e7e3      	b.n	800155c <__smakebuf_r+0xc>
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <__smakebuf_r+0x7c>)
 8001596:	62b3      	str	r3, [r6, #40]	; 0x28
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	6020      	str	r0, [r4, #0]
 800159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a0:	81a3      	strh	r3, [r4, #12]
 80015a2:	9b00      	ldr	r3, [sp, #0]
 80015a4:	6163      	str	r3, [r4, #20]
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	6120      	str	r0, [r4, #16]
 80015aa:	b15b      	cbz	r3, 80015c4 <__smakebuf_r+0x74>
 80015ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015b0:	4630      	mov	r0, r6
 80015b2:	f000 f889 	bl	80016c8 <_isatty_r>
 80015b6:	b128      	cbz	r0, 80015c4 <__smakebuf_r+0x74>
 80015b8:	89a3      	ldrh	r3, [r4, #12]
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	81a3      	strh	r3, [r4, #12]
 80015c4:	89a0      	ldrh	r0, [r4, #12]
 80015c6:	4305      	orrs	r5, r0
 80015c8:	81a5      	strh	r5, [r4, #12]
 80015ca:	e7cd      	b.n	8001568 <__smakebuf_r+0x18>
 80015cc:	08000845 	.word	0x08000845

080015d0 <__malloc_lock>:
 80015d0:	4801      	ldr	r0, [pc, #4]	; (80015d8 <__malloc_lock+0x8>)
 80015d2:	f7ff ba09 	b.w	80009e8 <__retarget_lock_acquire_recursive>
 80015d6:	bf00      	nop
 80015d8:	2000008c 	.word	0x2000008c

080015dc <__malloc_unlock>:
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <__malloc_unlock+0x8>)
 80015de:	f7ff ba04 	b.w	80009ea <__retarget_lock_release_recursive>
 80015e2:	bf00      	nop
 80015e4:	2000008c 	.word	0x2000008c

080015e8 <_free_r>:
 80015e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015ea:	2900      	cmp	r1, #0
 80015ec:	d044      	beq.n	8001678 <_free_r+0x90>
 80015ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015f2:	9001      	str	r0, [sp, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f1a1 0404 	sub.w	r4, r1, #4
 80015fa:	bfb8      	it	lt
 80015fc:	18e4      	addlt	r4, r4, r3
 80015fe:	f7ff ffe7 	bl	80015d0 <__malloc_lock>
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <_free_r+0x94>)
 8001604:	9801      	ldr	r0, [sp, #4]
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	b933      	cbnz	r3, 8001618 <_free_r+0x30>
 800160a:	6063      	str	r3, [r4, #4]
 800160c:	6014      	str	r4, [r2, #0]
 800160e:	b003      	add	sp, #12
 8001610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001614:	f7ff bfe2 	b.w	80015dc <__malloc_unlock>
 8001618:	42a3      	cmp	r3, r4
 800161a:	d908      	bls.n	800162e <_free_r+0x46>
 800161c:	6825      	ldr	r5, [r4, #0]
 800161e:	1961      	adds	r1, r4, r5
 8001620:	428b      	cmp	r3, r1
 8001622:	bf01      	itttt	eq
 8001624:	6819      	ldreq	r1, [r3, #0]
 8001626:	685b      	ldreq	r3, [r3, #4]
 8001628:	1949      	addeq	r1, r1, r5
 800162a:	6021      	streq	r1, [r4, #0]
 800162c:	e7ed      	b.n	800160a <_free_r+0x22>
 800162e:	461a      	mov	r2, r3
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	b10b      	cbz	r3, 8001638 <_free_r+0x50>
 8001634:	42a3      	cmp	r3, r4
 8001636:	d9fa      	bls.n	800162e <_free_r+0x46>
 8001638:	6811      	ldr	r1, [r2, #0]
 800163a:	1855      	adds	r5, r2, r1
 800163c:	42a5      	cmp	r5, r4
 800163e:	d10b      	bne.n	8001658 <_free_r+0x70>
 8001640:	6824      	ldr	r4, [r4, #0]
 8001642:	4421      	add	r1, r4
 8001644:	1854      	adds	r4, r2, r1
 8001646:	42a3      	cmp	r3, r4
 8001648:	6011      	str	r1, [r2, #0]
 800164a:	d1e0      	bne.n	800160e <_free_r+0x26>
 800164c:	681c      	ldr	r4, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	6053      	str	r3, [r2, #4]
 8001652:	4421      	add	r1, r4
 8001654:	6011      	str	r1, [r2, #0]
 8001656:	e7da      	b.n	800160e <_free_r+0x26>
 8001658:	d902      	bls.n	8001660 <_free_r+0x78>
 800165a:	230c      	movs	r3, #12
 800165c:	6003      	str	r3, [r0, #0]
 800165e:	e7d6      	b.n	800160e <_free_r+0x26>
 8001660:	6825      	ldr	r5, [r4, #0]
 8001662:	1961      	adds	r1, r4, r5
 8001664:	428b      	cmp	r3, r1
 8001666:	bf04      	itt	eq
 8001668:	6819      	ldreq	r1, [r3, #0]
 800166a:	685b      	ldreq	r3, [r3, #4]
 800166c:	6063      	str	r3, [r4, #4]
 800166e:	bf04      	itt	eq
 8001670:	1949      	addeq	r1, r1, r5
 8001672:	6021      	streq	r1, [r4, #0]
 8001674:	6054      	str	r4, [r2, #4]
 8001676:	e7ca      	b.n	800160e <_free_r+0x26>
 8001678:	b003      	add	sp, #12
 800167a:	bd30      	pop	{r4, r5, pc}
 800167c:	20000090 	.word	0x20000090

08001680 <_read_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4d07      	ldr	r5, [pc, #28]	; (80016a0 <_read_r+0x20>)
 8001684:	4604      	mov	r4, r0
 8001686:	4608      	mov	r0, r1
 8001688:	4611      	mov	r1, r2
 800168a:	2200      	movs	r2, #0
 800168c:	602a      	str	r2, [r5, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	f7fe ff76 	bl	8000580 <_read>
 8001694:	1c43      	adds	r3, r0, #1
 8001696:	d102      	bne.n	800169e <_read_r+0x1e>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b103      	cbz	r3, 800169e <_read_r+0x1e>
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	bd38      	pop	{r3, r4, r5, pc}
 80016a0:	20000098 	.word	0x20000098

080016a4 <_fstat_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4d07      	ldr	r5, [pc, #28]	; (80016c4 <_fstat_r+0x20>)
 80016a8:	2300      	movs	r3, #0
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	602b      	str	r3, [r5, #0]
 80016b2:	f7fe ffaa 	bl	800060a <_fstat>
 80016b6:	1c43      	adds	r3, r0, #1
 80016b8:	d102      	bne.n	80016c0 <_fstat_r+0x1c>
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	b103      	cbz	r3, 80016c0 <_fstat_r+0x1c>
 80016be:	6023      	str	r3, [r4, #0]
 80016c0:	bd38      	pop	{r3, r4, r5, pc}
 80016c2:	bf00      	nop
 80016c4:	20000098 	.word	0x20000098

080016c8 <_isatty_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4d06      	ldr	r5, [pc, #24]	; (80016e4 <_isatty_r+0x1c>)
 80016cc:	2300      	movs	r3, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	602b      	str	r3, [r5, #0]
 80016d4:	f7fe ffa9 	bl	800062a <_isatty>
 80016d8:	1c43      	adds	r3, r0, #1
 80016da:	d102      	bne.n	80016e2 <_isatty_r+0x1a>
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	b103      	cbz	r3, 80016e2 <_isatty_r+0x1a>
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	20000098 	.word	0x20000098

080016e8 <_init>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr

080016f4 <_fini>:
 80016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f6:	bf00      	nop
 80016f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fa:	bc08      	pop	{r3}
 80016fc:	469e      	mov	lr, r3
 80016fe:	4770      	bx	lr
