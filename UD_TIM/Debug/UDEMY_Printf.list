
UDEMY_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fc4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800115c  0800115c  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011cc  080011cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080011cc  080011cc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011cc  080011cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011d0  080011d0  000111d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080011d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  0800123c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800123c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002759  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a75  00000000  00000000  000227f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00023268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00023580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b90  00000000  00000000  00023810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c4e  00000000  00000000  000393a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ece  00000000  00000000  0003cfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001094  00000000  00000000  000c0f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001144 	.word	0x08001144

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08001144 	.word	0x08001144

080001d8 <uart2_TX_init>:
#include "MyUART.h"



void uart2_TX_init()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	/*****************Configure uart gpio pin ******************/
	/*Enable clock access to gpioa*/
	//Enable GPIOA Port
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <uart2_TX_init+0xdc>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a34      	ldr	r2, [pc, #208]	; (80002b4 <uart2_TX_init+0xdc>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set PA2 mode to alternate function mode*/

	//Set alternate function for PA2
	GPIOA->MODER &=~(1U<<4);
 80001e8:	4b33      	ldr	r3, [pc, #204]	; (80002b8 <uart2_TX_init+0xe0>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a32      	ldr	r2, [pc, #200]	; (80002b8 <uart2_TX_init+0xe0>)
 80001ee:	f023 0310 	bic.w	r3, r3, #16
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80001f4:	4b30      	ldr	r3, [pc, #192]	; (80002b8 <uart2_TX_init+0xe0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a2f      	ldr	r2, [pc, #188]	; (80002b8 <uart2_TX_init+0xe0>)
 80001fa:	f043 0320 	orr.w	r3, r3, #32
 80001fe:	6013      	str	r3, [r2, #0]

	//Set alternate function for PA3
	GPIOA->MODER &=~(1U<<4);
 8000200:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <uart2_TX_init+0xe0>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a2c      	ldr	r2, [pc, #176]	; (80002b8 <uart2_TX_init+0xe0>)
 8000206:	f023 0310 	bic.w	r3, r3, #16
 800020a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 800020c:	4b2a      	ldr	r3, [pc, #168]	; (80002b8 <uart2_TX_init+0xe0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a29      	ldr	r2, [pc, #164]	; (80002b8 <uart2_TX_init+0xe0>)
 8000212:	f043 0320 	orr.w	r3, r3, #32
 8000216:	6013      	str	r3, [r2, #0]


	//Set alternate function register AF7 (0111) for PA2
	GPIOA->AFR[0] |= (1U<<8);
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <uart2_TX_init+0xe0>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a26      	ldr	r2, [pc, #152]	; (80002b8 <uart2_TX_init+0xe0>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <uart2_TX_init+0xe0>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a23      	ldr	r2, [pc, #140]	; (80002b8 <uart2_TX_init+0xe0>)
 800022a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <uart2_TX_init+0xe0>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <uart2_TX_init+0xe0>)
 8000236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <uart2_TX_init+0xe0>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <uart2_TX_init+0xe0>)
 8000242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000246:	6213      	str	r3, [r2, #32]

	//Set alternate function register AF7 (0111) for PA3
	GPIOA->AFR[0] |= (1U<<12);
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <uart2_TX_init+0xe0>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <uart2_TX_init+0xe0>)
 800024e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <uart2_TX_init+0xe0>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <uart2_TX_init+0xe0>)
 800025a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <uart2_TX_init+0xe0>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <uart2_TX_init+0xe0>)
 8000266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800026a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <uart2_TX_init+0xe0>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <uart2_TX_init+0xe0>)
 8000272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000276:	6213      	str	r3, [r2, #32]



	/*****************Configure uart module*********************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= UART2EN;
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <uart2_TX_init+0xdc>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <uart2_TX_init+0xdc>)
 800027e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000282:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000288:	490c      	ldr	r1, [pc, #48]	; (80002bc <uart2_TX_init+0xe4>)
 800028a:	480d      	ldr	r0, [pc, #52]	; (80002c0 <uart2_TX_init+0xe8>)
 800028c:	f000 f83e 	bl	800030c <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE;	//Transmitter enable & clearing
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <uart2_TX_init+0xe8>)
 8000292:	2208      	movs	r2, #8
 8000294:	60da      	str	r2, [r3, #12]
	//USART2->CR1 |=CR1_RE;	//Receiver enable

	/*Enable uart module*/
	USART2->CR1 |=CR1_UE;
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <uart2_TX_init+0xe8>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <uart2_TX_init+0xe8>)
 800029c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a0:	60d3      	str	r3, [r2, #12]

	/*Enabnle USART Word Length*/
	USART2->CR1 &= ~(1U<<12);
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <uart2_TX_init+0xe8>)
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <uart2_TX_init+0xe8>)
 80002a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002ac:	60d3      	str	r3, [r2, #12]


}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000
 80002bc:	00f42400 	.word	0x00f42400
 80002c0:	40004400 	.word	0x40004400

080002c4 <__io_putchar>:

  int __io_putchar(int ch)
	{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
		uart_write(ch);
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f000 f805 	bl	80002dc <uart_write>
		return ch;
 80002d2:	687b      	ldr	r3, [r7, #4]
	}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <uart_write>:


void uart_write(int ch)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	//Make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE)){};
 80002e4:	bf00      	nop
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <uart_write+0x2c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <uart_write+0xa>
	//Write transmit data register
	USART2->DR = (ch & 0xFFU);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <uart_write+0x2c>)
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	6053      	str	r3, [r2, #4]

}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40004400 	.word	0x40004400

0800030c <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClock, uint32_t Baudrate)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_br(PeriphClock,Baudrate);
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	68b8      	ldr	r0, [r7, #8]
 800031c:	f000 f808 	bl	8000330 <compute_uart_br>
 8000320:	4603      	mov	r3, r0
 8000322:	461a      	mov	r2, r3
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	609a      	str	r2, [r3, #8]
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <compute_uart_br>:

static uint16_t compute_uart_br(uint32_t PeriphClock, uint32_t Baudrate)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	return ((PeriphClock+ (Baudrate/2U))/Baudrate);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	085a      	lsrs	r2, r3, #1
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	441a      	add	r2, r3
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	b29b      	uxth	r3, r3
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
	...

08000358 <MyGPIOInit>:


#include "Myconfig.h"

void MyGPIOInit()
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

	//Enable OTGUFEN PORT
	RCC->AHB2ENR |= (1U<<7);
 800035c:	4b32      	ldr	r3, [pc, #200]	; (8000428 <MyGPIOInit+0xd0>)
 800035e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000360:	4a31      	ldr	r2, [pc, #196]	; (8000428 <MyGPIOInit+0xd0>)
 8000362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000366:	6353      	str	r3, [r2, #52]	; 0x34

	//Enable GPIOD Port
	RCC->AHB1ENR |= GPIODEN;
 8000368:	4b2f      	ldr	r3, [pc, #188]	; (8000428 <MyGPIOInit+0xd0>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a2e      	ldr	r2, [pc, #184]	; (8000428 <MyGPIOInit+0xd0>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6313      	str	r3, [r2, #48]	; 0x30



	//Enable pin PD12 output mode
	GPIOD->MODER |=(1U<<24);
 8000374:	4b2d      	ldr	r3, [pc, #180]	; (800042c <MyGPIOInit+0xd4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a2c      	ldr	r2, [pc, #176]	; (800042c <MyGPIOInit+0xd4>)
 800037a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800037e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<25);
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <MyGPIOInit+0xd4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a29      	ldr	r2, [pc, #164]	; (800042c <MyGPIOInit+0xd4>)
 8000386:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800038a:	6013      	str	r3, [r2, #0]

	//Enable pin PD13 output mode
	GPIOD->MODER |=(1U<<26);
 800038c:	4b27      	ldr	r3, [pc, #156]	; (800042c <MyGPIOInit+0xd4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a26      	ldr	r2, [pc, #152]	; (800042c <MyGPIOInit+0xd4>)
 8000392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000396:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 8000398:	4b24      	ldr	r3, [pc, #144]	; (800042c <MyGPIOInit+0xd4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a23      	ldr	r2, [pc, #140]	; (800042c <MyGPIOInit+0xd4>)
 800039e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80003a2:	6013      	str	r3, [r2, #0]

	//Enable pin PD14 output mode
	GPIOD->MODER |=(1U<<28);
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <MyGPIOInit+0xd4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a20      	ldr	r2, [pc, #128]	; (800042c <MyGPIOInit+0xd4>)
 80003aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ae:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<29);
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MyGPIOInit+0xd4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MyGPIOInit+0xd4>)
 80003b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003ba:	6013      	str	r3, [r2, #0]

	//Enable pin PD15 output mode
	GPIOD->MODER |=(1U<<30);
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MyGPIOInit+0xd4>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	; (800042c <MyGPIOInit+0xd4>)
 80003c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003c6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<31);
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MyGPIOInit+0xd4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MyGPIOInit+0xd4>)
 80003ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80003d2:	6013      	str	r3, [r2, #0]

	//Enable PA0 Input mode
	GPIOA->MODER &=~(1U<<0);
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MyGPIOInit+0xd8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <MyGPIOInit+0xd8>)
 80003da:	f023 0301 	bic.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MyGPIOInit+0xd8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MyGPIOInit+0xd8>)
 80003e6:	f023 0302 	bic.w	r3, r3, #2
 80003ea:	6013      	str	r3, [r2, #0]

	//Enable PA11 Alternate function
    GPIOA->MODER |= (1U<<23);
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MyGPIOInit+0xd8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <MyGPIOInit+0xd8>)
 80003f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<22);
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <MyGPIOInit+0xd8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <MyGPIOInit+0xd8>)
 80003fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000402:	6013      	str	r3, [r2, #0]

	//Enable PA12 Alternate function
	GPIOA->MODER |= (1U<<25);
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <MyGPIOInit+0xd8>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a09      	ldr	r2, [pc, #36]	; (8000430 <MyGPIOInit+0xd8>)
 800040a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800040e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<24);
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <MyGPIOInit+0xd8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <MyGPIOInit+0xd8>)
 8000416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800041a:	6013      	str	r3, [r2, #0]

}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800
 800042c:	40020c00 	.word	0x40020c00
 8000430:	40020000 	.word	0x40020000

08000434 <GPIO_PIN_TOOGLE>:

}


void GPIO_PIN_TOOGLE(GPIO_TypeDef *PORT,uint16_t GPIO_PIN)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]

	PORT->ODR ^=GPIO_PIN;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	887b      	ldrh	r3, [r7, #2]
 8000446:	405a      	eors	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	615a      	str	r2, [r3, #20]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <main>:
//		return ch;
//	}


int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
	int i=0;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
//  HAL_Init();
//  SystemClock_Config();

  MyGPIOInit();
 8000462:	f7ff ff79 	bl	8000358 <MyGPIOInit>
  uart2_TX_init();
 8000466:	f7ff feb7 	bl	80001d8 <uart2_TX_init>
  uint32_t sleep = 1000000;
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <main+0x44>)
 800046c:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  i++;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3301      	adds	r3, #1
 8000472:	60fb      	str	r3, [r7, #12]
	 printf("Hello World\n");
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <main+0x48>)
 8000476:	f000 f9d5 	bl	8000824 <puts>


	  GPIO_PIN_TOOGLE(GPIOD, LED_1);
 800047a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047e:	4809      	ldr	r0, [pc, #36]	; (80004a4 <main+0x4c>)
 8000480:	f7ff ffd8 	bl	8000434 <GPIO_PIN_TOOGLE>

 	  for(int j=0;j < sleep;j++){}
 8000484:	2300      	movs	r3, #0
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	e002      	b.n	8000490 <main+0x38>
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	3301      	adds	r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	d8f8      	bhi.n	800048a <main+0x32>
	  i++;
 8000498:	e7e9      	b.n	800046e <main+0x16>
 800049a:	bf00      	nop
 800049c:	000f4240 	.word	0x000f4240
 80004a0:	0800115c 	.word	0x0800115c
 80004a4:	40020c00 	.word	0x40020c00

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <NMI_Handler+0x4>

080004ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler+0x4>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f8e2 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e00a      	b.n	8000524 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800050e:	f3af 8000 	nop.w
 8000512:	4601      	mov	r1, r0
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	b2ca      	uxtb	r2, r1
 800051c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbf0      	blt.n	800050e <_read+0x12>
	}

return len;
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b086      	sub	sp, #24
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	e009      	b.n	800055c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	60ba      	str	r2, [r7, #8]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff feb7 	bl	80002c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3301      	adds	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	dbf1      	blt.n	8000548 <_write+0x12>
	}
	return len;
 8000564:	687b      	ldr	r3, [r7, #4]
}
 8000566:	4618      	mov	r0, r3
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <_close>:

int _close(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	return -1;
 8000576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000596:	605a      	str	r2, [r3, #4]
	return 0;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_isatty>:

int _isatty(int file)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	return 1;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <_sbrk+0x5c>)
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <_sbrk+0x60>)
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <_sbrk+0x64>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <_sbrk+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	429a      	cmp	r2, r3
 8000606:	d207      	bcs.n	8000618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000608:	f000 f86c 	bl	80006e4 <__errno>
 800060c:	4603      	mov	r3, r0
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000616:	e009      	b.n	800062c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <_sbrk+0x64>)
 8000628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20020000 	.word	0x20020000
 8000638:	00000400 	.word	0x00000400
 800063c:	20000084 	.word	0x20000084
 8000640:	200000a0 	.word	0x200000a0

08000644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <SystemInit+0x20>)
 800064a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <SystemInit+0x20>)
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800066e:	490e      	ldr	r1, [pc, #56]	; (80006a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000684:	4c0b      	ldr	r4, [pc, #44]	; (80006b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000692:	f7ff ffd7 	bl	8000644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000696:	f000 f82b 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800069a:	f7ff fedd 	bl	8000458 <main>
  bx  lr    
 800069e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006ac:	080011d4 	.word	0x080011d4
  ldr r2, =_sbss
 80006b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006b4:	2000009c 	.word	0x2000009c

080006b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000088 	.word	0x20000088

080006e4 <__errno>:
 80006e4:	4b01      	ldr	r3, [pc, #4]	; (80006ec <__errno+0x8>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000004 	.word	0x20000004

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4d0d      	ldr	r5, [pc, #52]	; (8000728 <__libc_init_array+0x38>)
 80006f4:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f6:	1b64      	subs	r4, r4, r5
 80006f8:	10a4      	asrs	r4, r4, #2
 80006fa:	2600      	movs	r6, #0
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <__libc_init_array+0x40>)
 8000702:	4c0c      	ldr	r4, [pc, #48]	; (8000734 <__libc_init_array+0x44>)
 8000704:	f000 fd1e 	bl	8001144 <_init>
 8000708:	1b64      	subs	r4, r4, r5
 800070a:	10a4      	asrs	r4, r4, #2
 800070c:	2600      	movs	r6, #0
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	080011cc 	.word	0x080011cc
 800072c:	080011cc 	.word	0x080011cc
 8000730:	080011cc 	.word	0x080011cc
 8000734:	080011d0 	.word	0x080011d0

08000738 <memset>:
 8000738:	4402      	add	r2, r0
 800073a:	4603      	mov	r3, r0
 800073c:	4293      	cmp	r3, r2
 800073e:	d100      	bne.n	8000742 <memset+0xa>
 8000740:	4770      	bx	lr
 8000742:	f803 1b01 	strb.w	r1, [r3], #1
 8000746:	e7f9      	b.n	800073c <memset+0x4>

08000748 <_puts_r>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	460e      	mov	r6, r1
 800074c:	4605      	mov	r5, r0
 800074e:	b118      	cbz	r0, 8000758 <_puts_r+0x10>
 8000750:	6983      	ldr	r3, [r0, #24]
 8000752:	b90b      	cbnz	r3, 8000758 <_puts_r+0x10>
 8000754:	f000 fa48 	bl	8000be8 <__sinit>
 8000758:	69ab      	ldr	r3, [r5, #24]
 800075a:	68ac      	ldr	r4, [r5, #8]
 800075c:	b913      	cbnz	r3, 8000764 <_puts_r+0x1c>
 800075e:	4628      	mov	r0, r5
 8000760:	f000 fa42 	bl	8000be8 <__sinit>
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <_puts_r+0xd0>)
 8000766:	429c      	cmp	r4, r3
 8000768:	d120      	bne.n	80007ac <_puts_r+0x64>
 800076a:	686c      	ldr	r4, [r5, #4]
 800076c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800076e:	07db      	lsls	r3, r3, #31
 8000770:	d405      	bmi.n	800077e <_puts_r+0x36>
 8000772:	89a3      	ldrh	r3, [r4, #12]
 8000774:	0598      	lsls	r0, r3, #22
 8000776:	d402      	bmi.n	800077e <_puts_r+0x36>
 8000778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800077a:	f000 fad3 	bl	8000d24 <__retarget_lock_acquire_recursive>
 800077e:	89a3      	ldrh	r3, [r4, #12]
 8000780:	0719      	lsls	r1, r3, #28
 8000782:	d51d      	bpl.n	80007c0 <_puts_r+0x78>
 8000784:	6923      	ldr	r3, [r4, #16]
 8000786:	b1db      	cbz	r3, 80007c0 <_puts_r+0x78>
 8000788:	3e01      	subs	r6, #1
 800078a:	68a3      	ldr	r3, [r4, #8]
 800078c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000790:	3b01      	subs	r3, #1
 8000792:	60a3      	str	r3, [r4, #8]
 8000794:	bb39      	cbnz	r1, 80007e6 <_puts_r+0x9e>
 8000796:	2b00      	cmp	r3, #0
 8000798:	da38      	bge.n	800080c <_puts_r+0xc4>
 800079a:	4622      	mov	r2, r4
 800079c:	210a      	movs	r1, #10
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 f848 	bl	8000834 <__swbuf_r>
 80007a4:	3001      	adds	r0, #1
 80007a6:	d011      	beq.n	80007cc <_puts_r+0x84>
 80007a8:	250a      	movs	r5, #10
 80007aa:	e011      	b.n	80007d0 <_puts_r+0x88>
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <_puts_r+0xd4>)
 80007ae:	429c      	cmp	r4, r3
 80007b0:	d101      	bne.n	80007b6 <_puts_r+0x6e>
 80007b2:	68ac      	ldr	r4, [r5, #8]
 80007b4:	e7da      	b.n	800076c <_puts_r+0x24>
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <_puts_r+0xd8>)
 80007b8:	429c      	cmp	r4, r3
 80007ba:	bf08      	it	eq
 80007bc:	68ec      	ldreq	r4, [r5, #12]
 80007be:	e7d5      	b.n	800076c <_puts_r+0x24>
 80007c0:	4621      	mov	r1, r4
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 f888 	bl	80008d8 <__swsetup_r>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d0dd      	beq.n	8000788 <_puts_r+0x40>
 80007cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80007d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007d2:	07da      	lsls	r2, r3, #31
 80007d4:	d405      	bmi.n	80007e2 <_puts_r+0x9a>
 80007d6:	89a3      	ldrh	r3, [r4, #12]
 80007d8:	059b      	lsls	r3, r3, #22
 80007da:	d402      	bmi.n	80007e2 <_puts_r+0x9a>
 80007dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007de:	f000 faa2 	bl	8000d26 <__retarget_lock_release_recursive>
 80007e2:	4628      	mov	r0, r5
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	da04      	bge.n	80007f4 <_puts_r+0xac>
 80007ea:	69a2      	ldr	r2, [r4, #24]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dc06      	bgt.n	80007fe <_puts_r+0xb6>
 80007f0:	290a      	cmp	r1, #10
 80007f2:	d004      	beq.n	80007fe <_puts_r+0xb6>
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	6022      	str	r2, [r4, #0]
 80007fa:	7019      	strb	r1, [r3, #0]
 80007fc:	e7c5      	b.n	800078a <_puts_r+0x42>
 80007fe:	4622      	mov	r2, r4
 8000800:	4628      	mov	r0, r5
 8000802:	f000 f817 	bl	8000834 <__swbuf_r>
 8000806:	3001      	adds	r0, #1
 8000808:	d1bf      	bne.n	800078a <_puts_r+0x42>
 800080a:	e7df      	b.n	80007cc <_puts_r+0x84>
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	250a      	movs	r5, #10
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	6022      	str	r2, [r4, #0]
 8000814:	701d      	strb	r5, [r3, #0]
 8000816:	e7db      	b.n	80007d0 <_puts_r+0x88>
 8000818:	0800118c 	.word	0x0800118c
 800081c:	080011ac 	.word	0x080011ac
 8000820:	0800116c 	.word	0x0800116c

08000824 <puts>:
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <puts+0xc>)
 8000826:	4601      	mov	r1, r0
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f7ff bf8d 	b.w	8000748 <_puts_r>
 800082e:	bf00      	nop
 8000830:	20000004 	.word	0x20000004

08000834 <__swbuf_r>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	460e      	mov	r6, r1
 8000838:	4614      	mov	r4, r2
 800083a:	4605      	mov	r5, r0
 800083c:	b118      	cbz	r0, 8000846 <__swbuf_r+0x12>
 800083e:	6983      	ldr	r3, [r0, #24]
 8000840:	b90b      	cbnz	r3, 8000846 <__swbuf_r+0x12>
 8000842:	f000 f9d1 	bl	8000be8 <__sinit>
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <__swbuf_r+0x98>)
 8000848:	429c      	cmp	r4, r3
 800084a:	d12b      	bne.n	80008a4 <__swbuf_r+0x70>
 800084c:	686c      	ldr	r4, [r5, #4]
 800084e:	69a3      	ldr	r3, [r4, #24]
 8000850:	60a3      	str	r3, [r4, #8]
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	071a      	lsls	r2, r3, #28
 8000856:	d52f      	bpl.n	80008b8 <__swbuf_r+0x84>
 8000858:	6923      	ldr	r3, [r4, #16]
 800085a:	b36b      	cbz	r3, 80008b8 <__swbuf_r+0x84>
 800085c:	6923      	ldr	r3, [r4, #16]
 800085e:	6820      	ldr	r0, [r4, #0]
 8000860:	1ac0      	subs	r0, r0, r3
 8000862:	6963      	ldr	r3, [r4, #20]
 8000864:	b2f6      	uxtb	r6, r6
 8000866:	4283      	cmp	r3, r0
 8000868:	4637      	mov	r7, r6
 800086a:	dc04      	bgt.n	8000876 <__swbuf_r+0x42>
 800086c:	4621      	mov	r1, r4
 800086e:	4628      	mov	r0, r5
 8000870:	f000 f926 	bl	8000ac0 <_fflush_r>
 8000874:	bb30      	cbnz	r0, 80008c4 <__swbuf_r+0x90>
 8000876:	68a3      	ldr	r3, [r4, #8]
 8000878:	3b01      	subs	r3, #1
 800087a:	60a3      	str	r3, [r4, #8]
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	6022      	str	r2, [r4, #0]
 8000882:	701e      	strb	r6, [r3, #0]
 8000884:	6963      	ldr	r3, [r4, #20]
 8000886:	3001      	adds	r0, #1
 8000888:	4283      	cmp	r3, r0
 800088a:	d004      	beq.n	8000896 <__swbuf_r+0x62>
 800088c:	89a3      	ldrh	r3, [r4, #12]
 800088e:	07db      	lsls	r3, r3, #31
 8000890:	d506      	bpl.n	80008a0 <__swbuf_r+0x6c>
 8000892:	2e0a      	cmp	r6, #10
 8000894:	d104      	bne.n	80008a0 <__swbuf_r+0x6c>
 8000896:	4621      	mov	r1, r4
 8000898:	4628      	mov	r0, r5
 800089a:	f000 f911 	bl	8000ac0 <_fflush_r>
 800089e:	b988      	cbnz	r0, 80008c4 <__swbuf_r+0x90>
 80008a0:	4638      	mov	r0, r7
 80008a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <__swbuf_r+0x9c>)
 80008a6:	429c      	cmp	r4, r3
 80008a8:	d101      	bne.n	80008ae <__swbuf_r+0x7a>
 80008aa:	68ac      	ldr	r4, [r5, #8]
 80008ac:	e7cf      	b.n	800084e <__swbuf_r+0x1a>
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <__swbuf_r+0xa0>)
 80008b0:	429c      	cmp	r4, r3
 80008b2:	bf08      	it	eq
 80008b4:	68ec      	ldreq	r4, [r5, #12]
 80008b6:	e7ca      	b.n	800084e <__swbuf_r+0x1a>
 80008b8:	4621      	mov	r1, r4
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 f80c 	bl	80008d8 <__swsetup_r>
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d0cb      	beq.n	800085c <__swbuf_r+0x28>
 80008c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80008c8:	e7ea      	b.n	80008a0 <__swbuf_r+0x6c>
 80008ca:	bf00      	nop
 80008cc:	0800118c 	.word	0x0800118c
 80008d0:	080011ac 	.word	0x080011ac
 80008d4:	0800116c 	.word	0x0800116c

080008d8 <__swsetup_r>:
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <__swsetup_r+0xcc>)
 80008da:	b570      	push	{r4, r5, r6, lr}
 80008dc:	681d      	ldr	r5, [r3, #0]
 80008de:	4606      	mov	r6, r0
 80008e0:	460c      	mov	r4, r1
 80008e2:	b125      	cbz	r5, 80008ee <__swsetup_r+0x16>
 80008e4:	69ab      	ldr	r3, [r5, #24]
 80008e6:	b913      	cbnz	r3, 80008ee <__swsetup_r+0x16>
 80008e8:	4628      	mov	r0, r5
 80008ea:	f000 f97d 	bl	8000be8 <__sinit>
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <__swsetup_r+0xd0>)
 80008f0:	429c      	cmp	r4, r3
 80008f2:	d10f      	bne.n	8000914 <__swsetup_r+0x3c>
 80008f4:	686c      	ldr	r4, [r5, #4]
 80008f6:	89a3      	ldrh	r3, [r4, #12]
 80008f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008fc:	0719      	lsls	r1, r3, #28
 80008fe:	d42c      	bmi.n	800095a <__swsetup_r+0x82>
 8000900:	06dd      	lsls	r5, r3, #27
 8000902:	d411      	bmi.n	8000928 <__swsetup_r+0x50>
 8000904:	2309      	movs	r3, #9
 8000906:	6033      	str	r3, [r6, #0]
 8000908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800090c:	81a3      	strh	r3, [r4, #12]
 800090e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000912:	e03e      	b.n	8000992 <__swsetup_r+0xba>
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <__swsetup_r+0xd4>)
 8000916:	429c      	cmp	r4, r3
 8000918:	d101      	bne.n	800091e <__swsetup_r+0x46>
 800091a:	68ac      	ldr	r4, [r5, #8]
 800091c:	e7eb      	b.n	80008f6 <__swsetup_r+0x1e>
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <__swsetup_r+0xd8>)
 8000920:	429c      	cmp	r4, r3
 8000922:	bf08      	it	eq
 8000924:	68ec      	ldreq	r4, [r5, #12]
 8000926:	e7e6      	b.n	80008f6 <__swsetup_r+0x1e>
 8000928:	0758      	lsls	r0, r3, #29
 800092a:	d512      	bpl.n	8000952 <__swsetup_r+0x7a>
 800092c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800092e:	b141      	cbz	r1, 8000942 <__swsetup_r+0x6a>
 8000930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000934:	4299      	cmp	r1, r3
 8000936:	d002      	beq.n	800093e <__swsetup_r+0x66>
 8000938:	4630      	mov	r0, r6
 800093a:	f000 fa5b 	bl	8000df4 <_free_r>
 800093e:	2300      	movs	r3, #0
 8000940:	6363      	str	r3, [r4, #52]	; 0x34
 8000942:	89a3      	ldrh	r3, [r4, #12]
 8000944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000948:	81a3      	strh	r3, [r4, #12]
 800094a:	2300      	movs	r3, #0
 800094c:	6063      	str	r3, [r4, #4]
 800094e:	6923      	ldr	r3, [r4, #16]
 8000950:	6023      	str	r3, [r4, #0]
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	81a3      	strh	r3, [r4, #12]
 800095a:	6923      	ldr	r3, [r4, #16]
 800095c:	b94b      	cbnz	r3, 8000972 <__swsetup_r+0x9a>
 800095e:	89a3      	ldrh	r3, [r4, #12]
 8000960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000968:	d003      	beq.n	8000972 <__swsetup_r+0x9a>
 800096a:	4621      	mov	r1, r4
 800096c:	4630      	mov	r0, r6
 800096e:	f000 fa01 	bl	8000d74 <__smakebuf_r>
 8000972:	89a0      	ldrh	r0, [r4, #12]
 8000974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000978:	f010 0301 	ands.w	r3, r0, #1
 800097c:	d00a      	beq.n	8000994 <__swsetup_r+0xbc>
 800097e:	2300      	movs	r3, #0
 8000980:	60a3      	str	r3, [r4, #8]
 8000982:	6963      	ldr	r3, [r4, #20]
 8000984:	425b      	negs	r3, r3
 8000986:	61a3      	str	r3, [r4, #24]
 8000988:	6923      	ldr	r3, [r4, #16]
 800098a:	b943      	cbnz	r3, 800099e <__swsetup_r+0xc6>
 800098c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000990:	d1ba      	bne.n	8000908 <__swsetup_r+0x30>
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	0781      	lsls	r1, r0, #30
 8000996:	bf58      	it	pl
 8000998:	6963      	ldrpl	r3, [r4, #20]
 800099a:	60a3      	str	r3, [r4, #8]
 800099c:	e7f4      	b.n	8000988 <__swsetup_r+0xb0>
 800099e:	2000      	movs	r0, #0
 80009a0:	e7f7      	b.n	8000992 <__swsetup_r+0xba>
 80009a2:	bf00      	nop
 80009a4:	20000004 	.word	0x20000004
 80009a8:	0800118c 	.word	0x0800118c
 80009ac:	080011ac 	.word	0x080011ac
 80009b0:	0800116c 	.word	0x0800116c

080009b4 <__sflush_r>:
 80009b4:	898a      	ldrh	r2, [r1, #12]
 80009b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ba:	4605      	mov	r5, r0
 80009bc:	0710      	lsls	r0, r2, #28
 80009be:	460c      	mov	r4, r1
 80009c0:	d458      	bmi.n	8000a74 <__sflush_r+0xc0>
 80009c2:	684b      	ldr	r3, [r1, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dc05      	bgt.n	80009d4 <__sflush_r+0x20>
 80009c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dc02      	bgt.n	80009d4 <__sflush_r+0x20>
 80009ce:	2000      	movs	r0, #0
 80009d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d0f9      	beq.n	80009ce <__sflush_r+0x1a>
 80009da:	2300      	movs	r3, #0
 80009dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009e0:	682f      	ldr	r7, [r5, #0]
 80009e2:	602b      	str	r3, [r5, #0]
 80009e4:	d032      	beq.n	8000a4c <__sflush_r+0x98>
 80009e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009e8:	89a3      	ldrh	r3, [r4, #12]
 80009ea:	075a      	lsls	r2, r3, #29
 80009ec:	d505      	bpl.n	80009fa <__sflush_r+0x46>
 80009ee:	6863      	ldr	r3, [r4, #4]
 80009f0:	1ac0      	subs	r0, r0, r3
 80009f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009f4:	b10b      	cbz	r3, 80009fa <__sflush_r+0x46>
 80009f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009f8:	1ac0      	subs	r0, r0, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	4602      	mov	r2, r0
 80009fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a00:	6a21      	ldr	r1, [r4, #32]
 8000a02:	4628      	mov	r0, r5
 8000a04:	47b0      	blx	r6
 8000a06:	1c43      	adds	r3, r0, #1
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	d106      	bne.n	8000a1a <__sflush_r+0x66>
 8000a0c:	6829      	ldr	r1, [r5, #0]
 8000a0e:	291d      	cmp	r1, #29
 8000a10:	d82c      	bhi.n	8000a6c <__sflush_r+0xb8>
 8000a12:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <__sflush_r+0x108>)
 8000a14:	40ca      	lsrs	r2, r1
 8000a16:	07d6      	lsls	r6, r2, #31
 8000a18:	d528      	bpl.n	8000a6c <__sflush_r+0xb8>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6062      	str	r2, [r4, #4]
 8000a1e:	04d9      	lsls	r1, r3, #19
 8000a20:	6922      	ldr	r2, [r4, #16]
 8000a22:	6022      	str	r2, [r4, #0]
 8000a24:	d504      	bpl.n	8000a30 <__sflush_r+0x7c>
 8000a26:	1c42      	adds	r2, r0, #1
 8000a28:	d101      	bne.n	8000a2e <__sflush_r+0x7a>
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	b903      	cbnz	r3, 8000a30 <__sflush_r+0x7c>
 8000a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8000a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a32:	602f      	str	r7, [r5, #0]
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d0ca      	beq.n	80009ce <__sflush_r+0x1a>
 8000a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d002      	beq.n	8000a46 <__sflush_r+0x92>
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 f9d7 	bl	8000df4 <_free_r>
 8000a46:	2000      	movs	r0, #0
 8000a48:	6360      	str	r0, [r4, #52]	; 0x34
 8000a4a:	e7c1      	b.n	80009d0 <__sflush_r+0x1c>
 8000a4c:	6a21      	ldr	r1, [r4, #32]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4628      	mov	r0, r5
 8000a52:	47b0      	blx	r6
 8000a54:	1c41      	adds	r1, r0, #1
 8000a56:	d1c7      	bne.n	80009e8 <__sflush_r+0x34>
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0c4      	beq.n	80009e8 <__sflush_r+0x34>
 8000a5e:	2b1d      	cmp	r3, #29
 8000a60:	d001      	beq.n	8000a66 <__sflush_r+0xb2>
 8000a62:	2b16      	cmp	r3, #22
 8000a64:	d101      	bne.n	8000a6a <__sflush_r+0xb6>
 8000a66:	602f      	str	r7, [r5, #0]
 8000a68:	e7b1      	b.n	80009ce <__sflush_r+0x1a>
 8000a6a:	89a3      	ldrh	r3, [r4, #12]
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a70:	81a3      	strh	r3, [r4, #12]
 8000a72:	e7ad      	b.n	80009d0 <__sflush_r+0x1c>
 8000a74:	690f      	ldr	r7, [r1, #16]
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d0a9      	beq.n	80009ce <__sflush_r+0x1a>
 8000a7a:	0793      	lsls	r3, r2, #30
 8000a7c:	680e      	ldr	r6, [r1, #0]
 8000a7e:	bf08      	it	eq
 8000a80:	694b      	ldreq	r3, [r1, #20]
 8000a82:	600f      	str	r7, [r1, #0]
 8000a84:	bf18      	it	ne
 8000a86:	2300      	movne	r3, #0
 8000a88:	eba6 0807 	sub.w	r8, r6, r7
 8000a8c:	608b      	str	r3, [r1, #8]
 8000a8e:	f1b8 0f00 	cmp.w	r8, #0
 8000a92:	dd9c      	ble.n	80009ce <__sflush_r+0x1a>
 8000a94:	6a21      	ldr	r1, [r4, #32]
 8000a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a98:	4643      	mov	r3, r8
 8000a9a:	463a      	mov	r2, r7
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	47b0      	blx	r6
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	dc06      	bgt.n	8000ab2 <__sflush_r+0xfe>
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aaa:	81a3      	strh	r3, [r4, #12]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab0:	e78e      	b.n	80009d0 <__sflush_r+0x1c>
 8000ab2:	4407      	add	r7, r0
 8000ab4:	eba8 0800 	sub.w	r8, r8, r0
 8000ab8:	e7e9      	b.n	8000a8e <__sflush_r+0xda>
 8000aba:	bf00      	nop
 8000abc:	20400001 	.word	0x20400001

08000ac0 <_fflush_r>:
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	690b      	ldr	r3, [r1, #16]
 8000ac4:	4605      	mov	r5, r0
 8000ac6:	460c      	mov	r4, r1
 8000ac8:	b913      	cbnz	r3, 8000ad0 <_fflush_r+0x10>
 8000aca:	2500      	movs	r5, #0
 8000acc:	4628      	mov	r0, r5
 8000ace:	bd38      	pop	{r3, r4, r5, pc}
 8000ad0:	b118      	cbz	r0, 8000ada <_fflush_r+0x1a>
 8000ad2:	6983      	ldr	r3, [r0, #24]
 8000ad4:	b90b      	cbnz	r3, 8000ada <_fflush_r+0x1a>
 8000ad6:	f000 f887 	bl	8000be8 <__sinit>
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <_fflush_r+0x6c>)
 8000adc:	429c      	cmp	r4, r3
 8000ade:	d11b      	bne.n	8000b18 <_fflush_r+0x58>
 8000ae0:	686c      	ldr	r4, [r5, #4]
 8000ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0ef      	beq.n	8000aca <_fflush_r+0xa>
 8000aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000aec:	07d0      	lsls	r0, r2, #31
 8000aee:	d404      	bmi.n	8000afa <_fflush_r+0x3a>
 8000af0:	0599      	lsls	r1, r3, #22
 8000af2:	d402      	bmi.n	8000afa <_fflush_r+0x3a>
 8000af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000af6:	f000 f915 	bl	8000d24 <__retarget_lock_acquire_recursive>
 8000afa:	4628      	mov	r0, r5
 8000afc:	4621      	mov	r1, r4
 8000afe:	f7ff ff59 	bl	80009b4 <__sflush_r>
 8000b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b04:	07da      	lsls	r2, r3, #31
 8000b06:	4605      	mov	r5, r0
 8000b08:	d4e0      	bmi.n	8000acc <_fflush_r+0xc>
 8000b0a:	89a3      	ldrh	r3, [r4, #12]
 8000b0c:	059b      	lsls	r3, r3, #22
 8000b0e:	d4dd      	bmi.n	8000acc <_fflush_r+0xc>
 8000b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b12:	f000 f908 	bl	8000d26 <__retarget_lock_release_recursive>
 8000b16:	e7d9      	b.n	8000acc <_fflush_r+0xc>
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <_fflush_r+0x70>)
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	d101      	bne.n	8000b22 <_fflush_r+0x62>
 8000b1e:	68ac      	ldr	r4, [r5, #8]
 8000b20:	e7df      	b.n	8000ae2 <_fflush_r+0x22>
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <_fflush_r+0x74>)
 8000b24:	429c      	cmp	r4, r3
 8000b26:	bf08      	it	eq
 8000b28:	68ec      	ldreq	r4, [r5, #12]
 8000b2a:	e7da      	b.n	8000ae2 <_fflush_r+0x22>
 8000b2c:	0800118c 	.word	0x0800118c
 8000b30:	080011ac 	.word	0x080011ac
 8000b34:	0800116c 	.word	0x0800116c

08000b38 <std>:
 8000b38:	2300      	movs	r3, #0
 8000b3a:	b510      	push	{r4, lr}
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8000b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b46:	6083      	str	r3, [r0, #8]
 8000b48:	8181      	strh	r1, [r0, #12]
 8000b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8000b4c:	81c2      	strh	r2, [r0, #14]
 8000b4e:	6183      	str	r3, [r0, #24]
 8000b50:	4619      	mov	r1, r3
 8000b52:	2208      	movs	r2, #8
 8000b54:	305c      	adds	r0, #92	; 0x5c
 8000b56:	f7ff fdef 	bl	8000738 <memset>
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <std+0x38>)
 8000b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <std+0x3c>)
 8000b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <std+0x40>)
 8000b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <std+0x44>)
 8000b68:	6224      	str	r4, [r4, #32]
 8000b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	bf00      	nop
 8000b70:	08000fd5 	.word	0x08000fd5
 8000b74:	08000ff7 	.word	0x08000ff7
 8000b78:	0800102f 	.word	0x0800102f
 8000b7c:	08001053 	.word	0x08001053

08000b80 <_cleanup_r>:
 8000b80:	4901      	ldr	r1, [pc, #4]	; (8000b88 <_cleanup_r+0x8>)
 8000b82:	f000 b8af 	b.w	8000ce4 <_fwalk_reent>
 8000b86:	bf00      	nop
 8000b88:	08000ac1 	.word	0x08000ac1

08000b8c <__sfmoreglue>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	2268      	movs	r2, #104	; 0x68
 8000b90:	1e4d      	subs	r5, r1, #1
 8000b92:	4355      	muls	r5, r2
 8000b94:	460e      	mov	r6, r1
 8000b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b9a:	f000 f997 	bl	8000ecc <_malloc_r>
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	b140      	cbz	r0, 8000bb4 <__sfmoreglue+0x28>
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ba8:	300c      	adds	r0, #12
 8000baa:	60a0      	str	r0, [r4, #8]
 8000bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bb0:	f7ff fdc2 	bl	8000738 <memset>
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}

08000bb8 <__sfp_lock_acquire>:
 8000bb8:	4801      	ldr	r0, [pc, #4]	; (8000bc0 <__sfp_lock_acquire+0x8>)
 8000bba:	f000 b8b3 	b.w	8000d24 <__retarget_lock_acquire_recursive>
 8000bbe:	bf00      	nop
 8000bc0:	2000008d 	.word	0x2000008d

08000bc4 <__sfp_lock_release>:
 8000bc4:	4801      	ldr	r0, [pc, #4]	; (8000bcc <__sfp_lock_release+0x8>)
 8000bc6:	f000 b8ae 	b.w	8000d26 <__retarget_lock_release_recursive>
 8000bca:	bf00      	nop
 8000bcc:	2000008d 	.word	0x2000008d

08000bd0 <__sinit_lock_acquire>:
 8000bd0:	4801      	ldr	r0, [pc, #4]	; (8000bd8 <__sinit_lock_acquire+0x8>)
 8000bd2:	f000 b8a7 	b.w	8000d24 <__retarget_lock_acquire_recursive>
 8000bd6:	bf00      	nop
 8000bd8:	2000008e 	.word	0x2000008e

08000bdc <__sinit_lock_release>:
 8000bdc:	4801      	ldr	r0, [pc, #4]	; (8000be4 <__sinit_lock_release+0x8>)
 8000bde:	f000 b8a2 	b.w	8000d26 <__retarget_lock_release_recursive>
 8000be2:	bf00      	nop
 8000be4:	2000008e 	.word	0x2000008e

08000be8 <__sinit>:
 8000be8:	b510      	push	{r4, lr}
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fff0 	bl	8000bd0 <__sinit_lock_acquire>
 8000bf0:	69a3      	ldr	r3, [r4, #24]
 8000bf2:	b11b      	cbz	r3, 8000bfc <__sinit+0x14>
 8000bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bf8:	f7ff bff0 	b.w	8000bdc <__sinit_lock_release>
 8000bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c00:	6523      	str	r3, [r4, #80]	; 0x50
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <__sinit+0x68>)
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <__sinit+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c0a:	42a3      	cmp	r3, r4
 8000c0c:	bf04      	itt	eq
 8000c0e:	2301      	moveq	r3, #1
 8000c10:	61a3      	streq	r3, [r4, #24]
 8000c12:	4620      	mov	r0, r4
 8000c14:	f000 f820 	bl	8000c58 <__sfp>
 8000c18:	6060      	str	r0, [r4, #4]
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f000 f81c 	bl	8000c58 <__sfp>
 8000c20:	60a0      	str	r0, [r4, #8]
 8000c22:	4620      	mov	r0, r4
 8000c24:	f000 f818 	bl	8000c58 <__sfp>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60e0      	str	r0, [r4, #12]
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	6860      	ldr	r0, [r4, #4]
 8000c30:	f7ff ff82 	bl	8000b38 <std>
 8000c34:	68a0      	ldr	r0, [r4, #8]
 8000c36:	2201      	movs	r2, #1
 8000c38:	2109      	movs	r1, #9
 8000c3a:	f7ff ff7d 	bl	8000b38 <std>
 8000c3e:	68e0      	ldr	r0, [r4, #12]
 8000c40:	2202      	movs	r2, #2
 8000c42:	2112      	movs	r1, #18
 8000c44:	f7ff ff78 	bl	8000b38 <std>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61a3      	str	r3, [r4, #24]
 8000c4c:	e7d2      	b.n	8000bf4 <__sinit+0xc>
 8000c4e:	bf00      	nop
 8000c50:	08001168 	.word	0x08001168
 8000c54:	08000b81 	.word	0x08000b81

08000c58 <__sfp>:
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	4607      	mov	r7, r0
 8000c5c:	f7ff ffac 	bl	8000bb8 <__sfp_lock_acquire>
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <__sfp+0x84>)
 8000c62:	681e      	ldr	r6, [r3, #0]
 8000c64:	69b3      	ldr	r3, [r6, #24]
 8000c66:	b913      	cbnz	r3, 8000c6e <__sfp+0x16>
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f7ff ffbd 	bl	8000be8 <__sinit>
 8000c6e:	3648      	adds	r6, #72	; 0x48
 8000c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	d503      	bpl.n	8000c80 <__sfp+0x28>
 8000c78:	6833      	ldr	r3, [r6, #0]
 8000c7a:	b30b      	cbz	r3, 8000cc0 <__sfp+0x68>
 8000c7c:	6836      	ldr	r6, [r6, #0]
 8000c7e:	e7f7      	b.n	8000c70 <__sfp+0x18>
 8000c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c84:	b9d5      	cbnz	r5, 8000cbc <__sfp+0x64>
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <__sfp+0x88>)
 8000c88:	60e3      	str	r3, [r4, #12]
 8000c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8000c90:	f000 f847 	bl	8000d22 <__retarget_lock_init_recursive>
 8000c94:	f7ff ff96 	bl	8000bc4 <__sfp_lock_release>
 8000c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ca0:	6025      	str	r5, [r4, #0]
 8000ca2:	61a5      	str	r5, [r4, #24]
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cac:	f7ff fd44 	bl	8000738 <memset>
 8000cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000cb8:	4620      	mov	r0, r4
 8000cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cbc:	3468      	adds	r4, #104	; 0x68
 8000cbe:	e7d9      	b.n	8000c74 <__sfp+0x1c>
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	f7ff ff62 	bl	8000b8c <__sfmoreglue>
 8000cc8:	4604      	mov	r4, r0
 8000cca:	6030      	str	r0, [r6, #0]
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d1d5      	bne.n	8000c7c <__sfp+0x24>
 8000cd0:	f7ff ff78 	bl	8000bc4 <__sfp_lock_release>
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	e7ee      	b.n	8000cb8 <__sfp+0x60>
 8000cda:	bf00      	nop
 8000cdc:	08001168 	.word	0x08001168
 8000ce0:	ffff0001 	.word	0xffff0001

08000ce4 <_fwalk_reent>:
 8000ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4688      	mov	r8, r1
 8000cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000cf0:	2700      	movs	r7, #0
 8000cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8000cfa:	d505      	bpl.n	8000d08 <_fwalk_reent+0x24>
 8000cfc:	6824      	ldr	r4, [r4, #0]
 8000cfe:	2c00      	cmp	r4, #0
 8000d00:	d1f7      	bne.n	8000cf2 <_fwalk_reent+0xe>
 8000d02:	4638      	mov	r0, r7
 8000d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d08:	89ab      	ldrh	r3, [r5, #12]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d907      	bls.n	8000d1e <_fwalk_reent+0x3a>
 8000d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d12:	3301      	adds	r3, #1
 8000d14:	d003      	beq.n	8000d1e <_fwalk_reent+0x3a>
 8000d16:	4629      	mov	r1, r5
 8000d18:	4630      	mov	r0, r6
 8000d1a:	47c0      	blx	r8
 8000d1c:	4307      	orrs	r7, r0
 8000d1e:	3568      	adds	r5, #104	; 0x68
 8000d20:	e7e9      	b.n	8000cf6 <_fwalk_reent+0x12>

08000d22 <__retarget_lock_init_recursive>:
 8000d22:	4770      	bx	lr

08000d24 <__retarget_lock_acquire_recursive>:
 8000d24:	4770      	bx	lr

08000d26 <__retarget_lock_release_recursive>:
 8000d26:	4770      	bx	lr

08000d28 <__swhatbuf_r>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	460e      	mov	r6, r1
 8000d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d30:	2900      	cmp	r1, #0
 8000d32:	b096      	sub	sp, #88	; 0x58
 8000d34:	4614      	mov	r4, r2
 8000d36:	461d      	mov	r5, r3
 8000d38:	da08      	bge.n	8000d4c <__swhatbuf_r+0x24>
 8000d3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	602a      	str	r2, [r5, #0]
 8000d42:	061a      	lsls	r2, r3, #24
 8000d44:	d410      	bmi.n	8000d68 <__swhatbuf_r+0x40>
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	e00e      	b.n	8000d6a <__swhatbuf_r+0x42>
 8000d4c:	466a      	mov	r2, sp
 8000d4e:	f000 f9a7 	bl	80010a0 <_fstat_r>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	dbf1      	blt.n	8000d3a <__swhatbuf_r+0x12>
 8000d56:	9a01      	ldr	r2, [sp, #4]
 8000d58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d60:	425a      	negs	r2, r3
 8000d62:	415a      	adcs	r2, r3
 8000d64:	602a      	str	r2, [r5, #0]
 8000d66:	e7ee      	b.n	8000d46 <__swhatbuf_r+0x1e>
 8000d68:	2340      	movs	r3, #64	; 0x40
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	6023      	str	r3, [r4, #0]
 8000d6e:	b016      	add	sp, #88	; 0x58
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d74 <__smakebuf_r>:
 8000d74:	898b      	ldrh	r3, [r1, #12]
 8000d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d78:	079d      	lsls	r5, r3, #30
 8000d7a:	4606      	mov	r6, r0
 8000d7c:	460c      	mov	r4, r1
 8000d7e:	d507      	bpl.n	8000d90 <__smakebuf_r+0x1c>
 8000d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d84:	6023      	str	r3, [r4, #0]
 8000d86:	6123      	str	r3, [r4, #16]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	6163      	str	r3, [r4, #20]
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	ab01      	add	r3, sp, #4
 8000d92:	466a      	mov	r2, sp
 8000d94:	f7ff ffc8 	bl	8000d28 <__swhatbuf_r>
 8000d98:	9900      	ldr	r1, [sp, #0]
 8000d9a:	4605      	mov	r5, r0
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	f000 f895 	bl	8000ecc <_malloc_r>
 8000da2:	b948      	cbnz	r0, 8000db8 <__smakebuf_r+0x44>
 8000da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000da8:	059a      	lsls	r2, r3, #22
 8000daa:	d4ef      	bmi.n	8000d8c <__smakebuf_r+0x18>
 8000dac:	f023 0303 	bic.w	r3, r3, #3
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	81a3      	strh	r3, [r4, #12]
 8000db6:	e7e3      	b.n	8000d80 <__smakebuf_r+0xc>
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <__smakebuf_r+0x7c>)
 8000dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8000dbc:	89a3      	ldrh	r3, [r4, #12]
 8000dbe:	6020      	str	r0, [r4, #0]
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	81a3      	strh	r3, [r4, #12]
 8000dc6:	9b00      	ldr	r3, [sp, #0]
 8000dc8:	6163      	str	r3, [r4, #20]
 8000dca:	9b01      	ldr	r3, [sp, #4]
 8000dcc:	6120      	str	r0, [r4, #16]
 8000dce:	b15b      	cbz	r3, 8000de8 <__smakebuf_r+0x74>
 8000dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f000 f975 	bl	80010c4 <_isatty_r>
 8000dda:	b128      	cbz	r0, 8000de8 <__smakebuf_r+0x74>
 8000ddc:	89a3      	ldrh	r3, [r4, #12]
 8000dde:	f023 0303 	bic.w	r3, r3, #3
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	81a3      	strh	r3, [r4, #12]
 8000de8:	89a0      	ldrh	r0, [r4, #12]
 8000dea:	4305      	orrs	r5, r0
 8000dec:	81a5      	strh	r5, [r4, #12]
 8000dee:	e7cd      	b.n	8000d8c <__smakebuf_r+0x18>
 8000df0:	08000b81 	.word	0x08000b81

08000df4 <_free_r>:
 8000df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d044      	beq.n	8000e84 <_free_r+0x90>
 8000dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000dfe:	9001      	str	r0, [sp, #4]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f1a1 0404 	sub.w	r4, r1, #4
 8000e06:	bfb8      	it	lt
 8000e08:	18e4      	addlt	r4, r4, r3
 8000e0a:	f000 f97d 	bl	8001108 <__malloc_lock>
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <_free_r+0x94>)
 8000e10:	9801      	ldr	r0, [sp, #4]
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	b933      	cbnz	r3, 8000e24 <_free_r+0x30>
 8000e16:	6063      	str	r3, [r4, #4]
 8000e18:	6014      	str	r4, [r2, #0]
 8000e1a:	b003      	add	sp, #12
 8000e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e20:	f000 b978 	b.w	8001114 <__malloc_unlock>
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	d908      	bls.n	8000e3a <_free_r+0x46>
 8000e28:	6825      	ldr	r5, [r4, #0]
 8000e2a:	1961      	adds	r1, r4, r5
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	bf01      	itttt	eq
 8000e30:	6819      	ldreq	r1, [r3, #0]
 8000e32:	685b      	ldreq	r3, [r3, #4]
 8000e34:	1949      	addeq	r1, r1, r5
 8000e36:	6021      	streq	r1, [r4, #0]
 8000e38:	e7ed      	b.n	8000e16 <_free_r+0x22>
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	b10b      	cbz	r3, 8000e44 <_free_r+0x50>
 8000e40:	42a3      	cmp	r3, r4
 8000e42:	d9fa      	bls.n	8000e3a <_free_r+0x46>
 8000e44:	6811      	ldr	r1, [r2, #0]
 8000e46:	1855      	adds	r5, r2, r1
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	d10b      	bne.n	8000e64 <_free_r+0x70>
 8000e4c:	6824      	ldr	r4, [r4, #0]
 8000e4e:	4421      	add	r1, r4
 8000e50:	1854      	adds	r4, r2, r1
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	6011      	str	r1, [r2, #0]
 8000e56:	d1e0      	bne.n	8000e1a <_free_r+0x26>
 8000e58:	681c      	ldr	r4, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	6053      	str	r3, [r2, #4]
 8000e5e:	4421      	add	r1, r4
 8000e60:	6011      	str	r1, [r2, #0]
 8000e62:	e7da      	b.n	8000e1a <_free_r+0x26>
 8000e64:	d902      	bls.n	8000e6c <_free_r+0x78>
 8000e66:	230c      	movs	r3, #12
 8000e68:	6003      	str	r3, [r0, #0]
 8000e6a:	e7d6      	b.n	8000e1a <_free_r+0x26>
 8000e6c:	6825      	ldr	r5, [r4, #0]
 8000e6e:	1961      	adds	r1, r4, r5
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf04      	itt	eq
 8000e74:	6819      	ldreq	r1, [r3, #0]
 8000e76:	685b      	ldreq	r3, [r3, #4]
 8000e78:	6063      	str	r3, [r4, #4]
 8000e7a:	bf04      	itt	eq
 8000e7c:	1949      	addeq	r1, r1, r5
 8000e7e:	6021      	streq	r1, [r4, #0]
 8000e80:	6054      	str	r4, [r2, #4]
 8000e82:	e7ca      	b.n	8000e1a <_free_r+0x26>
 8000e84:	b003      	add	sp, #12
 8000e86:	bd30      	pop	{r4, r5, pc}
 8000e88:	20000090 	.word	0x20000090

08000e8c <sbrk_aligned>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	4e0e      	ldr	r6, [pc, #56]	; (8000ec8 <sbrk_aligned+0x3c>)
 8000e90:	460c      	mov	r4, r1
 8000e92:	6831      	ldr	r1, [r6, #0]
 8000e94:	4605      	mov	r5, r0
 8000e96:	b911      	cbnz	r1, 8000e9e <sbrk_aligned+0x12>
 8000e98:	f000 f88c 	bl	8000fb4 <_sbrk_r>
 8000e9c:	6030      	str	r0, [r6, #0]
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f000 f887 	bl	8000fb4 <_sbrk_r>
 8000ea6:	1c43      	adds	r3, r0, #1
 8000ea8:	d00a      	beq.n	8000ec0 <sbrk_aligned+0x34>
 8000eaa:	1cc4      	adds	r4, r0, #3
 8000eac:	f024 0403 	bic.w	r4, r4, #3
 8000eb0:	42a0      	cmp	r0, r4
 8000eb2:	d007      	beq.n	8000ec4 <sbrk_aligned+0x38>
 8000eb4:	1a21      	subs	r1, r4, r0
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	f000 f87c 	bl	8000fb4 <_sbrk_r>
 8000ebc:	3001      	adds	r0, #1
 8000ebe:	d101      	bne.n	8000ec4 <sbrk_aligned+0x38>
 8000ec0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	bd70      	pop	{r4, r5, r6, pc}
 8000ec8:	20000094 	.word	0x20000094

08000ecc <_malloc_r>:
 8000ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed0:	1ccd      	adds	r5, r1, #3
 8000ed2:	f025 0503 	bic.w	r5, r5, #3
 8000ed6:	3508      	adds	r5, #8
 8000ed8:	2d0c      	cmp	r5, #12
 8000eda:	bf38      	it	cc
 8000edc:	250c      	movcc	r5, #12
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	4607      	mov	r7, r0
 8000ee2:	db01      	blt.n	8000ee8 <_malloc_r+0x1c>
 8000ee4:	42a9      	cmp	r1, r5
 8000ee6:	d905      	bls.n	8000ef4 <_malloc_r+0x28>
 8000ee8:	230c      	movs	r3, #12
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	2600      	movs	r6, #0
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ef4:	4e2e      	ldr	r6, [pc, #184]	; (8000fb0 <_malloc_r+0xe4>)
 8000ef6:	f000 f907 	bl	8001108 <__malloc_lock>
 8000efa:	6833      	ldr	r3, [r6, #0]
 8000efc:	461c      	mov	r4, r3
 8000efe:	bb34      	cbnz	r4, 8000f4e <_malloc_r+0x82>
 8000f00:	4629      	mov	r1, r5
 8000f02:	4638      	mov	r0, r7
 8000f04:	f7ff ffc2 	bl	8000e8c <sbrk_aligned>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	d14d      	bne.n	8000faa <_malloc_r+0xde>
 8000f0e:	6834      	ldr	r4, [r6, #0]
 8000f10:	4626      	mov	r6, r4
 8000f12:	2e00      	cmp	r6, #0
 8000f14:	d140      	bne.n	8000f98 <_malloc_r+0xcc>
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	4631      	mov	r1, r6
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	eb04 0803 	add.w	r8, r4, r3
 8000f20:	f000 f848 	bl	8000fb4 <_sbrk_r>
 8000f24:	4580      	cmp	r8, r0
 8000f26:	d13a      	bne.n	8000f9e <_malloc_r+0xd2>
 8000f28:	6821      	ldr	r1, [r4, #0]
 8000f2a:	3503      	adds	r5, #3
 8000f2c:	1a6d      	subs	r5, r5, r1
 8000f2e:	f025 0503 	bic.w	r5, r5, #3
 8000f32:	3508      	adds	r5, #8
 8000f34:	2d0c      	cmp	r5, #12
 8000f36:	bf38      	it	cc
 8000f38:	250c      	movcc	r5, #12
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	f7ff ffa5 	bl	8000e8c <sbrk_aligned>
 8000f42:	3001      	adds	r0, #1
 8000f44:	d02b      	beq.n	8000f9e <_malloc_r+0xd2>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	442b      	add	r3, r5
 8000f4a:	6023      	str	r3, [r4, #0]
 8000f4c:	e00e      	b.n	8000f6c <_malloc_r+0xa0>
 8000f4e:	6822      	ldr	r2, [r4, #0]
 8000f50:	1b52      	subs	r2, r2, r5
 8000f52:	d41e      	bmi.n	8000f92 <_malloc_r+0xc6>
 8000f54:	2a0b      	cmp	r2, #11
 8000f56:	d916      	bls.n	8000f86 <_malloc_r+0xba>
 8000f58:	1961      	adds	r1, r4, r5
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	6025      	str	r5, [r4, #0]
 8000f5e:	bf18      	it	ne
 8000f60:	6059      	strne	r1, [r3, #4]
 8000f62:	6863      	ldr	r3, [r4, #4]
 8000f64:	bf08      	it	eq
 8000f66:	6031      	streq	r1, [r6, #0]
 8000f68:	5162      	str	r2, [r4, r5]
 8000f6a:	604b      	str	r3, [r1, #4]
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	f104 060b 	add.w	r6, r4, #11
 8000f72:	f000 f8cf 	bl	8001114 <__malloc_unlock>
 8000f76:	f026 0607 	bic.w	r6, r6, #7
 8000f7a:	1d23      	adds	r3, r4, #4
 8000f7c:	1af2      	subs	r2, r6, r3
 8000f7e:	d0b6      	beq.n	8000eee <_malloc_r+0x22>
 8000f80:	1b9b      	subs	r3, r3, r6
 8000f82:	50a3      	str	r3, [r4, r2]
 8000f84:	e7b3      	b.n	8000eee <_malloc_r+0x22>
 8000f86:	6862      	ldr	r2, [r4, #4]
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	bf0c      	ite	eq
 8000f8c:	6032      	streq	r2, [r6, #0]
 8000f8e:	605a      	strne	r2, [r3, #4]
 8000f90:	e7ec      	b.n	8000f6c <_malloc_r+0xa0>
 8000f92:	4623      	mov	r3, r4
 8000f94:	6864      	ldr	r4, [r4, #4]
 8000f96:	e7b2      	b.n	8000efe <_malloc_r+0x32>
 8000f98:	4634      	mov	r4, r6
 8000f9a:	6876      	ldr	r6, [r6, #4]
 8000f9c:	e7b9      	b.n	8000f12 <_malloc_r+0x46>
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f000 f8b6 	bl	8001114 <__malloc_unlock>
 8000fa8:	e7a1      	b.n	8000eee <_malloc_r+0x22>
 8000faa:	6025      	str	r5, [r4, #0]
 8000fac:	e7de      	b.n	8000f6c <_malloc_r+0xa0>
 8000fae:	bf00      	nop
 8000fb0:	20000090 	.word	0x20000090

08000fb4 <_sbrk_r>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4d06      	ldr	r5, [pc, #24]	; (8000fd0 <_sbrk_r+0x1c>)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	602b      	str	r3, [r5, #0]
 8000fc0:	f7ff fb0a 	bl	80005d8 <_sbrk>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d102      	bne.n	8000fce <_sbrk_r+0x1a>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	b103      	cbz	r3, 8000fce <_sbrk_r+0x1a>
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	bd38      	pop	{r3, r4, r5, pc}
 8000fd0:	20000098 	.word	0x20000098

08000fd4 <__sread>:
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fdc:	f000 f8a0 	bl	8001120 <_read_r>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	bfab      	itete	ge
 8000fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fe8:	181b      	addge	r3, r3, r0
 8000fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fee:	bfac      	ite	ge
 8000ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ff2:	81a3      	strhlt	r3, [r4, #12]
 8000ff4:	bd10      	pop	{r4, pc}

08000ff6 <__swrite>:
 8000ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ffa:	461f      	mov	r7, r3
 8000ffc:	898b      	ldrh	r3, [r1, #12]
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	4605      	mov	r5, r0
 8001002:	460c      	mov	r4, r1
 8001004:	4616      	mov	r6, r2
 8001006:	d505      	bpl.n	8001014 <__swrite+0x1e>
 8001008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800100c:	2302      	movs	r3, #2
 800100e:	2200      	movs	r2, #0
 8001010:	f000 f868 	bl	80010e4 <_lseek_r>
 8001014:	89a3      	ldrh	r3, [r4, #12]
 8001016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800101a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800101e:	81a3      	strh	r3, [r4, #12]
 8001020:	4632      	mov	r2, r6
 8001022:	463b      	mov	r3, r7
 8001024:	4628      	mov	r0, r5
 8001026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800102a:	f000 b817 	b.w	800105c <_write_r>

0800102e <__sseek>:
 800102e:	b510      	push	{r4, lr}
 8001030:	460c      	mov	r4, r1
 8001032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001036:	f000 f855 	bl	80010e4 <_lseek_r>
 800103a:	1c43      	adds	r3, r0, #1
 800103c:	89a3      	ldrh	r3, [r4, #12]
 800103e:	bf15      	itete	ne
 8001040:	6560      	strne	r0, [r4, #84]	; 0x54
 8001042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800104a:	81a3      	strheq	r3, [r4, #12]
 800104c:	bf18      	it	ne
 800104e:	81a3      	strhne	r3, [r4, #12]
 8001050:	bd10      	pop	{r4, pc}

08001052 <__sclose>:
 8001052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001056:	f000 b813 	b.w	8001080 <_close_r>
	...

0800105c <_write_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d07      	ldr	r5, [pc, #28]	; (800107c <_write_r+0x20>)
 8001060:	4604      	mov	r4, r0
 8001062:	4608      	mov	r0, r1
 8001064:	4611      	mov	r1, r2
 8001066:	2200      	movs	r2, #0
 8001068:	602a      	str	r2, [r5, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	f7ff fa63 	bl	8000536 <_write>
 8001070:	1c43      	adds	r3, r0, #1
 8001072:	d102      	bne.n	800107a <_write_r+0x1e>
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	b103      	cbz	r3, 800107a <_write_r+0x1e>
 8001078:	6023      	str	r3, [r4, #0]
 800107a:	bd38      	pop	{r3, r4, r5, pc}
 800107c:	20000098 	.word	0x20000098

08001080 <_close_r>:
 8001080:	b538      	push	{r3, r4, r5, lr}
 8001082:	4d06      	ldr	r5, [pc, #24]	; (800109c <_close_r+0x1c>)
 8001084:	2300      	movs	r3, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	f7ff fa6f 	bl	800056e <_close>
 8001090:	1c43      	adds	r3, r0, #1
 8001092:	d102      	bne.n	800109a <_close_r+0x1a>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	b103      	cbz	r3, 800109a <_close_r+0x1a>
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	20000098 	.word	0x20000098

080010a0 <_fstat_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4d07      	ldr	r5, [pc, #28]	; (80010c0 <_fstat_r+0x20>)
 80010a4:	2300      	movs	r3, #0
 80010a6:	4604      	mov	r4, r0
 80010a8:	4608      	mov	r0, r1
 80010aa:	4611      	mov	r1, r2
 80010ac:	602b      	str	r3, [r5, #0]
 80010ae:	f7ff fa6a 	bl	8000586 <_fstat>
 80010b2:	1c43      	adds	r3, r0, #1
 80010b4:	d102      	bne.n	80010bc <_fstat_r+0x1c>
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	b103      	cbz	r3, 80010bc <_fstat_r+0x1c>
 80010ba:	6023      	str	r3, [r4, #0]
 80010bc:	bd38      	pop	{r3, r4, r5, pc}
 80010be:	bf00      	nop
 80010c0:	20000098 	.word	0x20000098

080010c4 <_isatty_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	4d06      	ldr	r5, [pc, #24]	; (80010e0 <_isatty_r+0x1c>)
 80010c8:	2300      	movs	r3, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	602b      	str	r3, [r5, #0]
 80010d0:	f7ff fa69 	bl	80005a6 <_isatty>
 80010d4:	1c43      	adds	r3, r0, #1
 80010d6:	d102      	bne.n	80010de <_isatty_r+0x1a>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	b103      	cbz	r3, 80010de <_isatty_r+0x1a>
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	bd38      	pop	{r3, r4, r5, pc}
 80010e0:	20000098 	.word	0x20000098

080010e4 <_lseek_r>:
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	4d07      	ldr	r5, [pc, #28]	; (8001104 <_lseek_r+0x20>)
 80010e8:	4604      	mov	r4, r0
 80010ea:	4608      	mov	r0, r1
 80010ec:	4611      	mov	r1, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	602a      	str	r2, [r5, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	f7ff fa62 	bl	80005bc <_lseek>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_lseek_r+0x1e>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_lseek_r+0x1e>
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	20000098 	.word	0x20000098

08001108 <__malloc_lock>:
 8001108:	4801      	ldr	r0, [pc, #4]	; (8001110 <__malloc_lock+0x8>)
 800110a:	f7ff be0b 	b.w	8000d24 <__retarget_lock_acquire_recursive>
 800110e:	bf00      	nop
 8001110:	2000008c 	.word	0x2000008c

08001114 <__malloc_unlock>:
 8001114:	4801      	ldr	r0, [pc, #4]	; (800111c <__malloc_unlock+0x8>)
 8001116:	f7ff be06 	b.w	8000d26 <__retarget_lock_release_recursive>
 800111a:	bf00      	nop
 800111c:	2000008c 	.word	0x2000008c

08001120 <_read_r>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	4d07      	ldr	r5, [pc, #28]	; (8001140 <_read_r+0x20>)
 8001124:	4604      	mov	r4, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4611      	mov	r1, r2
 800112a:	2200      	movs	r2, #0
 800112c:	602a      	str	r2, [r5, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	f7ff f9e4 	bl	80004fc <_read>
 8001134:	1c43      	adds	r3, r0, #1
 8001136:	d102      	bne.n	800113e <_read_r+0x1e>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	b103      	cbz	r3, 800113e <_read_r+0x1e>
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	20000098 	.word	0x20000098

08001144 <_init>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	bf00      	nop
 8001148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114a:	bc08      	pop	{r3}
 800114c:	469e      	mov	lr, r3
 800114e:	4770      	bx	lr

08001150 <_fini>:
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	bf00      	nop
 8001154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001156:	bc08      	pop	{r3}
 8001158:	469e      	mov	lr, r3
 800115a:	4770      	bx	lr
